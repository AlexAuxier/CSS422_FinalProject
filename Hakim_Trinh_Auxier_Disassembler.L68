00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 2014-12-12 00:29:15

00000000                             1                                     
00000000                             2      ****       ****  *******     ****    ***      ***
00000000                             3      ****       **** *******    ********  ***     ***
00000000                             4      *****     ***** ***       ***    *** ***    ***
00000000                             5      ******   ****** ***       ***    *** ***   ***
00000000                             6      ******* ******* ***        ********  ***  ***
00000000                             7      *************** *******     ******   ********
00000000                             8      ****  ***  **** ********   ********  ***  ***
00000000                             9      ****   *   **** ***   *** ***    *** ***   ***
00000000                            10      ****       **** ***   *** ***    *** ***    ***
00000000                            11      ****       **** ***   ***  ********  ***     ***
00000000                            12      ****       ****  *******     ****    ***      ***
00000000                            13      
00000000                            14              *********          ********** ****       ****
00000000                            15              ***********      *********    ****       ****
00000000                            16              ***    *****   *********      *****     *****
00000000                            17              ***      **** ********        ******   ******
00000000                            18              ***       *** ************    ******* *******
00000000                            19              ***       *** *************** ***************
00000000                            20              ***       ***    ************ ****  ***  ****
00000000                            21              ***      ***         ******** ****   *   ****
00000000                            22              ***    *****       ********   ****       ****
00000000                            23              ***********      *********    ****       ****
00000000                            24              *********     **********      ****       ****
00000000                            25          
00000000                            26  *-----------------------------------------------------------
00000000                            27  * Title      :  Motorola 68k Instruction Dissassembler (DSM)
00000000                            28  * Written by :  Abdul Hakim, David Trinh, Alexander Auxier
00000000                            29  * Date       :  2014-12-11
00000000                            30  * Description:  Stuff happens
00000000                            31  *-----------------------------------------------------------
00000000  =0000000D                 32  CR          EQU     $0D     
00000000  =0000000A                 33  LF          EQU     $0A
00000000                            34       
00000000  =00000000                 35  zero        EQU     $00                     ; defined hex value 0
00000000  =00000001                 36  one         EQU     $01                     ; defined hex value 1 
00000000  =00000002                 37  two         EQU     $02                     ; defined hex value 2
00000000  =00000003                 38  three       EQU     $03                     ; defined hex value 3
00000000  =00000004                 39  four        EQU     $04                     ; defined hex value 4
00000000  =00000005                 40  five        EQU     $05                     ; defined hex value 5
00000000  =00000006                 41  six         EQU     $06                     ; defined hex value 6
00000000  =00000007                 42  seven       EQU     $07                     ; defined hex value 7
00000000  =00000008                 43  eight       EQU     $08                     ; defined hex value 8
00000000  =00000009                 44  nine        EQU     $09                     ; defined hex value 9
00000000  =0000000B                 45  eleven      EQU     $0B                     ; defined hex value 11
00000000  =0000000C                 46  twelve      EQU     $0C                     ; defined hex value 12
00000000  =0000000D                 47  thirteen    EQU     $0D                     ; defined hex value 13
00000000  =0000000E                 48  fourteen    EQU     $0E                     ; defined hex value 14
00000000                            49  
00000000  =00000000                 50  mask0       EQU     %00000000
00000000  =00000001                 51  mask1       EQU     %00000001
00000000  =00000002                 52  mask2       EQU     %00000010
00000000  =00000004                 53  mask3       EQU     %00000100
00000000  =00000008                 54  mask4       EQU     %00001000
00000000  =00000010                 55  mask5       EQU     %00010000
00000000  =00000020                 56  mask6       EQU     %00100000
00000000  =00000040                 57  mask7       EQU     %01000000
00000000  =00000080                 58  mask8       EQU     %10000000
00000000                            59  
00000000  =00000005                 60  maskA       EQU     %00000101
00000000  =0000000A                 61  maskB       EQU     %00001010
00000000  =00000014                 62  maskC       EQU     %00010100
00000000  =00000028                 63  maskD       EQU     %00101000
00000000  =00000050                 64  maskE       EQU     %01010000
00000000  =000000A0                 65  maskF       EQU     %10100000
00000000                            66  
00000000  =000000F0                 67  firstNib    EQU     $F0
00000000  =0000000F                 68  secNib      EQU     $0F
00000000                            69               
00001000                            70              ORG    $1000
00001000                            71  START: 
00001000                            72  ***********************************************************************************************************
00001000                            73  *
00001000                            74  *                   Dissassembler Start
00001000                            75  *
00001000                            76  ***********************************************************************************************************
00001000                            77              ; Dissassemble Start, obtain addr range
00001000  43F9 00003C78             78              LEA         startingMessage, A1
00001006  103C 000E                 79              MOVE.B      #14, D0
0000100A  4E4F                      80              TRAP        #15    
0000100C                            81          
0000100C  103C 0002                 82              MOVE.B      #2, D0
00001010  4E4F                      83              TRAP        #15
00001012                            84      
00001012  4EB9 00003B0E             85              JSR         Address
00001018  2042                      86              MOVEA.L     D2, A0
0000101A                            87          
0000101A  43F9 00003C9A             88              LEA         endingMessage, A1
00001020  103C 000E                 89              MOVE.B      #14, D0
00001024  4E4F                      90              TRAP        #15    
00001026                            91      
00001026  103C 0002                 92              MOVE.B      #2, D0
0000102A  4E4F                      93              TRAP        #15
0000102C                            94      
0000102C  4EB9 00003B0E             95              JSR         Address
00001032  2442                      96              MOVEA.L     D2, A2
00001034                            97          
00001034  43F9 00003CD9             98              LEA         newline, A1
0000103A  103C 000E                 99              MOVE.B      #14, D0
0000103E  4E4F                     100              TRAP        #15 
00001040                           101            
00001040                           102  ***********************************************************************************************************
00001040                           103  *
00001040                           104  *                   Control Loop
00001040                           105  *
00001040                           106  *       This loop cycles and branches our code by the first nibble of OPCODE binary
00001040                           107  *
00001040                           108  ***********************************************************************************************************
00001040                           109            
00001040  4241                     110  LOOP        CLR         D1                  ; clear out D1
00001042  4242                     111              CLR         D2                  ; clear out D2
00001044  B1CA                     112              CMPA.L      A2, A0              ; compare starting and ending addresses
00001046  6E00 2C2C                113              BGT         endProg             ; if A0 > A1, we've finished, end program
0000104A  1218                     114              MOVE.B      (A0)+, D1           ; load byte to D1 and increment A0 to next byte
0000104C  1401                     115              MOVE.B      D1, D2              ; copy byte to D2 for manipulation
0000104E  E882                     116              ASR.L       #four, D2           ; get first nibble in D2
00001050                           117          
00001050  B43C 0000                118              CMP.B       #zero, D2           ; compare with 0
00001054  6700 0064                119              BEQ         braZero             ; branch out to zero method
00001058  B43C 0001                120              CMP.B       #one, D2            ; compare with 1
0000105C  6700 008C                121              BEQ         braOne              ; branch out to one method
00001060  B43C 0002                122              CMP.B       #two, D2            ; compare with 2    
00001064  6700 0088                123              BEQ         braTwo              ; branch out to two method
00001068  B43C 0003                124              CMP.B       #three, D2          ; compare with 3
0000106C  6700 0084                125              BEQ         braThree            ; branch out to three method
00001070  B43C 0004                126              CMP.B       #four, D2           ; compare with 4
00001074  6700 0080                127              BEQ         braFour             ; branch out to four method
00001078  B43C 0005                128              CMP.B       #five, D2           ; compare with 5
0000107C  6700 0094                129              BEQ         braFive             ; branch out to five method
00001080  B43C 0006                130              CMP.B       #six, D2            ; compare with 6
00001084  6700 0090                131              BEQ         braSix              ; branch out to six method
00001088  B43C 0008                132              CMP.B       #eight, D2          ; compare with 8
0000108C  6700 00BC                133              BEQ         braEight            ; branch out to eight method
00001090  B43C 0009                134              CMP.B       #nine, D2           ; compare with 9
00001094  6700 00CE                135              BEQ         braNine             ; branch out to nine method
00001098  B43C 000B                136              CMP.B       #eleven, D2         ; compare with 11
0000109C  6700 00CA                137              BEQ         braEleven           ; branch out to eleven method
000010A0  B43C 000C                138              CMP.B       #twelve, D2         ; compare with 12
000010A4  6700 00DC                139              BEQ         braTwelve           ; branch out to twelve method
000010A8  B43C 000D                140              CMP.B       #thirteen, D2       ; compare with 13
000010AC  6700 00D8                141              BEQ         braThirteen         ; branch out to thirteen method
000010B0  B43C 000E                142              CMP.B       #fourteen, D2       ; compare with 14
000010B4  6700 0122                143              BEQ         braFourteen         ; branch out to fourteen method
000010B8  6086                     144              BRA         loop
000010BA                           145  
000010BA                           146  ***********************************************************************************************************
000010BA                           147  *
000010BA                           148  *                   Nibble Branch Section
000010BA                           149  *
000010BA                           150  *       This section decides which nibble goes to the corresponding opcode
000010BA                           151  *
000010BA                           152  *********************************************************************************************************** 
000010BA                           153          
000010BA                           154  braZero     
000010BA  4242                     155              CLR         D2                  ; first nibble is 0, 3 opcodes are possible 
000010BC  1401                     156              MOVE.B      D1, D2              ; clear out D2 and copy D1 back in
000010BE  C43C 000F                157              AND.B       #secNib, D2         ; set first nibble to 0
000010C2                           158  
000010C2  B43C 0000                159              CMP.B       #zero, D2           ; compare second nibble to 0
000010C6  6700 0184                160              BEQ         opORI               ; branch to ORI method
000010CA  B43C 000C                161              CMP.B       #twelve, D2         ; compare second nibble to 12
000010CE  6700 02E4                162              BEQ         opCMPI              ; branch to CMPI method
000010D2  B43C 0008                163              CMP.B       #eight,D2           ; Test for static BCLR
000010D6  6700 046A                164              BEQ         opBCLR
000010DA  C47C 0001                165              AND         #one,D2             ; Sets all bits to 0 except for first bit if it is 1
000010DE  B43C 0001                166              CMP.B       #one,D2             ; if it is one then there is a chance it is dynamic BCLR
000010E2  6700 04C2                167              BEQ         opDynBCLR
000010E6  6000 2B86                168              BRA         printInvalid
000010EA                           169          
000010EA                           170  braOne      
000010EA  6000 0528                171              BRA         opMOVEB             ; we know that there is only one opcode that is MOVE.B
000010EE                           172  
000010EE                           173  braTwo      
000010EE  6000 05A8                174              BRA         opMOVEL             ; there are two opCodes available, MOVE.L, or MOVEA.L
000010F2                           175  
000010F2                           176  braThree                                    ; there are two opCodes available, MOVE.W, or MOVEA.W
000010F2  6000 06A0                177              BRA         opMOVEW
000010F6                           178  
000010F6  4242                     179  braFour     CLR         D2                  ; first nibble is 4, 5 opcodes are possible 
000010F8  1401                     180              MOVE.B      D1, D2              ; clear out D2 and copy D1 back in
000010FA  C43C 000F                181              AND.B       #secNib, D2         ; set first nibble to 0
000010FE                           182   
000010FE  B43C 0004                183              CMP.B       #four, D2           ; compare second nibble to 4
00001102  6700 0786                184              BEQ         opNEG               ; branch to NEG method
00001106  B43C 000E                185              CMP.B       #fourteen, D2       ; compare second nibble to E
0000110A  6700 086C                186              BEQ         opRTSJSR            ; branch to JSR or RTS method
0000110E  6000 08DE                187              BRA         opMOVEMLEA          ; otherwise, branch to MOVEM or LEA method
00001112                           188  
00001112                           189  braFive     
00001112  6000 10A6                190              BRA         opSUBQ              ; we know that there is only one opcode that is SUBQ
00001116                           191  
00001116                           192  braSix      
00001116  4242                     193              CLR         D2                  ; first nibble is 6, 5 opcodes are possible 
00001118  1401                     194              MOVE.B      D1, D2              ; clear out D2 and copy D1 back in
0000111A  C43C 000F                195              AND.B       #$0F, D2             ; set first nibble to 0
0000111E                           196   
0000111E  B43C 0000                197              CMP.B       #zero, D2           ; compare second nibble to 0
00001122  6700 0F7E                198              BEQ         opBRA               ; branch to BRA method
00001126  B43C 0005                199              CMP.B       #five, D2           ; compare second nibble to 5
0000112A  6700 0FAE                200              BEQ         opBCS               ; branch to BCS method
0000112E  B43C 0008                201              CMP.B       #eight, D2          ; compare second nibble to 8
00001132  6700 0FDE                202              BEQ         opBVC               ; branch to BCS method
00001136  B43C 000C                203              CMP.B       #twelve, D2         ; compare second nibble to 12
0000113A  6700 100E                204              BEQ         opBGE               ; branch to BGE method
0000113E  B43C 000D                205              CMP.B       #thirteen,D2        ; compare second nibble to 13
00001142  6700 103E                206              BEQ         opBLT               ; branch to BLT method
00001146  6000 2B26                207              BRA         printInvalid        ; found an un-supported opcode
0000114A                           208  
0000114A                           209  braEight                                    ; there are two opCodes available DIVS, or OR
0000114A  4242                     210              CLR         D2                  ; clear D2 for use
0000114C  E141                     211              ASL         #8,D1               ; Shift by eight 
0000114E  1218                     212              MOVE.B      (A0)+,D1            ; Move the instruction byte into D1
00001150  3401                     213              MOVE.W      D1,D2               ; Load D2 with the word from D1
00001152  EC42                     214              ASR         #six,D2             ; Shift by 6 to find second nibble
00001154  C47C 0007                215              AND         #$07,D2             ; AND by 7 to remove unwanted bits
00001158  B43C 0007                216              CMP.B       #seven,D2           ; Compare second nibble to 7
0000115C  6700 0B04                217              BEQ         opDIVS              ; If bits 8 - 6 are equal to 7, we have DIVS
00001160  6000 09B2                218              BRA         opOR                ; else opcode is OR
00001164                           219  
00001164                           220  braNine     
00001164  6000 0DE4                221              BRA         opSUB               ; we know that there is only one opcode that is SUB
00001168                           222  
00001168                           223  braEleven                                   ; there are two opCodes available EOR, or CMP
00001168  4242                     224              CLR         D2                  ; clear D2 for use
0000116A  E141                     225              ASL         #8,D1               ; Shift by eight for
0000116C  1218                     226              MOVE.B      (A0)+,D1            ; Re-load the instruction byte into D1
0000116E  3401                     227              MOVE.W      D1,D2               ; Move the word into D2 for the comparison
00001170  EC42                     228              ASR         #six,D2             ; Shift by 6 to find second nibble
00001172  C47C 0007                229              AND         #$07,D2             ; AND by 7 to remove unwanted bits
00001176  B43C 0003                230              CMP.B       #three,D2           ; Compare second nibble to 3
0000117A  6D00 0C8E                231              BLT         opCMP               ; If opmode bits are less than 3, we have CMP
0000117E  6E00 0B3C                232              BGT         opEOR               ; Else its EOR
00001182                           233  
00001182                           234  braTwelve   
00001182  6000 10AE                235              BRA         opMULS              ; we know that there is only one opcode that is MULS    
00001186                           236    
00001186                           237  braThirteen 
00001186  E141                     238              ASL         #eight, D1          ; we need the whole word to compare between add and adda, so move over the current byte 
00001188  1218                     239              MOVE.B      (A0)+, D1           ; load the remaining byte to D1
0000118A                           240              
0000118A  4242                     241              CLR         D2                  ; clear D2
0000118C  3401                     242              MOVE.W      D1, D2              ; copy opcode to D2
0000118E  EC42                     243              ASR         #six, D2            ; shift the bits right to get size and type
00001190  C47C 0007                244              AND         #seven,D2           ; clear out all but first 3 bits
00001194                           245              
00001194  B43C 0000                246              CMP.B       #zero,D2            ; compare 0 to D2
00001198  6700 10FC                247              BEQ         opADDB              ; we know its ADDB
0000119C  B43C 0001                248              CMP.B       #one, D2            ; compare 1 to D2
000011A0  6700 1160                249              BEQ         opADDW              ; we know its ADDW
000011A4  B43C 0002                250              CMP.B       #two, D2            ; compare 2 to D2
000011A8  6700 11C4                251              BEQ         opADDL              ; we know its ADDL
000011AC  B43C 0003                252              CMP.B       #three, D2          ; compare 3 to D2
000011B0  6700 1230                253              BEQ         opADDAW             ; we know its ADDAW
000011B4  B43C 0004                254              CMP.B       #four, D2           ; compare 4 to D2
000011B8  6700 10DC                255              BEQ         opADDB              ; we know its ADDB
000011BC  B43C 0005                256              CMP.B       #five, D2           ; compare 5 to D2
000011C0  6700 1140                257              BEQ         opADDW              ; we know its ADDW
000011C4  B43C 0006                258              CMP.B       #six, D2            ; compare 6 to D2
000011C8  6700 11A4                259              BEQ         opADDL              ; we know its ADDL
000011CC  B43C 0007                260              CMP.B       #seven, D2          ; compare 7 to D2
000011D0  6700 1280                261              BEQ         opADDAL             ; we know its ADDAL
000011D4  6000 2A98                262              BRA         printInvalid        ; invalid opcode
000011D8                           263               
000011D8                           264  braFourteen 
000011D8  E141                     265              ASL.W       #eight,D1           ; we need the whole word to compare between add and adda, so move over the current byte
000011DA  1218                     266              MOVE.B      (A0)+, D1           ; load the remaining byte to D1
000011DC                           267              
000011DC  4242                     268              CLR         D2                  ; clear D2
000011DE  3401                     269              MOVE.W      D1, D2              ; copy opcode to D2
000011E0  EC42                     270              ASR         #six, D2            ; shift the bits right to get size
000011E2  C47C 0003                271              AND         #03,D2
000011E6                           272          
000011E6  B43C 0003                273              CMP.B       #three, D2          ; if the size is three, we are shifting memory
000011EA  6700 0006                274              BEQ         memShifts           ; go to memory shift
000011EE  6000 0040                275              BRA         regShifts           ; else go to register shift
000011F2                           276  
000011F2                           277  memShifts   
000011F2  4242                     278              CLR         D2             
000011F4  3401                     279              MOVE.W      D1, D2              ; clear out D2 and copy D1 back in
000011F6  E082                     280              ASR.L       #eight,D2           ; move to get first byte back
000011F8  C47C 000F                281              AND         #secNib, D2         ; set first nibble to 0
000011FC                           282   
000011FC  B43C 0000                283              CMP.B       #zero, D2           ; compare second nibble to 0
00001200  6700 130C                284              BEQ         opASR               ; branch to ASR method
00001204  B43C 0001                285              CMP.B       #one, D2            ; compare second nibble to 1
00001208  6700 12B8                286              BEQ         opASL               ; branch to ASL method
0000120C  B43C 0002                287              CMP.B       #two, D2            ; compare second nibble to 2
00001210  6700 1394                288              BEQ         opLSR               ; branch to LSR method
00001214  B43C 0003                289              CMP.B       #three, D2          ; compare second nibble to 3
00001218  6700 1340                290              BEQ         opLSL               ; branch to LSL method
0000121C  B43C 0006                291              CMP.B       #six, D2            ; compare second nibble to 6
00001220  6700 141C                292              BEQ         opROR               ; branch to ROR method
00001224  B43C 0007                293              CMP.B       #seven, D2          ; compare second nibble to 7
00001228  6700 13C8                294              BEQ         opROL               ; branch to ROL method
0000122C  6000 2A40                295              BRA         printInvalid        ; otherwise, invalid
00001230                           296              
00001230                           297  regShifts   
00001230  B43C 0000                298              CMP.B       #zero, D2           ; if size is 0, we are shifting a byte
00001234  6700 1454                299              BEQ         memSB               ; branch to register shift byte
00001238  B43C 0001                300              CMP.B       #one, D2            ; if size is 1, we are shifting a word
0000123C  6700 16D6                301              BEQ         memSW               ; branch to register shift word
00001240  B43C 0002                302              CMP.B       #two, D2            ; if size is 1, we are shifting a long
00001244  6700 1958                303              BEQ         memSL               ; branch to register shift long
00001248  6000 2A24                304              BRA         printInvalid        ; otherwise, invalid
0000124C                           305              
0000124C                           306  ***********************************************************************************************************
0000124C                           307  *
0000124C                           308  *                   ORI OPCODE
0000124C                           309  *
0000124C                           310  ***********************************************************************************************************
0000124C                           311  
0000124C                           312  opORI       
0000124C  43F9 00003CEE            313              LEA         ORImatch, A1        ; we know that the opcode will be ORI, so load A1 to print message
00001252  103C 000E                314              MOVE.B      #14, D0             ; command for trap call to display message
00001256  4E4F                     315              TRAP        #15                 ; trap call
00001258                           316          
00001258  1218                     317              MOVE.B      (A0)+, D1
0000125A  1401                     318              MOVE.B      D1,D2               ; copy data over
0000125C  EC42                     319              ASR         #6,D2               ; shifts 6 bits over to read just the size        
0000125E  B43C 0000                320              CMP.B       #zero,D2
00001262  6700 0016                321              BEQ         opORIB
00001266  B43C 0001                322              CMP.B       #one,D2
0000126A  6700 0074                323              BEQ         opORIW
0000126E  B43C 0002                324              CMP.B       #two,D2
00001272  6700 00D2                325              BEQ         opORIL
00001276                           326          
00001276  6000 29F6                327              BRA         printInvalid
0000127A                           328          
0000127A                           329  opORIB      
0000127A  43F9 00003D77            330              LEA         dispByte, A1        ; Display byte
00001280  103C 000E                331              MOVE.B      #14, D0             ; command for trap call to display message
00001284  4E4F                     332              TRAP        #15                 ; trap call
00001286                           333          
00001286  43F9 00003CDD            334              LEA         space, A1           ; Display space
0000128C  103C 000E                335              MOVE.B      #14, D0             ; command for trap call to display message
00001290  4E4F                     336              TRAP        #15                 ; trap call
00001292                           337          
00001292  4244                     338              CLR         D4
00001294  1801                     339              MOVE.B      D1,D4
00001296  E644                     340              ASR         #three,D4
00001298  C87C 0007                341              AND         #seven,D4
0000129C  4245                     342              CLR         D5        
0000129E  1A01                     343              MOVE.B      D1,D5
000012A0  CA7C 0007                344              AND         #seven,D5
000012A4                           345          
000012A4  4243                     346              CLR         D3
000012A6  4242                     347              CLR         D2
000012A8  163C 0004                348              MOVE.B      #four,D3
000012AC  143C 0007                349              MOVE.B      #seven,D2
000012B0                           350  
000012B0  4EB9 00002F00            351              JSR         printEA
000012B6                           352          
000012B6  43F9 00003CE4            353              LEA         comma, A1           ; Display space
000012BC  103C 000E                354              MOVE.B      #14, D0             ; command for trap call to display message
000012C0  4E4F                     355              TRAP        #15                 ; trap call
000012C2                           356          
000012C2  4242                     357              CLR         D2
000012C4  4243                     358              CLR         D3
000012C6  1404                     359              MOVE.B      D4,D2
000012C8  1605                     360              MOVE.B      D5,D3
000012CA                           361          
000012CA  4EB9 00002F00            362              JSR         printEA
000012D0                           363          
000012D0  43F9 00003CD9            364              LEA         newLine, A1           ; Display space
000012D6  103C 000E                365              MOVE.B      #14, D0             ; command for trap call to display message
000012DA  4E4F                     366              TRAP        #15                 ; trap call
000012DC                           367          
000012DC  6000 FD62                368              BRA         LOOP
000012E0                           369          
000012E0                           370  opORIW      
000012E0  43F9 00003D7A            371              LEA         dispWord, A1        ; Display byte
000012E6  103C 000E                372              MOVE.B      #14, D0             ; command for trap call to display message
000012EA  4E4F                     373              TRAP        #15                 ; trap call
000012EC                           374          
000012EC  43F9 00003CDD            375              LEA         space, A1           ; Display space
000012F2  103C 000E                376              MOVE.B      #14, D0             ; command for trap call to display message
000012F6  4E4F                     377              TRAP        #15                 ; trap call
000012F8                           378          
000012F8  4244                     379              CLR         D4
000012FA  1801                     380              MOVE.B      D1,D4
000012FC  E644                     381              ASR         #three,D4
000012FE  C87C 0007                382              AND         #seven,D4
00001302  4245                     383              CLR         D5        
00001304  1A01                     384              MOVE.B      D1,D5
00001306  CA7C 0007                385              AND         #seven,D5
0000130A                           386          
0000130A  4243                     387              CLR         D3
0000130C  4242                     388              CLR         D2
0000130E  163C 0004                389              MOVE.B      #four,D3
00001312  143C 0007                390              MOVE.B      #seven,D2
00001316                           391          
00001316  4EB9 00002F00            392              JSR         printEA
0000131C                           393          
0000131C  43F9 00003CE4            394              LEA         comma, A1           ; Display space
00001322  103C 000E                395              MOVE.B      #14, D0             ; command for trap call to display message
00001326  4E4F                     396              TRAP        #15                 ; trap call
00001328                           397          
00001328  4242                     398              CLR         D2
0000132A  4243                     399              CLR         D3
0000132C  1404                     400              MOVE.B      D4,D2
0000132E  1605                     401              MOVE.B      D5,D3
00001330                           402                  
00001330  4EB9 00002F00            403              JSR         printEA
00001336                           404          
00001336  43F9 00003CD9            405              LEA         newLine, A1           ; Display space
0000133C  103C 000E                406              MOVE.B      #14, D0             ; command for trap call to display message
00001340  4E4F                     407              TRAP        #15                 ; trap call
00001342                           408          
00001342  6000 FCFC                409              BRA         LOOP
00001346                           410       
00001346                           411  opORIL      
00001346  43F9 00003D7D            412              LEA         dispLong, A1        ; Display byte
0000134C  103C 000E                413              MOVE.B      #14, D0             ; command for trap call to display message
00001350  4E4F                     414              TRAP        #15                 ; trap call
00001352                           415          
00001352  43F9 00003CDD            416              LEA         space, A1           ; Display space
00001358  103C 000E                417              MOVE.B      #14, D0             ; command for trap call to display message
0000135C  4E4F                     418              TRAP        #15                 ; trap call
0000135E                           419          
0000135E  4244                     420              CLR         D4
00001360  1801                     421              MOVE.B      D1,D4
00001362  E644                     422              ASR         #three,D4
00001364  C87C 0007                423              AND         #seven,D4
00001368  4245                     424              CLR         D5        
0000136A  1A01                     425              MOVE.B      D1,D5
0000136C  CA7C 0007                426              AND         #seven,D5
00001370  1C3C 0001                427              MOVE.B      #one,D6
00001374                           428          
00001374  4243                     429              CLR         D3
00001376  4242                     430              CLR         D2
00001378  163C 0004                431              MOVE.B      #four,D3
0000137C  143C 0007                432              MOVE.B      #seven,D2      
00001380                           433          
00001380  4EB9 00002F00            434              JSR         printEA        
00001386                           435          
00001386  4243                     436              CLR         D3
00001388  4242                     437              CLR         D2
0000138A  163C 0004                438              MOVE.B      #four,D3
0000138E  143C 0007                439              MOVE.B      #seven,D2
00001392                           440          
00001392  43F9 00003CE4            441              LEA         comma, A1           ; Display space
00001398  103C 000E                442              MOVE.B      #14, D0             ; command for trap call to display message
0000139C  4E4F                     443              TRAP        #15                 ; trap call
0000139E                           444          
0000139E  4EB9 00002F00            445              JSR         printEA
000013A4                           446          
000013A4  43F9 00003CD9            447              LEA         newLine, A1           ; Display space
000013AA  103C 000E                448              MOVE.B      #14, D0             ; command for trap call to display message
000013AE  4E4F                     449              TRAP        #15                 ; trap call
000013B0                           450          
000013B0  6000 FC8E                451              BRA         LOOP
000013B4                           452          
000013B4                           453  ***********************************************************************************************************
000013B4                           454  *
000013B4                           455  *                   CMPI OPCODE
000013B4                           456  *
000013B4                           457  ***********************************************************************************************************
000013B4                           458          
000013B4                           459  opCMPI           
000013B4  1218                     460              MOVE.B      (A0)+, D1
000013B6  1401                     461              MOVE.B      D1,D2               ; copy data over
000013B8  EC42                     462              ASR         #6,D2               ; shifts 6 bits over to read just the size        
000013BA  B43C 0000                463              CMP.B       #zero,D2
000013BE  6700 0016                464              BEQ         opCMPIB
000013C2  B43C 0001                465              CMP.B       #one,D2
000013C6  6700 0080                466              BEQ         opCMPIW
000013CA  B43C 0002                467              CMP.B       #two,D2
000013CE  6700 00FC                468              BEQ         opCMPIL
000013D2  6000 21A4                469              BRA         invalid
000013D6                           470  
000013D6                           471  opCMPIB 
000013D6  43F9 00003CF2            472              LEA         CMPImatch, A1       ; we know that the opcode will be CMPI, so load A1 to print message
000013DC  103C 000E                473              MOVE.B      #14, D0             ; command for trap call to display message
000013E0  4E4F                     474              TRAP        #15                 ; trap call
000013E2                           475          
000013E2  43F9 00003D77            476              LEA         dispByte, A1        ; Display byte
000013E8  103C 000E                477              MOVE.B      #14, D0             ; command for trap call to display message
000013EC  4E4F                     478              TRAP        #15                 ; trap call
000013EE                           479          
000013EE  43F9 00003CDD            480              LEA         space, A1           ; Display space
000013F4  103C 000E                481              MOVE.B      #14, D0             ; command for trap call to display message
000013F8  4E4F                     482              TRAP        #15                 ; trap call
000013FA                           483          
000013FA  4244                     484              CLR         D4
000013FC  1801                     485              MOVE.B      D1,D4
000013FE  E644                     486              ASR         #three,D4
00001400  C87C 0007                487              AND         #seven,D4
00001404  4245                     488              CLR         D5        
00001406  1A01                     489              MOVE.B      D1,D5
00001408  CA7C 0007                490              AND         #seven,D5
0000140C                           491          
0000140C  4243                     492              CLR         D3
0000140E  4242                     493              CLR         D2
00001410  163C 0004                494              MOVE.B      #four,D3
00001414  143C 0007                495              MOVE.B      #seven,D2      
00001418                           496          
00001418  4EB9 00002F00            497              JSR         printEA  
0000141E                           498              
0000141E  43F9 00003CE4            499              LEA         comma, A1           ; Display space
00001424  103C 000E                500              MOVE.B      #14, D0             ; command for trap call to display message
00001428  4E4F                     501              TRAP        #15                 ; trap call
0000142A                           502          
0000142A  4242                     503              CLR         D2
0000142C  4243                     504              CLR         D3
0000142E  1404                     505              MOVE.B      D4,D2
00001430  1605                     506              MOVE.B      D5,D3        
00001432                           507          
00001432  4EB9 00002F00            508              JSR         printEA
00001438                           509          
00001438  43F9 00003CD9            510              LEA         newLine, A1         ; Display space
0000143E  103C 000E                511              MOVE.B      #14, D0             ; command for trap call to display message
00001442  4E4F                     512              TRAP        #15                 ; trap call
00001444                           513  
00001444  6000 FBFA                514              BRA         LOOP
00001448                           515  
00001448                           516  opCMPIW 
00001448  43F9 00003CF2            517              LEA         CMPImatch, A1       ; we know that the opcode will be CMPI, so load A1 to print message
0000144E  103C 000E                518              MOVE.B      #14, D0             ; command for trap call to display message
00001452  4E4F                     519              TRAP        #15                 ; trap call
00001454                           520          
00001454  43F9 00003D7A            521              LEA         dispWord, A1        ; Display byte
0000145A  103C 000E                522              MOVE.B      #14, D0             ; command for trap call to display message
0000145E  4E4F                     523              TRAP        #15                 ; trap call
00001460                           524          
00001460  43F9 00003CDD            525              LEA         space, A1           ; Display space
00001466  103C 000E                526              MOVE.B      #14, D0             ; command for trap call to display message
0000146A  4E4F                     527              TRAP        #15                 ; trap call
0000146C                           528          
0000146C  4244                     529              CLR         D4
0000146E  1801                     530              MOVE.B      D1,D4
00001470  E644                     531              ASR         #three,D4
00001472  C87C 0007                532              AND         #seven,D4
00001476  4245                     533              CLR         D5        
00001478  1A01                     534              MOVE.B      D1,D5
0000147A  CA7C 0007                535              AND         #seven,D5
0000147E                           536          
0000147E  4243                     537              CLR         D3
00001480  4242                     538              CLR         D2
00001482  163C 0004                539              MOVE.B      #four,D3
00001486  143C 0007                540              MOVE.B      #seven,D2      
0000148A                           541          
0000148A  4EB9 00002F00            542              JSR         printEA  
00001490                           543          
00001490  43F9 00003CE0            544              LEA         hashTag, A1         ; Display space
00001496  103C 000E                545              MOVE.B      #14, D0             ; command for trap call to display message
0000149A  4E4F                     546              TRAP        #15                 ; trap call
0000149C                           547          
0000149C  103C 0003                548              MOVE.B      #3, D0
000014A0  4E4F                     549              TRAP        #15
000014A2                           550          
000014A2  43F9 00003CE4            551              LEA         comma, A1           ; Display space
000014A8  103C 000E                552              MOVE.B      #14, D0             ; command for trap call to display message
000014AC  4E4F                     553              TRAP        #15                 ; trap call
000014AE                           554  
000014AE  4242                     555              CLR         D2
000014B0  4243                     556              CLR         D3
000014B2  1404                     557              MOVE.B      D4,D2
000014B4  1605                     558              MOVE.B      D5,D3       
000014B6                           559          
000014B6  4EB9 00002F00            560              JSR         printEA
000014BC                           561          
000014BC  43F9 00003CD9            562              LEA         newLine, A1           ; Display space
000014C2  103C 000E                563              MOVE.B      #14, D0             ; command for trap call to display message
000014C6  4E4F                     564              TRAP        #15                 ; trap call
000014C8  6000 FB76                565              BRA         LOOP
000014CC                           566  
000014CC                           567  opCMPIL 
000014CC  43F9 00003CF2            568              LEA         CMPImatch, A1       ; we know that the opcode will be CMPI, so load A1 to print message
000014D2  103C 000E                569              MOVE.B      #14, D0             ; command for trap call to display message
000014D6  4E4F                     570              TRAP        #15                 ; trap call
000014D8                           571          
000014D8  43F9 00003D7D            572              LEA         dispLong, A1        ; Display byte
000014DE  103C 000E                573              MOVE.B      #14, D0             ; command for trap call to display message
000014E2  4E4F                     574              TRAP        #15                 ; trap call
000014E4                           575          
000014E4  43F9 00003CDD            576              LEA         space, A1           ; Display space
000014EA  103C 000E                577              MOVE.B      #14, D0             ; command for trap call to display message
000014EE  4E4F                     578              TRAP        #15                 ; trap call
000014F0                           579          
000014F0  4244                     580              CLR         D4
000014F2  1801                     581              MOVE.B      D1,D4
000014F4  E644                     582              ASR         #three,D4
000014F6  C87C 0007                583              AND         #seven,D4
000014FA  4245                     584              CLR         D5        
000014FC  1A01                     585              MOVE.B      D1,D5
000014FE  CA7C 0007                586              AND         #seven,D5
00001502                           587          
00001502  4243                     588              CLR         D3
00001504  4242                     589              CLR         D2
00001506  163C 0004                590              MOVE.B      #four,D3
0000150A  143C 0007                591              MOVE.B      #seven,D2      
0000150E  1C3C 0001                592              MOVE.B      #one,D6
00001512                           593          
00001512  4EB9 00002F00            594              JSR         printEA  
00001518                           595          
00001518  43F9 00003CE4            596              LEA         comma, A1           ; Display space
0000151E  103C 000E                597              MOVE.B      #14, D0             ; command for trap call to display message
00001522  4E4F                     598              TRAP        #15                 ; trap call
00001524                           599          
00001524  4242                     600              CLR         D2
00001526  4243                     601              CLR         D3
00001528  1404                     602              MOVE.B      D4,D2
0000152A  1605                     603              MOVE.B      D5,D3              
0000152C                           604          
0000152C  4EB9 00002F00            605              JSR         printEA
00001532                           606          
00001532  43F9 00003CD9            607              LEA         newLine, A1         ; Display space
00001538  103C 000E                608              MOVE.B      #14, D0             ; command for trap call to display message
0000153C  4E4F                     609              TRAP        #15                 ; trap call
0000153E                           610          
0000153E  6000 FB00                611              BRA         LOOP
00001542                           612          
00001542                           613  ***********************************************************************************************************
00001542                           614  *
00001542                           615  *                   BCLR OPCODE
00001542                           616  *
00001542                           617  ***********************************************************************************************************
00001542                           618  
00001542                           619  opBCLR      
00001542  43F9 00003CF7            620              LEA         BCLRmatch, A1       ; we know that the opcode will be CMPI, so load A1 to print message
00001548  103C 000E                621              MOVE.B      #14, D0             ; command for trap call to display message
0000154C  4E4F                     622              TRAP        #15                 ; trap call
0000154E                           623  
0000154E  43F9 00003CDD            624              LEA         space, A1           ; Display space
00001554  103C 000E                625              MOVE.B      #14, D0             ; command for trap call to display message
00001558  4E4F                     626              TRAP        #15                 ; trap call
0000155A                           627                  
0000155A  4242                     628              CLR         D2
0000155C  1218                     629              MOVE.B      (A0)+, D1
0000155E  1401                     630              MOVE.B      D1,D2               ; copy data over
00001560  E642                     631              ASR         #three,D2           ; Shift to the right to remove register
00001562  C47C 0007                632              AND         #seven,D2           ; Sets other bits to 0 and leave Mode the same
00001566                           633                  
00001566  4243                     634              CLR         D3                  ; Clear D3 so we can move D1 in
00001568  1601                     635              MOVE.B      D1,D3               ; Move othr byte in
0000156A  C67C 0007                636              AND         #seven,D3           ; Set everything besides register to 0
0000156E                           637                 
0000156E  4241                     638              CLR         D1
00001570  3218                     639              MOVE.W      (A0)+, D1
00001572                           640                 
00001572                           641                  
00001572  43F9 00003CE0            642              LEA         hashTag, A1         ; Display space
00001578  103C 000E                643              MOVE.B      #14, D0             ; command for trap call to display message
0000157C  4E4F                     644              TRAP        #15                 ; trap call
0000157E                           645          
0000157E  103C 0003                646              MOVE.B      #3, D0
00001582  4E4F                     647              TRAP        #15
00001584                           648          
00001584  43F9 00003CE4            649              LEA         comma, A1           ; Display space
0000158A  103C 000E                650              MOVE.B      #14, D0             ; command for trap call to display message
0000158E  4E4F                     651              TRAP        #15                 ; trap call
00001590                           652                  
00001590  4EB9 00002F00            653              JSR         printEA
00001596                           654          
00001596  43F9 00003CD9            655              LEA         newLine, A1           ; Display space
0000159C  103C 000E                656              MOVE.B      #14, D0             ; command for trap call to display message
000015A0  4E4F                     657              TRAP        #15                 ; trap call
000015A2                           658                  
000015A2  6000 FA9C                659              BRA         LOOP                
000015A6                           660          
000015A6                           661  opDynBCLR       
000015A6  4241                     662              CLR         D1
000015A8  1218                     663              MOVE.B      (A0)+,D1            ; Copy second byte in
000015AA  1601                     664              MOVE.B      D1,D3               ; Will use D4 to store in the source register
000015AC  E243                     665              ASR         #one,D3             ; Shift register over to the end
000015AE  C67C 0007                666              AND         #seven,D3           ; Change all bits except for the register to 0. Source Register is now in D4
000015B2                           667                  
000015B2  1401                     668              MOVE.B      D1,D2
000015B4  EC42                     669              ASR         #six,D2             ; Removing mode and register to check BCLR bits
000015B6  B47C 0002                670              CMP         #two,D2             ; Checking the static bits to make sure it is BCLR
000015BA  6600 26B2                671              BNE         printInvalid        ; If not equal, than this is not BCLR or any other mode we're dealing with
000015BE                           672  
000015BE                           673                  
000015BE  43F9 00003CF7            674              LEA         BCLRmatch, A1       ; we now know that the opcode will be BCLR, so load A1 to print message
000015C4  103C 000E                675              MOVE.B      #14, D0             ; command for trap call to display message
000015C8  4E4F                     676              TRAP        #15                 ; trap call  
000015CA                           677                  
000015CA  43F9 00003CDD            678              LEA         space, A1           ; Display space
000015D0  103C 000E                679              MOVE.B      #14, D0             ; command for trap call to display message
000015D4  4E4F                     680              TRAP        #15                 ; trap call
000015D6                           681                  
000015D6  143C 0000                682              MOVE.B      #zero,D2                
000015DA  4EB9 00002F00            683              JSR         printEA
000015E0                           684                  
000015E0  43F9 00003CE4            685              LEA         comma, A1           ; Display space
000015E6  103C 000E                686              MOVE.B      #14, D0             ; command for trap call to display message
000015EA  4E4F                     687              TRAP        #15                 ; trap call
000015EC                           688                
000015EC  4242                     689              CLR         D2
000015EE  1401                     690              MOVE.B      D1,D2               ; Using D2 to store EA mode
000015F0  E642                     691              ASR         #three,D2           ; Remove/shift the register out
000015F2  C47C 0007                692              AND         #seven,D2           ; Change all bits except for the mode bits to 0
000015F6                           693                  
000015F6  4243                     694              CLR         D3                  ; Clearing D3 to avoid mashing data
000015F8  1601                     695              MOVE.B      D1,D3               ; Moving byte into D3. Using D3 to store EA register
000015FA  C67C 0007                696              AND         #seven,D3           ; Change all bits except for register bits to 0
000015FE                           697              
000015FE  4EB9 00002F00            698              JSR         printEA
00001604                           699          
00001604  43F9 00003CD9            700              LEA         newLine, A1         ; Display space
0000160A  103C 000E                701              MOVE.B      #14, D0             ; command for trap call to display message
0000160E  4E4F                     702              TRAP        #15                 ; trap call            
00001610                           703  
00001610                           704  
00001610  6000 FA2E                705              BRA         LOOP                ; go back to the loop   
00001614                           706                  
00001614                           707  ***********************************************************************************************************
00001614                           708  *
00001614                           709  *                   MOVE OPCODE
00001614                           710  *                   MOVEA OPCODE
00001614                           711  *
00001614                           712  ***********************************************************************************************************
00001614                           713   
00001614                           714  opMOVEB 
00001614  43F9 00003CFC            715              LEA         MOVEmatch, A1       ; we know that the opcode will be MOVE.B, so load A1 to print message
0000161A  103C 000E                716              MOVE.B      #14, D0             ; command for trap call to display message
0000161E  4E4F                     717              TRAP        #15                 ; trap call
00001620  43F9 00003D77            718              LEA         dispByte, A1        ; display byte
00001626  103C 000E                719              MOVE.B      #14, D0             ; command for trap call to display message
0000162A  4E4F                     720              TRAP        #15                 ; trap call
0000162C  43F9 00003CDD            721              LEA         space, A1           ; create spaces
00001632  103C 000E                722              MOVE.B      #14, D0             ; command for trap call to display message
00001636  4E4F                     723              TRAP        #15                 ; trap call
00001638                           724          
00001638                           725          
00001638  4245                     726              CLR         D5                  ; Clear D5
0000163A  1A01                     727              MOVE.B      D1,D5               ; Copying byte over to D5. Will use D5 to store destination Register
0000163C  E245                     728              ASR         #one,D5             ; shifted mode out. Register is now stored into D5
0000163E  CA7C 0007                729              AND         #seven,D5
00001642                           730          
00001642  4244                     731              CLR         D4                  ; Clear out D4
00001644  1801                     732              MOVE.B      D1,D4               ; Copy byte over to store destination mode
00001646  C87C 0001                733              AND         #one,D4             ; Set all the other bits to 0, leave the bit for the destination mode alone.
0000164A                           734          
0000164A  4241                     735              CLR          D1
0000164C  4242                     736              CLR          D2
0000164E  1218                     737              MOVE.B      (A0)+,D1            ; Copy byte into D1
00001650  1401                     738              MOVE.B      D1,D2
00001652  EC42                     739              ASR         #6,D2               ; Shifts source mode and register out to get destination mode
00001654  D842                     740              ADD         D2,D4               ; Adds the remaining bits to D4
00001656                           741          
00001656  4242                     742              CLR         D2
00001658  1401                     743              MOVE.B      D1,D2               ; Copy new byte over to D2
0000165A  E642                     744              ASR         #three,D2           ; Shift source register out
0000165C  C47C 0007                745              AND         #seven,D2           ; Set everything to 0 except for the mode
00001660                           746          
00001660  4243                     747              CLR         D3
00001662  1601                     748              MOVE.B      D1,D3
00001664  C67C 0007                749              AND         #seven,D3
00001668                           750          
00001668  4EB9 00002F00            751              JSR         printEA
0000166E                           752          
0000166E  43F9 00003CE4            753              LEA         comma, A1           ; Display space
00001674  103C 000E                754              MOVE.B      #14, D0             ; command for trap call to display message
00001678  4E4F                     755              TRAP        #15                 ; trap call
0000167A                           756          
0000167A  4242                     757              CLR         D2
0000167C  4243                     758              CLR         D3
0000167E  1404                     759              MOVE.B      D4,D2
00001680  1605                     760              MOVE.B      D5,D3
00001682                           761          
00001682  4EB9 00002F00            762              JSR         printEA
00001688                           763          
00001688  43F9 00003CD9            764              LEA         newLine, A1         ; Display space
0000168E  103C 000E                765              MOVE.B      #14, D0             ; command for trap call to display message
00001692  4E4F                     766              TRAP        #15                 ; trap call            
00001694                           767  
00001694  6000 F9AA                768              BRA         LOOP                ; go back to the loop
00001698                           769          
00001698                           770  opMOVEL     
00001698  4245                     771              CLR         D5                  ; Clear D5
0000169A  1A01                     772              MOVE.B      D1,D5               ; Copying byte over to D5. Will use D5 to store destination Register
0000169C  E245                     773              ASR         #one,D5             ; shifted mode out. Register is now stored into D5
0000169E  CA7C 0007                774              AND         #seven,D5
000016A2                           775          
000016A2  4244                     776              CLR         D4                  ; Clear out D4
000016A4  1801                     777              MOVE.B      D1,D4               ; Copy byte over to store destination mode
000016A6  C87C 0001                778              AND         #one,D4             ; Set all the other bits to 0, leave the bit for the destination mode alone.
000016AA                           779          
000016AA  4241                     780              CLR          D1
000016AC  4242                     781              CLR          D2
000016AE  1218                     782              MOVE.B      (A0)+,D1            ; Copy byte into D1
000016B0  1401                     783              MOVE.B      D1,D2
000016B2  EC42                     784              ASR         #6,D2               ; Shifts source mode and register out to get destination mode
000016B4  D842                     785              ADD         D2,D4               ; Adds the remaining bits to D4
000016B6                           786          
000016B6  B87C 0001                787              CMP         #one,D4             ; Check if it is MOVEA
000016BA  6700 0070                788              BEQ         opMOVEAL            ; If it is, branch off
000016BE                           789              
000016BE  43F9 00003CFC            790              LEA         MOVEmatch, A1       ; we know that the opcode will be MOVE.L OR MOVEA.L, so load A1 to print message
000016C4  103C 000E                791              MOVE.B      #14, D0             ; command for trap call to display message
000016C8  4E4F                     792              TRAP        #15                 ; trap call  
000016CA                           793              
000016CA  43F9 00003D7D            794              LEA         dispLong,A1
000016D0  103C 000E                795              MOVE.B      #14, D0             ; command for trap call to display message
000016D4  4E4F                     796              TRAP        #15                 ; trap call
000016D6                           797              
000016D6  43F9 00003CDD            798              LEA         space, A1           ; create spaces
000016DC  103C 000E                799              MOVE.B      #14, D0             ; command for trap call to display message
000016E0  4E4F                     800              TRAP        #15                 ; trap call
000016E2                           801          
000016E2  4242                     802              CLR         D2
000016E4  1401                     803              MOVE.B      D1,D2               ; Copy new byte over to D2
000016E6  E642                     804              ASR         #three,D2           ; Shift source register out
000016E8  C47C 0007                805              AND         #seven,D2           ; Set everything to 0 except for the mode
000016EC                           806          
000016EC  4243                     807              CLR         D3
000016EE  1601                     808              MOVE.B      D1,D3
000016F0  C67C 0007                809              AND         #seven,D3
000016F4                           810              
000016F4  4246                     811              CLR         D6
000016F6  1C3C 0001                812              MOVE.B      #1,D6
000016FA  4EB9 00002F00            813              JSR         printEA
00001700  4246                     814              CLR         D6
00001702                           815              
00001702  43F9 00003CE4            816              LEA         comma, A1           ; Display comma
00001708  103C 000E                817              MOVE.B      #14, D0             ; command for trap call to display message
0000170C  4E4F                     818              TRAP        #15                 ; trap call
0000170E                           819          
0000170E  4242                     820              CLR         D2
00001710  4243                     821              CLR         D3
00001712  1404                     822              MOVE.B      D4,D2
00001714  1605                     823              MOVE.B      D5,D3
00001716                           824             
00001716  4EB9 00002F00            825              JSR         printEA
0000171C                           826  
0000171C  43F9 00003CD9            827              LEA         newLine, A1         ; Display space
00001722  103C 000E                828              MOVE.B      #14, D0             ; command for trap call to display message
00001726  4E4F                     829              TRAP        #15                 ; trap call            
00001728                           830  
00001728  6000 F916                831              BRA         LOOP                ; go back to the loop
0000172C                           832              
0000172C                           833  opMOVEAL
0000172C  43F9 00003D01            834              LEA         MOVEAmatch,A1
00001732  103C 000E                835              MOVE.B      #14, D0             ; command for trap call to display message
00001736  4E4F                     836              TRAP        #15                 ; trap call
00001738                           837              
00001738  43F9 00003D7D            838              LEA         dispLong,A1
0000173E  103C 000E                839              MOVE.B      #14, D0             ; command for trap call to display message
00001742  4E4F                     840              TRAP        #15                 ; trap call
00001744                           841              
00001744                           842  
00001744  43F9 00003CDD            843              LEA         space, A1           ; create spaces
0000174A  103C 000E                844              MOVE.B      #14, D0             ; command for trap call to display message
0000174E  4E4F                     845              TRAP        #15                 ; trap call
00001750                           846              
00001750  4242                     847              CLR         D2
00001752  1401                     848              MOVE.B      D1,D2               ; Copy new byte over to D2
00001754  E642                     849              ASR         #three,D2           ; Shift source register out
00001756  C47C 0007                850              AND         #seven,D2           ; Set everything to 0 except for the mode
0000175A                           851          
0000175A  4243                     852              CLR         D3
0000175C  1601                     853              MOVE.B      D1,D3
0000175E  C67C 0007                854              AND         #seven,D3
00001762                           855              
00001762  4241                     856              CLR         D1                  ; Clear D1
00001764                           857              
00001764  4EB9 00002F00            858              JSR         printEA
0000176A                           859              
0000176A  43F9 00003CE4            860              LEA         comma, A1           ; Display comma
00001770  103C 000E                861              MOVE.B      #14, D0             ; command for trap call to display message
00001774  4E4F                     862              TRAP        #15                 ; trap call
00001776                           863  
00001776  4242                     864              CLR         D2
00001778  4243                     865              CLR         D3
0000177A  1404                     866              MOVE.B      D4,D2
0000177C  1605                     867              MOVE.B      D5,D3
0000177E                           868          
0000177E  4EB9 00002F00            869              JSR         printEA
00001784                           870          
00001784  43F9 00003CD9            871              LEA         newLine, A1         ; Display space
0000178A  103C 000E                872              MOVE.B      #14, D0             ; command for trap call to display message
0000178E  4E4F                     873              TRAP        #15                 ; trap call            
00001790                           874  
00001790  6000 F8AE                875              BRA         LOOP                ; go back to the loop
00001794                           876  
00001794                           877  opMOVEW
00001794  4245                     878              CLR         D5                  ; Clear D5
00001796  1A01                     879              MOVE.B      D1,D5               ; Copying byte over to D5. Will use D5 to store destination Register
00001798  E245                     880              ASR         #one,D5             ; shifted mode out. Register is now stored into D5
0000179A  CA7C 0007                881              AND         #seven,D5
0000179E                           882          
0000179E  4244                     883              CLR         D4                  ; Clear out D4
000017A0  1801                     884              MOVE.B      D1,D4               ; Copy byte over to store destination mode
000017A2  C87C 0001                885              AND         #one,D4             ; Set all the other bits to 0, leave the bit for the destination mode alone.
000017A6                           886          
000017A6  4241                     887              CLR          D1
000017A8  4242                     888              CLR          D2
000017AA  1218                     889              MOVE.B      (A0)+,D1            ; Copy byte into D1
000017AC  1401                     890              MOVE.B      D1,D2
000017AE  EC42                     891              ASR         #6,D2               ; Shifts source mode and register out to get destination mode
000017B0  D842                     892              ADD         D2,D4               ; Adds the remaining bits to D4
000017B2                           893          
000017B2  B87C 0001                894              CMP         #one,D4             ; Check if it is MOVEA
000017B6  6700 006A                895              BEQ         opMOVEAW            ; If it is, branch off
000017BA                           896              
000017BA  43F9 00003CFC            897              LEA         MOVEmatch, A1       ; we know that the opcode will be MOVE.L OR MOVEA.L, so load A1 to print message
000017C0  103C 000E                898              MOVE.B      #14, D0             ; command for trap call to display message
000017C4  4E4F                     899              TRAP        #15                 ; trap call  
000017C6                           900              
000017C6  43F9 00003D7A            901              LEA         dispWord,A1
000017CC  103C 000E                902              MOVE.B      #14, D0             ; command for trap call to display message
000017D0  4E4F                     903              TRAP        #15                 ; trap call
000017D2                           904              
000017D2  43F9 00003CDD            905              LEA         space, A1           ; create spaces
000017D8  103C 000E                906              MOVE.B      #14, D0             ; command for trap call to display message
000017DC  4E4F                     907              TRAP        #15                 ; trap call
000017DE                           908          
000017DE  4242                     909              CLR         D2
000017E0  1401                     910              MOVE.B      D1,D2               ; Copy new byte over to D2
000017E2  E642                     911              ASR         #three,D2           ; Shift source register out
000017E4  C47C 0007                912              AND         #seven,D2           ; Set everything to 0 except for the mode
000017E8                           913          
000017E8  4243                     914              CLR         D3
000017EA  1601                     915              MOVE.B      D1,D3
000017EC  C67C 0007                916              AND         #seven,D3
000017F0                           917              
000017F0  4241                     918              CLR         D1                  ; Clear D1
000017F2                           919              
000017F2  4EB9 00002F00            920              JSR         printEA
000017F8                           921              
000017F8  43F9 00003CE4            922              LEA         comma, A1           ; Display comma
000017FE  103C 000E                923              MOVE.B      #14, D0             ; command for trap call to display message
00001802  4E4F                     924              TRAP        #15                 ; trap call
00001804                           925          
00001804  4242                     926              CLR         D2
00001806  4243                     927              CLR         D3
00001808  1404                     928              MOVE.B      D4,D2
0000180A  1605                     929              MOVE.B      D5,D3
0000180C                           930              
0000180C  4EB9 00002F00            931              JSR         printEA
00001812                           932          
00001812  43F9 00003CD9            933              LEA         newLine, A1         ; Display space
00001818  103C 000E                934              MOVE.B      #14, D0             ; command for trap call to display message
0000181C  4E4F                     935              TRAP        #15                 ; trap call            
0000181E                           936  
0000181E  6000 F820                937              BRA         LOOP                ; go back to the loop
00001822                           938              
00001822                           939  opMOVEAW  
00001822  43F9 00003D01            940              LEA         MOVEAmatch,A1
00001828  103C 000E                941              MOVE.B      #14, D0             ; command for trap call to display message
0000182C  4E4F                     942              TRAP        #15                 ; trap call
0000182E                           943              
0000182E  43F9 00003D7A            944              LEA         dispWord,A1
00001834  103C 000E                945              MOVE.B      #14, D0             ; command for trap call to display message
00001838  4E4F                     946              TRAP        #15                 ; trap call
0000183A                           947              
0000183A  43F9 00003CDD            948              LEA         space, A1           ; create spaces
00001840  103C 000E                949              MOVE.B      #14, D0             ; command for trap call to display message
00001844  4E4F                     950              TRAP        #15                 ; trap call
00001846                           951              
00001846  4242                     952              CLR         D2
00001848  1401                     953              MOVE.B      D1,D2               ; Copy new byte over to D2
0000184A  E642                     954              ASR         #three,D2           ; Shift source register out
0000184C  C47C 0007                955              AND         #seven,D2           ; Set everything to 0 except for the mode
00001850                           956          
00001850  4243                     957              CLR         D3
00001852  1601                     958              MOVE.B      D1,D3
00001854  C67C 0007                959              AND         #seven,D3
00001858                           960              
00001858  4241                     961              CLR         D1                  ; Clear D1      
0000185A                           962              
0000185A  4EB9 00002F00            963              JSR         printEA
00001860                           964              
00001860  43F9 00003CE4            965              LEA         comma, A1           ; Display comma
00001866  103C 000E                966              MOVE.B      #14, D0             ; command for trap call to display message
0000186A  4E4F                     967              TRAP        #15                 ; trap call
0000186C                           968  
0000186C  4242                     969              CLR         D2
0000186E  4243                     970              CLR         D3
00001870  1404                     971              MOVE.B      D4,D2
00001872  1605                     972              MOVE.B      D5,D3
00001874                           973          
00001874  4EB9 00002F00            974              JSR         printEA
0000187A                           975          
0000187A  43F9 00003CD9            976              LEA         newLine, A1         ; Display space
00001880  103C 000E                977              MOVE.B      #14, D0             ; command for trap call to display message
00001884  4E4F                     978              TRAP        #15                 ; trap call            
00001886                           979  
00001886  6000 F7B8                980              BRA         LOOP                ; go back to the loop
0000188A                           981  
0000188A                           982  ***********************************************************************************************************
0000188A                           983  *
0000188A                           984  *                   NEG OPCODE
0000188A                           985  *
0000188A                           986  ***********************************************************************************************************
0000188A                           987  
0000188A                           988  opNEG   
0000188A  43F9 00003D07            989              LEA         NEGmatch, A1        ; we know that the opcode will be NEG, so load A1 to print message
00001890  103C 000E                990              MOVE.B      #14, D0             ; command for trap call to display message
00001894  4E4F                     991              TRAP        #15                 ; trap call
00001896                           992          
00001896                           993          
00001896  1218                     994              MOVE.B      (A0)+, D1
00001898  1401                     995              MOVE.B      D1,D2               ; copy data over
0000189A  EC42                     996              ASR         #six,D2
0000189C                           997              
0000189C  B47C 0000                998              CMP         #zero,D2
000018A0  6700 0016                999              BEQ         opNEGB
000018A4  B47C 0001               1000              CMP         #one,D2
000018A8  6700 008E               1001              BEQ         opNEGW
000018AC  B47C 0002               1002              CMP         #two,D2
000018B0  6700 0046               1003              BEQ         opNEGL
000018B4  6000 1CC2               1004              BRA         invalid
000018B8                          1005              
000018B8                          1006  opNEGB
000018B8  43F9 00003D77           1007              LEA         dispByte, A1        ; we know that the opcode will be NEG, so load A1 to print message
000018BE  103C 000E               1008              MOVE.B      #14, D0             ; command for trap call to display message
000018C2  4E4F                    1009              TRAP        #15                 ; trap call
000018C4                          1010          
000018C4  43F9 00003CDD           1011              LEA         space, A1           ; we know that the opcode will be NEG, so load A1 to print message
000018CA  103C 000E               1012              MOVE.B      #14, D0             ; command for trap call to display message
000018CE  4E4F                    1013              TRAP        #15                 ; trap call
000018D0                          1014          
000018D0  4242                    1015              CLR         D2                  ; Clear Data register 2
000018D2  3401                    1016              MOVE        D1,D2               ; Move byte into D2
000018D4  E642                    1017              ASR         #three,D2           ; Shift mode into place and moves mode into place
000018D6  C47C 0007               1018              AND         #seven,D2           ; Stores mode
000018DA                          1019              
000018DA  4243                    1020              CLR         D3
000018DC  3601                    1021              MOVE        D1,D3
000018DE  C67C 0007               1022              AND         #seven,D3
000018E2                          1023          
000018E2  4EB9 00002F00           1024              JSR         printEA
000018E8                          1025                  
000018E8  43F9 00003CD9           1026              LEA         newLine, A1         ; Display space
000018EE  103C 000E               1027              MOVE.B      #14, D0             ; command for trap call to display message
000018F2  4E4F                    1028              TRAP        #15                 ; trap call  
000018F4                          1029          
000018F4  6000 F74A               1030              BRA         LOOP
000018F8                          1031  
000018F8                          1032  opNEGL
000018F8  43F9 00003D7D           1033              LEA         dispLong, A1        ; we know that the opcode will be NEG, so load A1 to print message
000018FE  103C 000E               1034              MOVE.B      #14, D0             ; command for trap call to display message
00001902  4E4F                    1035              TRAP        #15                 ; trap call
00001904                          1036  
00001904  43F9 00003CDD           1037              LEA         space, A1           ; we know that the opcode will be NEG, so load A1 to print message
0000190A  103C 000E               1038              MOVE.B      #14, D0             ; command for trap call to display message
0000190E  4E4F                    1039              TRAP        #15                 ; trap call
00001910                          1040                  
00001910  4242                    1041              CLR         D2                  ; Clear Data register 2
00001912  3401                    1042              MOVE        D1,D2               ; Move byte into D2
00001914  E642                    1043              ASR         #three,D2           ; Shift mode into place and moves mode into place
00001916  C47C 0007               1044              AND         #seven,D2           ; Stores mode
0000191A                          1045          
0000191A  4243                    1046              CLR         D3
0000191C  3601                    1047              MOVE        D1,D3
0000191E  C67C 0007               1048              AND         #seven,D3
00001922                          1049          
00001922  4EB9 00002F00           1050              JSR         printEA
00001928                          1051                      
00001928  43F9 00003CD9           1052              LEA         newLine, A1         ; Display space
0000192E  103C 000E               1053              MOVE.B      #14, D0             ; command for trap call to display message
00001932  4E4F                    1054              TRAP        #15                 ; trap call  
00001934                          1055          
00001934  6000 F70A               1056              BRA         LOOP
00001938                          1057  
00001938                          1058  opNEGW
00001938  43F9 00003D7A           1059              LEA         dispWord, A1        ; we know that the opcode will be NEG, so load A1 to print message
0000193E  103C 000E               1060              MOVE.B      #14, D0             ; command for trap call to display message
00001942  4E4F                    1061              TRAP        #15                 ; trap call
00001944                          1062          
00001944  43F9 00003CDD           1063              LEA         space, A1           ; we know that the opcode will be NEG, so load A1 to print message
0000194A  103C 000E               1064              MOVE.B      #14, D0             ; command for trap call to display message
0000194E  4E4F                    1065              TRAP        #15                 ; trap call        
00001950                          1066                  
00001950  4242                    1067              CLR         D2                  ; Clear Data register 2
00001952  3401                    1068              MOVE        D1,D2               ; Move byte into D2
00001954  E642                    1069              ASR         #three,D2           ; Shift mode into place and moves mode into place
00001956  C47C 0007               1070              AND         #seven,D2           ; Stores mode
0000195A                          1071          
0000195A  4243                    1072              CLR         D3
0000195C  3601                    1073              MOVE        D1,D3
0000195E  C67C 0007               1074              AND         #seven,D3
00001962                          1075          
00001962  4EB9 00002F00           1076              JSR         printEA
00001968                          1077              
00001968  43F9 00003CD9           1078              LEA         newLine, A1         ; Display space
0000196E  103C 000E               1079              MOVE.B      #14, D0             ; command for trap call to display message
00001972  4E4F                    1080              TRAP        #15                 ; trap call  
00001974                          1081          
00001974  6000 F6CA               1082              BRA         LOOP
00001978                          1083              
00001978                          1084  ***********************************************************************************************************
00001978                          1085  *
00001978                          1086  *                   RTS_JSR Helper Function
00001978                          1087  *
00001978                          1088  ***********************************************************************************************************
00001978                          1089  
00001978                          1090  opRTSJSR
00001978  1218                    1091              MOVE.B      (A0)+, D1
0000197A                          1092              
0000197A  1401                    1093              MOVE.B      D1,D2               ; copy data over
0000197C  B47C 0075               1094              CMP         #117,D2
00001980  6700 0050               1095              BEQ         opRTS
00001984                          1096              
00001984  EC42                    1097              ASR         #six,D2             ; Moving bits over to check if it matches the two static bits in JSR
00001986  B47C 0002               1098              CMP         #two,D2             ; Checking if it is JSR
0000198A  6700 0006               1099              BEQ         opJSR               ; It is equal, so branch off to opJSR
0000198E                          1100  
0000198E  6000 1BE8               1101              BRA         invalid
00001992                          1102              
00001992                          1103  ***********************************************************************************************************
00001992                          1104  *
00001992                          1105  *                   JSR OPCODE
00001992                          1106  *
00001992                          1107  ***********************************************************************************************************
00001992                          1108  
00001992                          1109  opJSR
00001992  43F9 00003D0F           1110              LEA         JSRMatch, A1        ; we know that the opcode will be JSR, so load A1 to print message
00001998  103C 000E               1111              MOVE.B      #14, D0             ; command for trap call to display message
0000199C  4E4F                    1112              TRAP        #15                 ; trap call
0000199E                          1113              
0000199E  43F9 00003CDD           1114              LEA         space, A1           ; we know that the opcode will be NEG, so load A1 to print message
000019A4  103C 000E               1115              MOVE.B      #14, D0             ; command for trap call to display message
000019A8  4E4F                    1116              TRAP        #15                 ; trap call
000019AA                          1117              
000019AA  4242                    1118              CLR         D2
000019AC  4243                    1119              CLR         D3
000019AE                          1120              
000019AE  1401                    1121              MOVE.B      D1,D2
000019B0  E642                    1122              ASR         #three,D2
000019B2  C47C 0007               1123              AND         #seven,D2
000019B6                          1124              
000019B6  1601                    1125              MOVE.B      D1,D3
000019B8  C67C 0007               1126              AND         #seven,D3
000019BC                          1127              
000019BC  4EB9 00002F00           1128              JSR         printEA
000019C2                          1129              
000019C2  43F9 00003CD9           1130              LEA         newLine, A1         ; Display space
000019C8  103C 000E               1131              MOVE.B      #14, D0             ; command for trap call to display message
000019CC  4E4F                    1132              TRAP        #15                 ; trap call  
000019CE                          1133              
000019CE  6000 F670               1134              BRA         loop   
000019D2                          1135  
000019D2                          1136  ***********************************************************************************************************
000019D2                          1137  *
000019D2                          1138  *                   RTS OPCODE
000019D2                          1139  *
000019D2                          1140  ***********************************************************************************************************
000019D2                          1141  
000019D2                          1142  opRTS
000019D2  43F9 00003D0B           1143              LEA         RTSMatch, A1        ; we know that the opcode will be RTS, so load A1 to print message
000019D8  103C 000E               1144              MOVE.B      #14, D0             ; command for trap call to display message
000019DC  4E4F                    1145              TRAP        #15                 ; trap call
000019DE                          1146              
000019DE  43F9 00003CD9           1147              LEA         newLine, A1         ; Display space
000019E4  103C 000E               1148              MOVE.B      #14, D0             ; command for trap call to display message
000019E8  4E4F                    1149              TRAP        #15                 ; trap call 
000019EA                          1150              
000019EA  6000 F654               1151              BRA         loop
000019EE                          1152              
000019EE                          1153  ***********************************************************************************************************
000019EE                          1154  *
000019EE                          1155  *                   MOVEM_LEA OPCODE
000019EE                          1156  *
000019EE                          1157  ***********************************************************************************************************
000019EE                          1158  
000019EE                          1159  opMOVEMLEA
000019EE  4242                    1160              CLR         D2                  ; Clear D2
000019F0  1401                    1161              MOVE.B      D1,D2               ; Copy byte over
000019F2  C47C 000F               1162              AND         #secNib,D2          ; Check only the second nibble
000019F6  B47C 000C               1163              CMP         #twelve,D2          ; Compare the second nibble to twelve
000019FA  6700 000E               1164              BEQ         opMOVEM             ; If it is twelve, then it is MOVEM
000019FE  B47C 0008               1165              CMP         #eight,D2           ; Compare the second nibble to eight
00001A02  6700 0006               1166              BEQ         opMOVEM             ; If it is eight, then it is also MOVEM
00001A06  6000 008C               1167              BRA         opLEA               ; Otherwise branch to OPLEA and check for invalid in there
00001A0A                          1168              
00001A0A                          1169  ***********************************************************************************************************
00001A0A                          1170  *
00001A0A                          1171  *                   MOVEM OPCODE
00001A0A                          1172  *
00001A0A                          1173  ***********************************************************************************************************
00001A0A                          1174  
00001A0A                          1175  opMOVEM            
00001A0A  4246                    1176              CLR         D6                  ; Clearing D4 to store dr field
00001A0C  1C01                    1177              MOVE.B      D1,D6               ; Moving byte to find dr field
00001A0E  E446                    1178              ASR         #two,D6             ; Moving dr field to readable spot
00001A10  CC7C 0001               1179              AND         #one,D6             ; seting everything except dr to 0
00001A14                          1180  
00001A14  4241                    1181              CLR         D1  
00001A16  1218                    1182              MOVE.B      (A0)+, D1           ; Taking in next byte
00001A18                          1183              
00001A18  4245                    1184              CLR         D5
00001A1A  1A01                    1185              MOVE.B      D1,D5               ; Using D6 to check if this is indeed MOVEM
00001A1C  EE45                    1186              ASR         #seven,D5
00001A1E  CA7C 0001               1187              AND         #one,D5
00001A22  BA7C 0001               1188              CMP         #one,D5             ; This bit should be one if this is MOVEM
00001A26  6600 1B50               1189              BNE         invalid             ; If this is not 1 then this is not moveM
00001A2A  4245                    1190              CLR         D5
00001A2C                          1191              
00001A2C  43F9 00003D13           1192              LEA         MOVEMMatch, A1        ; we know that the opcode will be MOVEM, so load A1 to print message
00001A32  103C 000E               1193              MOVE.B      #14, D0             ; command for trap call to display message
00001A36  4E4F                    1194              TRAP        #15                 ; trap call
00001A38                          1195              
00001A38  4245                    1196              CLR         D5                  ; Clearing D5 to store size
00001A3A  1A01                    1197              MOVE.B      D1,D5               ; Moving byte that contains bit for size
00001A3C  EC45                    1198              ASR         #six,D5             ; Moving size bit to the very right to read
00001A3E  CA7C 0001               1199              AND         #one,D5             ; Isolating the one bit for size
00001A42                          1200              
00001A42  4242                    1201              CLR         D2                  ; Storing EA mode in D2
00001A44  1401                    1202              MOVE.B      D1,D2               
00001A46  E642                    1203              ASR         #three,D2
00001A48  C47C 0007               1204              AND         #seven,D2
00001A4C                          1205              
00001A4C  4243                    1206              CLR         D3                  ; Storing EA register into D3
00001A4E  1601                    1207              MOVE.B      D1,D3
00001A50  C67C 0007               1208              AND         #seven,D3
00001A54                          1209              
00001A54  4EB9 00003582           1210              JSR         MOVEMBRA
00001A5A                          1211              
00001A5A  B47C 0003               1212              CMP         #three,D2           ; Checks if this is post increment
00001A5E  6700 0024               1213              BEQ         skipPrintEA         ; If it is, skipping printing EA again, because it is printed already in JSR
00001A62                          1214              
00001A62  43F9 00003CE4           1215              LEA         comma, A1           ; Display comma
00001A68  103C 000E               1216              MOVE.B      #14, D0             ; command for trap call to display message
00001A6C  4E4F                    1217              TRAP        #15                 ; trap call
00001A6E                          1218              
00001A6E  4EB9 00002F00           1219              JSR         printEA
00001A74                          1220              
00001A74  43F9 00003CD9           1221              LEA         newline, A1         ; we know that the opcode will be MOVEM, so load A1 to print message
00001A7A  103C 000E               1222              MOVE.B      #14, D0             ; command for trap call to display message
00001A7E  4E4F                    1223              TRAP        #15                 ; trap call            
00001A80                          1224  
00001A80  6000 F5BE               1225              BRA         loop            
00001A84                          1226  
00001A84                          1227  skipPrintEA 
00001A84  43F9 00003CD9           1228              LEA         newline, A1        
00001A8A  103C 000E               1229              MOVE.B      #14, D0             ; command for trap call to display message
00001A8E  4E4F                    1230              TRAP        #15                 ; trap call            
00001A90                          1231  
00001A90  6000 F5AE               1232              BRA         loop 
00001A94                          1233              
00001A94                          1234  ***********************************************************************************************************
00001A94                          1235  *
00001A94                          1236  *               LEA OPCODE
00001A94                          1237  *
00001A94                          1238  ***********************************************************************************************************
00001A94                          1239  
00001A94                          1240  opLEA
00001A94  4244                    1241              CLR         D4                  ; Clearing space for source register
00001A96  1801                    1242              MOVE.B      D1,D4               ; Moving byte to isolate register
00001A98  E244                    1243              ASR         #one,D4
00001A9A  C87C 0007               1244              AND         #seven,D4           ; Isolated register
00001A9E                          1245  
00001A9E  4245                    1246              CLR         D5                  ; Clearing D5 to check if bits match LEA static bits
00001AA0  1A01                    1247              MOVE.B      D1,D5
00001AA2  CA7C 0001               1248              AND         #one,D5
00001AA6  E545                    1249              ASL         #two,D5
00001AA8                          1250              
00001AA8  1218                    1251              MOVE.B      (A0)+, D1           ; Taking in next byte
00001AAA                          1252              
00001AAA  1C01                    1253              MOVE.B      D1,D6
00001AAC  EC46                    1254              ASR         #six,D6
00001AAE  DA46                    1255              ADD         D6,D5
00001AB0  4246                    1256              CLR         D6
00001AB2                          1257  
00001AB2  BA7C 0007               1258              CMP         #seven,D5
00001AB6  6600 1AC0               1259              BNE         invalid   
00001ABA                          1260              
00001ABA  43F9 00003D19           1261              LEA         LEAmatch, A1        ; we know that the opcode will be LEA, so load A1 to print message
00001AC0  103C 000E               1262              MOVE.B      #14, D0             ; command for trap call to display message
00001AC4  4E4F                    1263              TRAP        #15                 ; trap call            
00001AC6                          1264  
00001AC6  43F9 00003CDD           1265              LEA         space, A1           ; we know that the opcode will be MOVEM, so load A1 to print message
00001ACC  103C 000E               1266              MOVE.B      #14, D0             ; command for trap call to display message
00001AD0  4E4F                    1267              TRAP        #15                 ; trap call            
00001AD2                          1268              
00001AD2  4242                    1269              CLR         D2
00001AD4  1401                    1270              MOVE.B      D1,D2
00001AD6  E642                    1271              ASR         #three,D2
00001AD8  C47C 0007               1272              AND         #seven,D2
00001ADC                          1273              
00001ADC  4243                    1274              CLR         D3
00001ADE  1601                    1275              MOVE.B      D1,D3
00001AE0  C67C 0007               1276              AND         #seven,D3
00001AE4                          1277              
00001AE4  4EB9 00002F00           1278              JSR         printEA
00001AEA                          1279              
00001AEA  43F9 00003CE4           1280              LEA         comma, A1           ; we know that the opcode will be MOVEM, so load A1 to print message
00001AF0  103C 000E               1281              MOVE.B      #14, D0             ; command for trap call to display message
00001AF4  4E4F                    1282              TRAP        #15                 ; trap call            
00001AF6                          1283              
00001AF6                          1284              
00001AF6  4243                    1285              CLR         D3
00001AF8  1604                    1286              MOVE.B      D4,D3
00001AFA  143C 0001               1287              MOVE.B      #one,D2
00001AFE                          1288              
00001AFE  4EB9 00002F00           1289              JSR         printEA             ; Prints out source address
00001B04                          1290              
00001B04  43F9 00003CD9           1291              LEA         newline, A1         ; Prints new line
00001B0A  103C 000E               1292              MOVE.B      #14, D0             ; command for trap call to display message
00001B0E  4E4F                    1293              TRAP        #15                 ; trap call
00001B10                          1294  
00001B10  6000 F52E               1295              BRA         loop                        
00001B14                          1296  
00001B14                          1297  ***********************************************************************************************************
00001B14                          1298  *
00001B14                          1299  *                   OR OPCODE
00001B14                          1300  *
00001B14                          1301  *       This section is dedicated to the OR opcode. This is determined that the first nibble is 8, and the
00001B14                          1302  *       second nibble is not 7 (or we would have DIVS), we must have OR.
00001B14                          1303  *       OR is varied by the operand direction. We have and EA to Dn, and DN to EA operation.
00001B14                          1304  *       These operand directions determine our opmode, which we use to disassemble.
00001B14                          1305  *
00001B14                          1306  ***********************************************************************************************************
00001B14                          1307              
00001B14                          1308  opOR                                        ; Assumed we found OR, begin disassemble
00001B14  43F9 00003D3B           1309              LEA         ORmatch,A1          ; Output OR to the IO console
00001B1A  103C 000E               1310              MOVE.B      #14,D0              ; Use trap 14
00001B1E  4E4F                    1311              TRAP        #15                 ; Halt for IO
00001B20                          1312              
00001B20  E141                    1313              ASL         #eight,D1           ; Shift D1 by eight to find opmode
00001B22  1401                    1314              MOVE.B      D1,D2               ; Load D2 with the resulting byte
00001B24                          1315              
00001B24                          1316              ; These are for EA to Dn direction
00001B24  B43C 0000               1317              CMP.B       #zero,D2            ; Check for a byte
00001B28  6700 002A               1318              BEQ         opORB               ; Byte in opmode
00001B2C  B43C 0001               1319              CMP.B       #one,D2             ; Check for a word
00001B30  6700 007C               1320              BEQ         opORW               ; Word in opmode
00001B34  B43C 0002               1321              CMP.B       #two,D2             ; Check for a long
00001B38  6700 00CE               1322              BEQ         opORL               ; Long in opmode
00001B3C                          1323              
00001B3C                          1324              ; These are for Dn to EA direction
00001B3C  B43C 0004               1325              CMP.B       #four,D2            ; Check for a byte
00001B40  6700 0012               1326              BEQ         opORB               ; Byte in opmode
00001B44  B43C 0005               1327              CMP.B       #five,D2            ; Check for a word
00001B48  6700 0064               1328              BEQ         opORW               ; Word in opmode
00001B4C  B43C 0006               1329              CMP.B       #six,D2             ; Check for a long
00001B50  6700 00B6               1330              BEQ         opORL               ; Long in opmode
00001B54                          1331              
00001B54                          1332  opORB                                       ; Byte determined, find operands from here
00001B54  43F9 00003D77           1333              LEA         dispByte,A1         ; Display our byte info
00001B5A  103C 000E               1334              MOVE.B      #14,D0              ; Trap #14 for our IO
00001B5E  4E4F                    1335              TRAP        #15                 ; Halt for IO
00001B60                          1336              
00001B60  43F9 00003CDD           1337              LEA         space, A1           ; Display space
00001B66  103C 000E               1338              MOVE.B      #14, D0             ; command for trap call to display message
00001B6A  4E4F                    1339              TRAP        #15                 ; trap call
00001B6C                          1340              
00001B6C                          1341  
00001B6C  1401                    1342              MOVE.B      D1,D2               ; Load D2 again with the byte in D1
00001B6E  E642                    1343              ASR         #3,D2               ; Shift by 3 for finding 1 operand
00001B70  C47C 0007               1344              AND         #$07,D2             ; AND by 7 to remove extras
00001B74  1601                    1345              MOVE.B      D1,D3               ; Load D3 with more necessary EA info
00001B76  C67C 0007               1346              AND         #$07,D3             ; AND by 7 to remove extra bits
00001B7A  4EB9 00002F00           1347              JSR         printEA             ; Determines the "left" operand register
00001B80                          1348              
00001B80  43F9 00003CE4           1349              LEA         comma, A1           ; Display space
00001B86  103C 000E               1350              MOVE.B      #14, D0             ; command for trap call to display message
00001B8A  4E4F                    1351              TRAP        #15                 ; trap call
00001B8C                          1352              
00001B8C  4242                    1353              CLR         D2                  ; Clear D2 for use
00001B8E  3601                    1354              MOVE.W      D1,D3               ; Move our word into D3 for EA use
00001B90  E043                    1355              ASR         #eight,D3           ; Shift by 8 to isolate EA info
00001B92  E243                    1356              ASR         #one,D3             ; We need additional shift, so total shifts is by 9
00001B94  C67C 0007               1357              AND         #$07,D3             ; AND to remove extra data
00001B98  4EB9 00002F00           1358              JSR         printEA             ; Redirect to EA subroutine to find EA operand info
00001B9E                          1359              
00001B9E  43F9 00003CD9           1360              LEA         newLine,A1          ; Prime a new line for the next instruction
00001BA4  103C 000E               1361              MOVE.B      #14,D0              ; Send it to the console
00001BA8  4E4F                    1362              TRAP        #15                 ; IO halt here
00001BAA                          1363              
00001BAA  6000 F494               1364              BRA         LOOP                ; Return to control loop to find additional instructions
00001BAE                          1365              
00001BAE                          1366              
00001BAE                          1367  opORW                                       ; Word opmode has been found
00001BAE  43F9 00003D7A           1368              LEA         dispWord,A1         ; Display our word info
00001BB4  103C 000E               1369              MOVE.B      #14,D0              ; Trap #14 for our IO
00001BB8  4E4F                    1370              TRAP        #15                 ; Halt for IO
00001BBA                          1371              
00001BBA  43F9 00003CDD           1372              LEA         space, A1           ; Display space
00001BC0  103C 000E               1373              MOVE.B      #14, D0             ; command for trap call to display message
00001BC4  4E4F                    1374              TRAP        #15                 ; trap call
00001BC6                          1375              
00001BC6                          1376  
00001BC6  1401                    1377              MOVE.B      D1,D2               ; Load D2 again with the byte in D1
00001BC8  E642                    1378              ASR         #3,D2               ; Shift by 3 for finding 1 operand
00001BCA  C47C 0007               1379              AND         #$07,D2             ; AND by 7 to remove extras
00001BCE  1601                    1380              MOVE.B      D1,D3               ; Load D3 with more necessary EA info
00001BD0  C67C 0007               1381              AND         #$07,D3             ; AND by 7 to remove extra bits
00001BD4  4EB9 00002F00           1382              JSR         printEA             ; Determines the "left" operand register
00001BDA                          1383              
00001BDA  43F9 00003CE4           1384              LEA         comma, A1           ; Display space
00001BE0  103C 000E               1385              MOVE.B      #14, D0             ; command for trap call to display message
00001BE4  4E4F                    1386              TRAP        #15                 ; trap call
00001BE6                          1387              
00001BE6  4242                    1388              CLR         D2                  ; Clear D2 for use
00001BE8  3601                    1389              MOVE.W      D1,D3               ; Move our word into D3 for EA use
00001BEA  E043                    1390              ASR         #eight,D3           ; Shift by 8 to isolate EA info
00001BEC  E243                    1391              ASR         #one,D3             ; We need additional shift, so total shifts is by 9
00001BEE  C67C 0007               1392              AND         #$07,D3             ; AND to remove extra data
00001BF2  4EB9 00002F00           1393              JSR         printEA             ; Redirect to EA subroutine to find EA operand info
00001BF8                          1394              
00001BF8  43F9 00003CD9           1395              LEA         newLine,A1          ; Prime a new line for the next instruction
00001BFE  103C 000E               1396              MOVE.B      #14,D0              ; Send it to the console
00001C02  4E4F                    1397              TRAP        #15                 ; IO halt here
00001C04                          1398              
00001C04  6000 F43A               1399              BRA         LOOP                ; Return to control loop to find additional instructions
00001C08                          1400              
00001C08                          1401  opORL                                       ; Long value has been found for OR
00001C08  43F9 00003D7D           1402              LEA         dispLong,A1         ; Display our long info
00001C0E  103C 000E               1403              MOVE.B      #14,D0              ; Trap #14 for our IO
00001C12  4E4F                    1404              TRAP        #15                 ; Halt for IO
00001C14                          1405              
00001C14  43F9 00003CDD           1406              LEA         space, A1           ; Display space
00001C1A  103C 000E               1407              MOVE.B      #14, D0             ; command for trap call to display message
00001C1E  4E4F                    1408              TRAP        #15                 ; trap call
00001C20                          1409              
00001C20                          1410  
00001C20  1401                    1411              MOVE.B      D1,D2               ; Load D2 again with the byte in D1
00001C22  E642                    1412              ASR         #3,D2               ; Shift by 3 for finding 1 operand
00001C24  C47C 0007               1413              AND         #$07,D2             ; AND by 7 to remove extras
00001C28  1601                    1414              MOVE.B      D1,D3               ; Load D3 with more necessary EA info
00001C2A  C67C 0007               1415              AND         #$07,D3             ; AND by 7 to remove extra bits
00001C2E  4EB9 00002F00           1416              JSR         printEA             ; Determines the "left" operand register
00001C34                          1417              
00001C34  43F9 00003CE4           1418              LEA         comma, A1           ; Display space
00001C3A  103C 000E               1419              MOVE.B      #14, D0             ; command for trap call to display message
00001C3E  4E4F                    1420              TRAP        #15                 ; trap call
00001C40                          1421              
00001C40  4242                    1422              CLR         D2                  ; Clear D2 for use
00001C42  3601                    1423              MOVE.W      D1,D3               ; Move our word into D3 for EA use
00001C44  E043                    1424              ASR         #eight,D3           ; Shift by 8 to isolate EA info
00001C46  E243                    1425              ASR         #one,D3             ; We need additional shift, so total shifts is by 9
00001C48  C67C 0007               1426              AND         #$07,D3             ; AND to remove extra data
00001C4C  4EB9 00002F00           1427              JSR         printEA             ; Redirect to EA subroutine to find EA operand info
00001C52                          1428              
00001C52  43F9 00003CD9           1429              LEA         newLine,A1          ; Prime a new line for the next instruction
00001C58  103C 000E               1430              MOVE.B      #14,D0              ; Send it to the console
00001C5C  4E4F                    1431              TRAP        #15                 ; IO halt here
00001C5E                          1432              
00001C5E  6000 F3E0               1433              BRA         LOOP                ; Return to control loop to find additional instructions
00001C62                          1434              
00001C62                          1435  ***********************************************************************************************************
00001C62                          1436  *
00001C62                          1437  *                   DIVS OPCODE
00001C62                          1438  *
00001C62                          1439  *       This section is dedicate to the DIVS instruction, which is determined by a 8 in the first nibble
00001C62                          1440  *       and a 7 in the second nibble of the instruction.
00001C62                          1441  *       DIVSL is not supported, so the following code only accounts for the case of DIVS, which is short
00001C62                          1442  *       instead of a long
00001C62                          1443  *
00001C62                          1444  ***********************************************************************************************************
00001C62                          1445  
00001C62                          1446  opDIVS                                      ; Second nibble determined that the instruction was DIVS
00001C62  43F9 00003D36           1447              LEA         DIVSmatch,A1        ; Load DIVS into A1 for output console
00001C68  103C 000E               1448              MOVE.B      #14,D0              ; Get trap task #14 for IO
00001C6C  4E4F                    1449              TRAP        #15                 ; Trap call to halt
00001C6E                          1450              
00001C6E  43F9 00003CDD           1451              LEA         space, A1           ; Display space
00001C74  103C 000E               1452              MOVE.B      #14, D0             ; command for trap call to display message
00001C78  4E4F                    1453              TRAP        #15                 ; trap to halt
00001C7A                          1454              
00001C7A  1401                    1455              MOVE.B      D1,D2               ; Move our byte from D1 to D2 to manipulate
00001C7C  E642                    1456              ASR         #3,D2               ; Shift by 3 to find register
00001C7E  C47C 0007               1457              AND         #$07,D2             ; AND by 7 to clear unnecessary bits
00001C82  1601                    1458              MOVE.B      D1,D3               ; Load the byte into D3 for EA comparison
00001C84  C67C 0007               1459              AND         #$07,D3             ; AND by 7 to clear unnecessary bits
00001C88  4EB9 00002F00           1460              JSR         printEA             ; Call our EA subroutine to obtain EA bits from instruction
00001C8E                          1461              
00001C8E  43F9 00003CE4           1462              LEA         comma, A1           ; Display space
00001C94  103C 000E               1463              MOVE.B      #14, D0             ; command for trap call to display message
00001C98  4E4F                    1464              TRAP        #15                 ; trap to halt call
00001C9A                          1465              
00001C9A  4242                    1466              CLR         D2                  ; Clear old data from D2 to avoid errors
00001C9C  3601                    1467              MOVE.W      D1,D3               ; Move word into D3 for EA subroutine
00001C9E  E043                    1468              ASR         #eight,D3           ; Shift by 8 to find to find the remaining EA components
00001CA0  E243                    1469              ASR         #one,D3             ; Additional shift by 1 to get proper bits
00001CA2  C67C 0007               1470              AND         #$07,D3             ; AND to clear unwanted bits
00001CA6  4EB9 00002F00           1471              JSR         printEA             ; Obtain other operand info
00001CAC                          1472              
00001CAC  43F9 00003CD9           1473              LEA         newLine,A1          ; Prepare new line for next instruction
00001CB2  103C 000E               1474              MOVE.B      #14,D0              ; Utilize trap task 14
00001CB6  4E4F                    1475              TRAP        #15                 ; Halt for IO
00001CB8                          1476              
00001CB8  6000 F386               1477              BRA         LOOP                ; Return to control loop
00001CBC                          1478              
00001CBC                          1479  **********************************************************************************************************
00001CBC                          1480  *
00001CBC                          1481  *                   EOR OPCODE
00001CBC                          1482  *
00001CBC                          1483  *       This sectioon is dedicated to the EOR opcode. We determine this with an 11 in the first nibble, and
00001CBC                          1484  *       a value higher than 3 in the second nibble.
00001CBC                          1485  *       The opmode fields is used to differ this instruction from CMP.
00001CBC                          1486  *       Dissassembly acquires opmode field info, which is similar to size, and to different EA related
00001CBC                          1487  *       operands.
00001CBC                          1488  *
00001CBC                          1489  ***********************************************************************************************************
00001CBC                          1490  
00001CBC                          1491  opEOR                                       ; We found EOR, begin disassembly
00001CBC  43F9 00003D42           1492              LEA         EORmatch,A1         ; Load A1 with our EOR output
00001CC2  103C 000E               1493              MOVE.B      #14,D0              ; Prime trap task #14
00001CC6  4E4F                    1494              TRAP        #15                 ; Halt for IO
00001CC8                          1495              
00001CC8  4242                    1496              CLR         D2                  ; Clear D2 for use again
00001CCA                          1497              
00001CCA  1401                    1498              MOVE.B      D1,D2               ; Move byte used in D1 to D2 for opmode check
00001CCC  EE42                    1499              ASR         #seven,D2           ; Move bits 7 places over to find opmode
00001CCE  C47C 0007               1500              AND         #$07,D2             ; AND by 7 to clear extra bits
00001CD2  B43C 0005               1501              CMP.B       #five,D2            ; Check for a byte in opmode
00001CD6  6D00 0012               1502              BLT         opEORB              ; Byte in opmode
00001CDA  B43C 0005               1503              CMP.B       #five,D2            ; Check for a word in opmode
00001CDE  6700 006A               1504              BEQ         opEORW              ; Word in opmode
00001CE2  B43C 0005               1505              CMP.B       #five,D2            ; Check for a long in opmode
00001CE6  6E00 00C2               1506              BGT         opEORL              ; Long in opmode
00001CEA                          1507              
00001CEA                          1508  opEORB                                      ; Determine instruction is a byte operation
00001CEA  43F9 00003D77           1509              LEA         dispByte,A1         ; Send out the byte info for the instruction
00001CF0  103C 000E               1510              MOVE.B      #14,D0              ; Utilize trap task 14
00001CF4  4E4F                    1511              TRAP        #15                 ; Halt for IO
00001CF6                          1512              
00001CF6  43F9 00003CDD           1513              LEA         space, A1           ; Display space
00001CFC  103C 000E               1514              MOVE.B      #14, D0             ; command for trap call to display message
00001D00  4E4F                    1515              TRAP        #15                 ; trap call to halt
00001D02                          1516              
00001D02  4242                    1517              CLR         D2                  ; Clear D2 again for use
00001D04  4243                    1518              CLR         D3                  ; Remove anything from D3
00001D06  3601                    1519              MOVE.W      D1,D3               ; Move word to D3 to find an operand
00001D08  E043                    1520              ASR         #eight,D3           ; Shift by eight to ensure correct portion of instruction
00001D0A  E243                    1521              ASR         #one,D3             ; Needs to be shifted by an additional 1
00001D0C  C67C 0007               1522              AND         #$07,D3             ; Clear extra bits 
00001D10  4EB9 00002F00           1523              JSR         printEA             ; Use EA subroutine to print operand
00001D16                          1524              
00001D16  43F9 00003CE4           1525              LEA         comma, A1           ; Display space
00001D1C  103C 000E               1526              MOVE.B      #14, D0             ; command for trap call to display message
00001D20  4E4F                    1527              TRAP        #15                 ; trap call
00001D22                          1528              
00001D22  4242                    1529              CLR         D2                  ; Clear D2 again
00001D24  4243                    1530              CLR         D3                  ; Clear D3 again
00001D26  1401                    1531              MOVE.B      D1,D2               ; Move the byte value in D1 to D2 for EA use
00001D28  E642                    1532              ASR         #three,D2           ; Shift by 3 to find EA info
00001D2A  C47C 0007               1533              AND         #seven,D2           ; AND by 7 to remove extra bits
00001D2E  1601                    1534              MOVE.B      D1,D3               ; Move byte value from D1 into D3
00001D30  C67C 0007               1535              AND         #$07,D3             ; AND by 7 for EA subroutine
00001D34  4EB9 00002F00           1536              JSR         printEA             ; Determines remained operand EA info to print
00001D3A                          1537              
00001D3A  43F9 00003CD9           1538              LEA         newLine,A1          ; Print new line for next instruction
00001D40  103C 000E               1539              MOVE.B      #14,D0              ; Use trap 14 to output to console
00001D44  4E4F                    1540              TRAP        #15                 ; Halt for IO
00001D46                          1541              
00001D46  6000 F2F8               1542              BRA         LOOP                ; Return to control loop
00001D4A                          1543               
00001D4A                          1544  opEORW                                      ; Word opmode has been determined
00001D4A  43F9 00003D7A           1545              LEA         dispWord,A1         ; Send out the word info for the instruction
00001D50  103C 000E               1546              MOVE.B      #14,D0              ; Utilize trap task 14
00001D54  4E4F                    1547              TRAP        #15                 ; Halt for IO
00001D56                          1548              
00001D56  43F9 00003CDD           1549              LEA         space, A1           ; Display space
00001D5C  103C 000E               1550              MOVE.B      #14, D0             ; command for trap call to display message
00001D60  4E4F                    1551              TRAP        #15                 ; trap call to halt
00001D62                          1552              
00001D62  4242                    1553              CLR         D2                  ; Clear D2 again for use
00001D64  4243                    1554              CLR         D3                  ; Remove anything from D3
00001D66  3601                    1555              MOVE.W      D1,D3               ; Move word to D3 to find an operand
00001D68  E043                    1556              ASR         #eight,D3           ; Shift by eight to ensure correct portion of instruction
00001D6A  E243                    1557              ASR         #one,D3             ; Needs to be shifted by an additional 1
00001D6C  C67C 0007               1558              AND         #$07,D3             ; Clear extra bits 
00001D70  4EB9 00002F00           1559              JSR         printEA             ; Use EA subroutine to print operand
00001D76                          1560              
00001D76  43F9 00003CE4           1561              LEA         comma, A1           ; Display space
00001D7C  103C 000E               1562              MOVE.B      #14, D0             ; command for trap call to display message
00001D80  4E4F                    1563              TRAP        #15                 ; trap call
00001D82                          1564              
00001D82  4242                    1565              CLR         D2                  ; Clear D2 again
00001D84  4243                    1566              CLR         D3                  ; Clear D3 again
00001D86  1401                    1567              MOVE.B      D1,D2               ; Move the byte value in D1 to D2 for EA use
00001D88  E642                    1568              ASR         #three,D2           ; Shift by 3 to find EA info
00001D8A  C47C 0007               1569              AND         #seven,D2           ; AND by 7 to remove extra bits
00001D8E  1601                    1570              MOVE.B      D1,D3               ; Move byte value from D1 into D3
00001D90  C67C 0007               1571              AND         #$07,D3             ; AND by 7 for EA subroutine
00001D94  4EB9 00002F00           1572              JSR         printEA             ; Determines remained operand EA info to print
00001D9A                          1573              
00001D9A  43F9 00003CD9           1574              LEA         newLine,A1          ; Print new line for next instruction
00001DA0  103C 000E               1575              MOVE.B      #14,D0              ; Use trap 14 to output to console
00001DA4  4E4F                    1576              TRAP        #15                 ; Halt for IO
00001DA6                          1577              
00001DA6  6000 F298               1578              BRA         LOOP                ; Return to control loop
00001DAA                          1579              
00001DAA                          1580  opEORL                                      ; Long has been determined
00001DAA  43F9 00003D7D           1581              LEA         dispLong,A1         ; Send out the long word info for the instruction
00001DB0  103C 000E               1582              MOVE.B      #14,D0              ; Utilize trap task 14
00001DB4  4E4F                    1583              TRAP        #15                 ; Halt for IO
00001DB6                          1584              
00001DB6  43F9 00003CDD           1585              LEA         space, A1           ; Display space
00001DBC  103C 000E               1586              MOVE.B      #14, D0             ; command for trap call to display message
00001DC0  4E4F                    1587              TRAP        #15                 ; trap call to halt
00001DC2                          1588              
00001DC2  4242                    1589              CLR         D2                  ; Clear D2 again for use
00001DC4  4243                    1590              CLR         D3                  ; Remove anything from D3
00001DC6  3601                    1591              MOVE.W      D1,D3               ; Move word to D3 to find an operand
00001DC8  E043                    1592              ASR         #eight,D3           ; Shift by eight to ensure correct portion of instruction
00001DCA  E243                    1593              ASR         #one,D3             ; Needs to be shifted by an additional 1
00001DCC  C67C 0007               1594              AND         #$07,D3             ; Clear extra bits 
00001DD0  4EB9 00002F00           1595              JSR         printEA             ; Use EA subroutine to print operand
00001DD6                          1596              
00001DD6  43F9 00003CE4           1597              LEA         comma, A1           ; Display space
00001DDC  103C 000E               1598              MOVE.B      #14, D0             ; command for trap call to display message
00001DE0  4E4F                    1599              TRAP        #15                 ; trap call
00001DE2                          1600              
00001DE2  4242                    1601              CLR         D2                  ; Clear D2 again
00001DE4  4243                    1602              CLR         D3                  ; Clear D3 again
00001DE6  1401                    1603              MOVE.B      D1,D2               ; Move the byte value in D1 to D2 for EA use
00001DE8  E642                    1604              ASR         #three,D2           ; Shift by 3 to find EA info
00001DEA  C47C 0007               1605              AND         #seven,D2           ; AND by 7 to remove extra bits
00001DEE  1601                    1606              MOVE.B      D1,D3               ; Move byte value from D1 into D3
00001DF0  C67C 0007               1607              AND         #$07,D3             ; AND by 7 for EA subroutine
00001DF4  4EB9 00002F00           1608              JSR         printEA             ; Determines remained operand EA info to print
00001DFA                          1609              
00001DFA  43F9 00003CD9           1610              LEA         newLine,A1          ; Print new line for next instruction
00001E00  103C 000E               1611              MOVE.B      #14,D0              ; Use trap 14 to output to console
00001E04  4E4F                    1612              TRAP        #15                 ; Halt for IO
00001E06                          1613              
00001E06  6000 F238               1614              BRA         LOOP                ; Return to the control loop
00001E0A                          1615  
00001E0A                          1616  ***********************************************************************************************************
00001E0A                          1617  *
00001E0A                          1618  *                   CMP OPCODE
00001E0A                          1619  *
00001E0A                          1620  *       This section is dedicated to the compare (CMP) instruction. Its determined in the control loop
00001E0A                          1621  *       that the first nibble is 11 for CMP, and the second nibble is 3.
00001E0A                          1622  *       The type of CMP, or the opmode, is used to determined what we output to our console next.
00001E0A                          1623  *       From that point, we load the correct size/opmode, and then route to the EA subroutine to output
00001E0A                          1624  *       EA related register information.
00001E0A                          1625  *       The process for finding the operand register info (EA info) is similar for all opmodes.
00001E0A                          1626  *
00001E0A                          1627  ***********************************************************************************************************
00001E0A                          1628  
00001E0A                          1629  opCMP       
00001E0A  43F9 00003D46           1630              LEA         CMPmatch,A1         ; We determined that the opcode is CMP, output to console
00001E10  103C 000E               1631              MOVE.B      #14,D0              ; Getting trap task #14 ready
00001E14  4E4F                    1632              TRAP        #15                 ; Trap 15 call for IO
00001E16                          1633              
00001E16  4242                    1634              CLR         D2                  ; D2 should be cleared for use later
00001E18                          1635              
00001E18  1401                    1636              MOVE.B      D1,D2               ; Get the next byte to manipulate
00001E1A  EC42                    1637              ASR         #six,D2             ; Move bits 7 places over to find opmode
00001E1C  C47C 0007               1638              AND         #$07,D2             ; AND by 7 allows us to compare properly on which opmode we need
00001E20  B43C 0000               1639              CMP.B       #zero,D2            ; Compare to zero to see if we have a byte
00001E24  6700 0016               1640              BEQ         opCMPB              ; Byte in opmode
00001E28  B43C 0001               1641              CMP.B       #one,D2             ; Compare to one to see if we have a word
00001E2C  6700 0068               1642              BEQ         opCMPW              ; Word in opmode
00001E30  B43C 0002               1643              CMP.B       #two,D2             ; Compare to two to see if we have a long
00001E34  6700 00BA               1644              BEQ         opCMPL              ; Long in opmode
00001E38                          1645              
00001E38  6000 1E34               1646              BRA         printInvalid        ; Incorrect input
00001E3C                          1647  
00001E3C                          1648  opCMPB                                      ; Known we have CMP.B, find and output operands
00001E3C  43F9 00003D77           1649              LEA         dispByte,A1         ; Output the byte component of the instruction
00001E42  103C 000E               1650              MOVE.B      #14,D0              ; Trap task #14 for console out
00001E46  4E4F                    1651              TRAP        #15                 ; Halt for console out
00001E48                          1652              
00001E48  43F9 00003CDD           1653              LEA         space, A1           ; Display space for operands
00001E4E  103C 000E               1654              MOVE.B      #14, D0             ; command for trap call to display message
00001E52  4E4F                    1655              TRAP        #15                 ; Console out/halt
00001E54                          1656              
00001E54  1401                    1657              MOVE.B      D1,D2               ; Move the byte for manipulation to D2
00001E56  E642                    1658              ASR         #3,D2               ; Shift right by 3 to find left operand register
00001E58  C47C 0007               1659              AND         #$07,D2             ; AND for comparison later
00001E5C  1601                    1660              MOVE.B      D1,D3               ; Move the byte to D3 for use in our EA subroutine
00001E5E  C67C 0007               1661              AND         #$07,D3             ; AND for comparison in subroutine
00001E62  4EB9 00002F00           1662              JSR         printEA             ; Use our EA subroutine to determine the left operand register
00001E68                          1663              
00001E68  43F9 00003CE4           1664              LEA         comma, A1           ; Display space
00001E6E  103C 000E               1665              MOVE.B      #14, D0             ; command for trap call to display message
00001E72  4E4F                    1666              TRAP        #15                 ; trap call
00001E74                          1667              
00001E74  4242                    1668              CLR         D2                  ; D2 needs to be cleared for use later
00001E76  3601                    1669              MOVE.W      D1,D3               ; Move the entire word in D3 for shifting
00001E78  E043                    1670              ASR         #eight,D3           ; Shift right by 8 to get EA bits from instruction
00001E7A  E243                    1671              ASR         #one,D3             ; Shift right once more to move the bits all the way
00001E7C  C67C 0007               1672              AND         #$07,D3             ; AND by 7 to clear unnecessary bits
00001E80  4EB9 00002F00           1673              JSR         printEA             ; EA subroutine call to get remaining operand sent to the console
00001E86                          1674              
00001E86  43F9 00003CD9           1675              LEA         newLine,A1          ; Prime A1 with our new line to output
00001E8C  103C 000E               1676              MOVE.B      #14,D0              ; Prime new line for next instruction
00001E90  4E4F                    1677              TRAP        #15                 ; Halt for IO
00001E92                          1678              
00001E92  6000 F1AC               1679              BRA         LOOP                ; Return to control loop for next disassembly
00001E96                          1680              
00001E96                          1681  opCMPW                                      ; Known we have CMP.W, find and output operands
00001E96  43F9 00003D7A           1682              LEA         dispWord,A1         ; Output the byte component of the instruction
00001E9C  103C 000E               1683              MOVE.B      #14,D0              ; Trap task #14 for console out
00001EA0  4E4F                    1684              TRAP        #15                 ; Halt for console out
00001EA2                          1685              
00001EA2  43F9 00003CDD           1686              LEA         space, A1           ; Display space for operands
00001EA8  103C 000E               1687              MOVE.B      #14, D0             ; command for trap call to display message
00001EAC  4E4F                    1688              TRAP        #15                 ; Console out/halt
00001EAE                          1689              
00001EAE  1401                    1690              MOVE.B      D1,D2               ; Move the byte for manipulation to D2
00001EB0  E642                    1691              ASR         #3,D2               ; Shift right by 3 to find left operand register
00001EB2  C47C 0007               1692              AND         #$07,D2             ; AND for comparison later
00001EB6  1601                    1693              MOVE.B      D1,D3               ; Move the byte to D3 for use in our EA subroutine
00001EB8  C67C 0007               1694              AND         #$07,D3             ; AND for comparison in subroutine
00001EBC  4EB9 00002F00           1695              JSR         printEA             ; Use our EA subroutine to determine the left operand register
00001EC2                          1696              
00001EC2  43F9 00003CE4           1697              LEA         comma, A1           ; Display space
00001EC8  103C 000E               1698              MOVE.B      #14, D0             ; command for trap call to display message
00001ECC  4E4F                    1699              TRAP        #15                 ; trap call
00001ECE                          1700              
00001ECE  4242                    1701              CLR         D2                  ; D2 needs to be cleared for use later
00001ED0  3601                    1702              MOVE.W      D1,D3               ; Move the entire word in D3 for shifting
00001ED2  E043                    1703              ASR         #eight,D3           ; Shift right by 8 to get EA bits from instruction
00001ED4  E243                    1704              ASR         #one,D3             ; Shift right once more to move the bits all the way
00001ED6  C67C 0007               1705              AND         #$07,D3             ; AND by 7 to clear unnecessary bits
00001EDA  4EB9 00002F00           1706              JSR         printEA             ; EA subroutine call to get remaining operand sent to the console
00001EE0                          1707              
00001EE0  43F9 00003CD9           1708              LEA         newLine,A1          ; Prime A1 with our new line to output
00001EE6  103C 000E               1709              MOVE.B      #14,D0              ; Prime new line for next instruction
00001EEA  4E4F                    1710              TRAP        #15                 ; Halt for IO
00001EEC                          1711              
00001EEC  6000 F152               1712              BRA         LOOP                ; Return to control loop for next disassembly
00001EF0                          1713  
00001EF0                          1714  opCMPL                                      ; Known we have CMP.L, find and output operands
00001EF0  43F9 00003D7D           1715              LEA         dispLong,A1         ; Output the byte component of the instruction
00001EF6  103C 000E               1716              MOVE.B      #14,D0              ; Trap task #14 for console out
00001EFA  4E4F                    1717              TRAP        #15                 ; Halt for console out
00001EFC                          1718              
00001EFC  43F9 00003CDD           1719              LEA         space, A1           ; Display space for operands
00001F02  103C 000E               1720              MOVE.B      #14, D0             ; command for trap call to display message
00001F06  4E4F                    1721              TRAP        #15                 ; Console out/halt
00001F08                          1722              
00001F08  1401                    1723              MOVE.B      D1,D2               ; Move the byte for manipulation to D2
00001F0A  E642                    1724              ASR         #3,D2               ; Shift right by 3 to find left operand register
00001F0C  C47C 0007               1725              AND         #$07,D2             ; AND for comparison later
00001F10  1601                    1726              MOVE.B      D1,D3               ; Move the byte to D3 for use in our EA subroutine
00001F12  C67C 0007               1727              AND         #$07,D3             ; AND for comparison in subroutine
00001F16  4EB9 00002F00           1728              JSR         printEA             ; Use our EA subroutine to determine the left operand register
00001F1C                          1729              
00001F1C  43F9 00003CE4           1730              LEA         comma, A1           ; Display space
00001F22  103C 000E               1731              MOVE.B      #14, D0             ; command for trap call to display message
00001F26  4E4F                    1732              TRAP        #15                 ; trap call
00001F28                          1733              
00001F28  4242                    1734              CLR         D2                  ; D2 needs to be cleared for use later
00001F2A  3601                    1735              MOVE.W      D1,D3               ; Move the entire word in D3 for shifting
00001F2C  E043                    1736              ASR         #eight,D3           ; Shift right by 8 to get EA bits from instruction
00001F2E  E243                    1737              ASR         #one,D3             ; Shift right once more to move the bits all the way
00001F30  C67C 0007               1738              AND         #$07,D3             ; AND by 7 to clear unnecessary bits
00001F34  4EB9 00002F00           1739              JSR         printEA             ; EA subroutine call to get remaining operand sent to the console
00001F3A                          1740              
00001F3A  43F9 00003CD9           1741              LEA         newLine,A1          ; Prime A1 with our new line to output
00001F40  103C 000E               1742              MOVE.B      #14,D0              ; Prime new line for next instruction
00001F44  4E4F                    1743              TRAP        #15                 ; Halt for IO
00001F46                          1744              
00001F46  6000 F0F8               1745              BRA         LOOP                ; Return to control loop for next disassembly
00001F4A                          1746  
00001F4A                          1747  ***********************************************************************************************************
00001F4A                          1748  *
00001F4A                          1749  *                   SUB OPCODE
00001F4A                          1750  *
00001F4A                          1751  *       This section is dedicated to disassembling the SUB opcode. We assume that the first nibble being 9
00001F4A                          1752  *       leads us to the SUB opcode.
00001F4A                          1753  *       SUB is differed by a operand direction, that being Dn - EA or EA - Dn.
00001F4A                          1754  *       These directions are deteremined as an opmode, and doubles up for each byte, long, and word mode.
00001F4A                          1755  *
00001F4A                          1756  ***********************************************************************************************************
00001F4A                          1757  
00001F4A                          1758  opSUB                                       ; We assume we found SUB, begin SUB disassemble
00001F4A  43F9 00003D3E           1759              LEA         SUBmatch, A1        ; Load A1 to print SUB found message
00001F50  103C 000E               1760              MOVE.B      #14, D0             ; command for trap call to display message
00001F54  4E4F                    1761              TRAP        #15                 ; trap call to halt
00001F56                          1762          
00001F56                          1763          
00001F56  E141                    1764              ASL         #eight,D1           ; Shift D1 to by 8 to find opmode
00001F58  1218                    1765              MOVE.B      (A0)+,D1            ; Reload instruction
00001F5A  4242                    1766              CLR         D2                  ; Ensure D2 is clear
00001F5C                          1767              
00001F5C  3401                    1768              MOVE.W      D1,D2               ; Load our word into D2 to manipulate
00001F5E  EC42                    1769              ASR         #six,D2             ; Move bits 7 places over to find opmode
00001F60  C47C 0007               1770              AND         #seven,D2           ; AND by 7 to remove extra bits
00001F64                          1771              
00001F64                          1772              ; These are for Dn - EA
00001F64  B43C 0000               1773              CMP.B       #zero,D2            ; Check for byte
00001F68  6700 002A               1774              BEQ         opSUBB              ; Byte in opmode
00001F6C  B43C 0001               1775              CMP.B       #one,D2             ; Check for word
00001F70  6700 007C               1776              BEQ         opSUBW              ; Word in opmode
00001F74  B43C 0002               1777              CMP.B       #two,D2             ; Check for long
00001F78  6700 00CE               1778              BEQ         opSUBL              ; Long in opmode
00001F7C                          1779              
00001F7C                          1780              ; These are for EA - Dn
00001F7C  B43C 0004               1781              CMP.B       #four,D2            ; Check for byte
00001F80  6700 0012               1782              BEQ         opSUBB              ; Byte in opmode
00001F84  B43C 0005               1783              CMP.B       #five,D2            ; Check for word
00001F88  6700 0064               1784              BEQ         opSUBW              ; Word in opmode
00001F8C  B43C 0006               1785              CMP.B       #six,D2             ; Check for long
00001F90  6700 00B6               1786              BEQ         opSUBL              ; Long in opmode
00001F94                          1787              
00001F94                          1788  opSUBB                                      ; Byte has been found, find operands
00001F94  43F9 00003D77           1789              LEA         dispByte,A1         ; Output the byte info to the console
00001F9A  103C 000E               1790              MOVE.B      #14,D0              ; Use trap task 14 for IO
00001F9E  4E4F                    1791              TRAP        #15                 ; Halt for IO
00001FA0                          1792              
00001FA0  43F9 00003CDD           1793              LEA         space, A1           ; Display space
00001FA6  103C 000E               1794              MOVE.B      #14, D0             ; command for trap call to display message
00001FAA  4E4F                    1795              TRAP        #15                 ; trap call         
00001FAC                          1796              
00001FAC  1401                    1797              MOVE.B      D1,D2               ; Load D2 with our D1 byte
00001FAE  E642                    1798              ASR         #3,D2               ; Shift by 3 to find an operand
00001FB0  C47C 0007               1799              AND         #$07,D2             ; AND by 7 to remove extra bits
00001FB4  3601                    1800              MOVE.W      D1,D3               ; Load D3 with our word in D1
00001FB6  C67C 0007               1801              AND         #$07,D3             ; AND by 7 to remove extra bits
00001FBA  4EB9 00002F00           1802              JSR         printEA             ; Use EA subroutine to find an operand
00001FC0                          1803              
00001FC0  43F9 00003CE4           1804              LEA         comma, A1           ; Display space
00001FC6  103C 000E               1805              MOVE.B      #14, D0             ; command for trap call to display message
00001FCA  4E4F                    1806              TRAP        #15                 ; trap call
00001FCC                          1807              
00001FCC  4242                    1808              CLR         D2                  ; Empty D2 for use again
00001FCE  3601                    1809              MOVE.W      D1,D3               ; Load the word again into D3
00001FD0  E043                    1810              ASR         #eight,D3           ; Shift by 8 to find other operand
00001FD2  E243                    1811              ASR         #one,D3             ; Requires an additional shift
00001FD4  C67C 0007               1812              AND         #$07,D3             ; AND by 7 to remove extra bits
00001FD8  4EB9 00002F00           1813              JSR         printEA             ; EA subroutine finds our remaining operand
00001FDE                          1814              
00001FDE  43F9 00003CD9           1815              LEA         newLine,A1          ; Ready console with newline
00001FE4  103C 000E               1816              MOVE.B      #14,D0              ; Trap 14 for output
00001FE8  4E4F                    1817              TRAP        #15                 ; Halt for IO
00001FEA                          1818              
00001FEA  6000 F054               1819              BRA         LOOP                ; Return to control loop
00001FEE                          1820              
00001FEE                          1821  opSUBW                                      ; Word has been found, find operands
00001FEE  43F9 00003D7A           1822              LEA         dispWord,A1         ; Output the word info to the console
00001FF4  103C 000E               1823              MOVE.B      #14,D0              ; Use trap task 14 for IO
00001FF8  4E4F                    1824              TRAP        #15                 ; Halt for IO
00001FFA                          1825              
00001FFA  43F9 00003CDD           1826              LEA         space, A1           ; Display space
00002000  103C 000E               1827              MOVE.B      #14, D0             ; command for trap call to display message
00002004  4E4F                    1828              TRAP        #15                 ; trap call         
00002006                          1829              
00002006  1401                    1830              MOVE.B      D1,D2               ; Load D2 with our D1 byte
00002008  E642                    1831              ASR         #3,D2               ; Shift by 3 to find an operand
0000200A  C47C 0007               1832              AND         #$07,D2             ; AND by 7 to remove extra bits
0000200E  3601                    1833              MOVE.W      D1,D3               ; Load D3 with our word in D1
00002010  C67C 0007               1834              AND         #$07,D3             ; AND by 7 to remove extra bits
00002014  4EB9 00002F00           1835              JSR         printEA             ; Use EA subroutine to find an operand
0000201A                          1836              
0000201A  43F9 00003CE4           1837              LEA         comma, A1           ; Display space
00002020  103C 000E               1838              MOVE.B      #14, D0             ; command for trap call to display message
00002024  4E4F                    1839              TRAP        #15                 ; trap call
00002026                          1840              
00002026  4242                    1841              CLR         D2                  ; Empty D2 for use again
00002028  3601                    1842              MOVE.W      D1,D3               ; Load the word again into D3
0000202A  E043                    1843              ASR         #eight,D3           ; Shift by 8 to find other operand
0000202C  E243                    1844              ASR         #one,D3             ; Requires an additional shift
0000202E  C67C 0007               1845              AND         #$07,D3             ; AND by 7 to remove extra bits
00002032  4EB9 00002F00           1846              JSR         printEA             ; EA subroutine finds our remaining operand
00002038                          1847              
00002038  43F9 00003CD9           1848              LEA         newLine,A1          ; Ready console with newline
0000203E  103C 000E               1849              MOVE.B      #14,D0              ; Trap 14 for output
00002042  4E4F                    1850              TRAP        #15                 ; Halt for IO
00002044                          1851              
00002044  6000 EFFA               1852              BRA         LOOP                ; Return to control loop
00002048                          1853              
00002048                          1854  opSUBL                                      ; Long has been found, find operands
00002048  43F9 00003D7D           1855              LEA         dispLong,A1         ; Output the long info to the console
0000204E  103C 000E               1856              MOVE.B      #14,D0              ; Use trap task 14 for IO
00002052  4E4F                    1857              TRAP        #15                 ; Halt for IO
00002054                          1858              
00002054  43F9 00003CDD           1859              LEA         space, A1           ; Display space
0000205A  103C 000E               1860              MOVE.B      #14, D0             ; command for trap call to display message
0000205E  4E4F                    1861              TRAP        #15                 ; trap call         
00002060                          1862              
00002060  1401                    1863              MOVE.B      D1,D2               ; Load D2 with our D1 byte
00002062  E642                    1864              ASR         #3,D2               ; Shift by 3 to find an operand
00002064  C47C 0007               1865              AND         #$07,D2             ; AND by 7 to remove extra bits
00002068  3601                    1866              MOVE.W      D1,D3               ; Load D3 with our word in D1
0000206A  C67C 0007               1867              AND         #$07,D3             ; AND by 7 to remove extra bits
0000206E  4EB9 00002F00           1868              JSR         printEA             ; Use EA subroutine to find an operand
00002074                          1869              
00002074  43F9 00003CE4           1870              LEA         comma, A1           ; Display space
0000207A  103C 000E               1871              MOVE.B      #14, D0             ; command for trap call to display message
0000207E  4E4F                    1872              TRAP        #15                 ; trap call
00002080                          1873              
00002080  4242                    1874              CLR         D2                  ; Empty D2 for use again
00002082  3601                    1875              MOVE.W      D1,D3               ; Load the word again into D3
00002084  E043                    1876              ASR         #eight,D3           ; Shift by 8 to find other operand
00002086  E243                    1877              ASR         #one,D3             ; Requires an additional shift
00002088  C67C 0007               1878              AND         #$07,D3             ; AND by 7 to remove extra bits
0000208C  4EB9 00002F00           1879              JSR         printEA             ; EA subroutine finds our remaining operand
00002092                          1880              
00002092  43F9 00003CD9           1881              LEA         newLine,A1          ; Ready console with newline
00002098  103C 000E               1882              MOVE.B      #14,D0              ; Trap 14 for output
0000209C  4E4F                    1883              TRAP        #15                 ; Halt for IO
0000209E                          1884              
0000209E  6000 EFA0               1885              BRA         LOOP                ; Return to control loop
000020A2                          1886              
000020A2                          1887  ***********************************************************************************************************
000020A2                          1888  *
000020A2                          1889  *                   BRA OPCODE
000020A2                          1890  *       
000020A2                          1891  *       This section is dedicated to the BRA opcode, which is determined by having six in the first
000020A2                          1892  *       nibble of the instruction, and zero in the second nibble.
000020A2                          1893  *
000020A2                          1894  ***********************************************************************************************************
000020A2                          1895              
000020A2                          1896  opBRA       
000020A2  43F9 00003D22           1897              LEA         BRAmatch, A1        ; we know that the opcode will be BRA, so load A1 to print message
000020A8  103C 000E               1898              MOVE.B      #14, D0             ; Prime trap task #14 for output
000020AC  4E4F                    1899              TRAP        #15                 ; trap call to output BRA
000020AE                          1900          
000020AE  4242                    1901              CLR         D2                  ; Data register to needs to be cleared for use again
000020B0  4243                    1902              CLR         D3                  ; Data register to needs to be cleared for use again
000020B2                          1903  
000020B2  43F9 00003CDD           1904              LEA         space,A1            ; output a space for the IO console
000020B8  103C 000E               1905              MOVE.B      #14,D0              ; Prime trap task #14 for the output
000020BC  4E4F                    1906              TRAP        #15                 ; Call trap #15 with number 14 for our IO
000020BE                          1907          
000020BE  143C 0007               1908              MOVE.B      #seven,D2           ; We know we need to move seven due to the nature of BRA in 68k
000020C2  1218                    1909              MOVE.B      (A0)+,D1            ; Move the byte we stored for use from our addr register to D1
000020C4  4EB9 00002F00           1910              JSR         printEA             ; this method handles the displacement hex values
000020CA                          1911          
000020CA  43F9 00003CD9           1912              LEA         newLine, A1         ; create new line for the IO console
000020D0  103C 000E               1913              MOVE.B      #14, D0             ; command for trap call to display message
000020D4  4E4F                    1914              TRAP        #15                 ; trap call ready console for next instruction
000020D6                          1915  
000020D6  6000 EF68               1916              BRA         LOOP                ; return back to our control loop to find next instruction
000020DA                          1917          
000020DA                          1918  ***********************************************************************************************************
000020DA                          1919  *
000020DA                          1920  *                   Bcc OPCODES
000020DA                          1921  *
000020DA                          1922  *       This section is dedicated to the conditional branching opcode. There are varying second nibble
000020DA                          1923  *       values, documented below, with the correspond cc code.
000020DA                          1924  *       BCC is similar to BRA, so we handle it in the same manner.
000020DA                          1925  *
000020DA                          1926  *       Supported cc condition codes:
000020DA                          1927  *           >Carry Clear        = CS        second nibble == 5
000020DA                          1928  *           >Overflow Set       = VC        second nibble == 8
000020DA                          1929  *           >Greater or EqualGE = GE        second nibble == 12
000020DA                          1930  *           >Less Than          = LT        second nibble == 13
000020DA                          1931  *
000020DA                          1932  ***********************************************************************************************************
000020DA                          1933  * CS Conition Code
000020DA                          1934  
000020DA                          1935  opBCS       
000020DA  43F9 00003D26           1936              LEA         BCSmatch, A1        ; we know that the opcode will be BCS, so load A1 to print message
000020E0  103C 000E               1937              MOVE.B      #14, D0             ; command for trap call to display message
000020E4  4E4F                    1938              TRAP        #15                 ; trap call
000020E6                          1939          
000020E6  4242                    1940              CLR         D2                  ; Data register to needs to be cleared for use again
000020E8  4243                    1941              CLR         D3                  ; Data register to needs to be cleared for use again
000020EA                          1942  
000020EA  43F9 00003CDD           1943              LEA         space,A1            ; output a space for the IO console
000020F0  103C 000E               1944              MOVE.B      #14,D0              ; Prime trap task #14 for the output
000020F4  4E4F                    1945              TRAP        #15                 ; Call trap #15 with number 14 for our IO
000020F6                          1946          
000020F6  143C 0007               1947              MOVE.B      #seven,D2           ; We know we need to move seven due to the nature of BRA in 68k
000020FA  1218                    1948              MOVE.B      (A0)+,D1            ; Move the byte we stored for use from our addr register to D1
000020FC  4EB9 00002F00           1949              JSR         printEA             ; this method handles the displacement hex values
00002102                          1950          
00002102  43F9 00003CD9           1951              LEA         newLine, A1         ; create new line for the IO console
00002108  103C 000E               1952              MOVE.B      #14, D0             ; command for trap call to display message
0000210C  4E4F                    1953              TRAP        #15                 ; trap call ready console for next instruction
0000210E                          1954              
0000210E  6000 EF30               1955              BRA         LOOP                ; return to the control loop for next instruction
00002112                          1956  
00002112                          1957  ***********************************************************************************************************
00002112                          1958  * VC Condition Code
00002112                          1959  
00002112                          1960  opBVC       
00002112  43F9 00003D2A           1961              LEA         BVCmatch, A1        ; we know that the opcode will be BVC, so load A1 to print message
00002118  103C 000E               1962              MOVE.B      #14, D0             ; command for trap call to display message
0000211C  4E4F                    1963              TRAP        #15                 ; trap call
0000211E                          1964          
0000211E  4242                    1965              CLR         D2                  ; Data register to needs to be cleared for use again
00002120  4243                    1966              CLR         D3                  ; Data register to needs to be cleared for use again
00002122                          1967  
00002122  43F9 00003CDD           1968              LEA         space,A1            ; output a space for the IO console
00002128  103C 000E               1969              MOVE.B      #14,D0              ; Prime trap task #14 for the output
0000212C  4E4F                    1970              TRAP        #15                 ; Call trap #15 with number 14 for our IO
0000212E                          1971          
0000212E  143C 0007               1972              MOVE.B      #seven,D2           ; We know we need to move seven due to the nature of BRA in 68k
00002132  1218                    1973              MOVE.B      (A0)+,D1            ; Move the byte we stored for use from our addr register to D1
00002134  4EB9 00002F00           1974              JSR         printEA             ; this method handles the displacement hex values
0000213A                          1975          
0000213A  43F9 00003CD9           1976              LEA         newLine, A1         ; create new line for the IO console
00002140  103C 000E               1977              MOVE.B      #14, D0             ; command for trap call to display message
00002144  4E4F                    1978              TRAP        #15                 ; trap call ready console for next instruction
00002146                          1979              
00002146  6000 EEF8               1980              BRA         LOOP                ; return to the control loop for next instruction
0000214A                          1981  
0000214A                          1982  ***********************************************************************************************************
0000214A                          1983  * GE Conidtion Code     
0000214A                          1984          
0000214A                          1985  opBGE       
0000214A  43F9 00003D2E           1986              LEA         BGEmatch, A1        ; we know that the opcode will be BGE, so load A1 to print message
00002150  103C 000E               1987              MOVE.B      #14, D0             ; command for trap call to display message
00002154  4E4F                    1988              TRAP        #15                 ; trap call
00002156                          1989          
00002156  4242                    1990              CLR         D2                  ; Data register to needs to be cleared for use again
00002158  4243                    1991              CLR         D3                  ; Data register to needs to be cleared for use again
0000215A                          1992  
0000215A  43F9 00003CDD           1993              LEA         space,A1            ; output a space for the IO console
00002160  103C 000E               1994              MOVE.B      #14,D0              ; Prime trap task #14 for the output
00002164  4E4F                    1995              TRAP        #15                 ; Call trap #15 with number 14 for our IO
00002166                          1996          
00002166  143C 0007               1997              MOVE.B      #seven,D2           ; We know we need to move seven due to the nature of BRA in 68k
0000216A  1218                    1998              MOVE.B      (A0)+,D1            ; Move the byte we stored for use from our addr register to D1
0000216C  4EB9 00002F00           1999              JSR         printEA             ; this method handles the displacement hex values
00002172                          2000          
00002172  43F9 00003CD9           2001              LEA         newLine, A1         ; create new line for the IO console
00002178  103C 000E               2002              MOVE.B      #14, D0             ; command for trap call to display message
0000217C  4E4F                    2003              TRAP        #15                 ; trap call ready console for next instruction
0000217E                          2004              
0000217E  6000 EEC0               2005              BRA         LOOP                ; return to the control loop for next instruction
00002182                          2006  
00002182                          2007  ***********************************************************************************************************
00002182                          2008  * LT Conditions Code        
00002182                          2009          
00002182                          2010  opBLT   
00002182  43F9 00003D32           2011              LEA         BLTmatch, A1        ; we know that the opcode will be BLT, so load A1 to print message
00002188  103C 000E               2012              MOVE.B      #14, D0             ; command for trap call to display message
0000218C  4E4F                    2013              TRAP        #15                 ; trap call
0000218E                          2014          
0000218E  4242                    2015              CLR         D2                  ; Data register to needs to be cleared for use again
00002190  4243                    2016              CLR         D3                  ; Data register to needs to be cleared for use again
00002192                          2017  
00002192  43F9 00003CDD           2018              LEA         space,A1            ; output a space for the IO console
00002198  103C 000E               2019              MOVE.B      #14,D0              ; Prime trap task #14 for the output
0000219C  4E4F                    2020              TRAP        #15                 ; Call trap #15 with number 14 for our IO
0000219E                          2021          
0000219E  143C 0007               2022              MOVE.B      #seven,D2           ; We know we need to move seven due to the nature of BRA in 68k
000021A2  1218                    2023              MOVE.B      (A0)+,D1            ; Move the byte we stored for use from our addr register to D1
000021A4  4EB9 00002F00           2024              JSR         printEA             ; this method handles the displacement hex values
000021AA                          2025          
000021AA  43F9 00003CD9           2026              LEA         newLine, A1         ; create new line for the IO console
000021B0  103C 000E               2027              MOVE.B      #14, D0             ; command for trap call to display message
000021B4  4E4F                    2028              TRAP        #15                 ; trap call ready console for next instruction
000021B6                          2029              
000021B6  6000 EE88               2030              BRA         LOOP                ; return to the control loop for next instruction
000021BA                          2031          
000021BA                          2032  ***********************************************************************************************************
000021BA                          2033  *
000021BA                          2034  *               SUBQ OPCODE
000021BA                          2035  *
000021BA                          2036  *       This section is for disassembling the SUBQ instruction, which is determined by a 5 in the first
000021BA                          2037  *       nibble.
000021BA                          2038  *       We assume there is only 1 opcode with 5 in the first nibble.
000021BA                          2039  *       SUBQ utilizes immediate data, so we use an alternate subroutine for operand output.
000021BA                          2040  *       The size field is used to branch to the subvariants of SUBQ, which we determine before hitting the
000021BA                          2041  *       final subroutines.
000021BA                          2042  *
000021BA                          2043  ***********************************************************************************************************
000021BA                          2044  
000021BA                          2045  opSUBQ                                      ; Assumed that we found SUBQ, begin disassemble
000021BA  43F9 00003D1D           2046              LEA         SUBQmatch, A1       ; Send out SUBQ message
000021C0  103C 000E               2047              MOVE.B      #14, D0             ; command for trap call to display message
000021C4  4E4F                    2048              TRAP        #15                 ; trap call to halt
000021C6                          2049              
000021C6  E141                    2050              ASL         #eight,D1           ; Shift by 8 to find size bits
000021C8  1218                    2051              MOVE.B      (A0)+,D1            ; Reload D1
000021CA  1401                    2052              MOVE.B      D1,D2               ; Move data in D2 to alter later
000021CC  EE42                    2053              ASR         #seven,D2           ; Move bits 7 places over to find size
000021CE  C47C 0007               2054              AND         #$07,D2             ; AND by 7 to remove uneeded bits
000021D2                          2055              
000021D2                          2056              ; Find size bits
000021D2  B43C 0000               2057              CMP.B       #zero,D2            ; Check for a byte
000021D6  6700 0012               2058              BEQ         opSUBQB             ; Byte in size
000021DA  B43C 0001               2059              CMP.B       #one,D2             ; Check for a word
000021DE  6700 0020               2060              BEQ         opSUBQW             ; Word in size
000021E2  B43C 0002               2061              CMP.B       #two,D2             ; Check for a long
000021E6  6700 002E               2062              BEQ         opSUBQL             ; Long in size
000021EA                          2063              
000021EA                          2064  opSUBQB                                     ; Found a byte in size, prepare for JSR
000021EA  43F9 00003D77           2065              LEA         dispByte,A1         ; Display the byte in the console
000021F0  103C 000E               2066              MOVE.B      #14,D0              ; Trap task 14 for IO
000021F4  4E4F                    2067              TRAP        #15                 ; Halt for IO
000021F6                          2068            
000021F6  4EB9 00002E28           2069              JSR         PrntImm             ; Call immediate data subroutine to handle SUBQ operands
000021FC                          2070              
000021FC  6000 EE42               2071              BRA         LOOP                ; Return to control loop
00002200                          2072              
00002200                          2073  opSUBQW                                     ; Found a word in size, prepare for JSR
00002200  43F9 00003D7A           2074              LEA         dispWord,A1         ; Display the word in the console
00002206  103C 000E               2075              MOVE.B      #14,D0              ; Trap task 14 for IO
0000220A  4E4F                    2076              TRAP        #15                 ; Halt for IO
0000220C                          2077            
0000220C  4EB9 00002E28           2078              JSR         PrntImm             ; Call immediate data subroutine to handle SUBQ operands
00002212                          2079              
00002212  6000 EE2C               2080              BRA         LOOP                ; Return to control loop
00002216                          2081              
00002216                          2082  opSUBQL                                     ; Found a long in size, prepare for JSR
00002216  43F9 00003D7D           2083              LEA         dispLong,A1         ; Display the long in the console
0000221C  103C 000E               2084              MOVE.B      #14,D0              ; Trap task 14 for IO
00002220  4E4F                    2085              TRAP        #15                 ; Halt for IO
00002222                          2086            
00002222  4246                    2087              CLR         D6                  ; In the long size case, we need to ensure D6 is clear for the JSR call
00002224  1C3C 0001               2088              MOVE.B      #1,D6               ; Needed to ensure proper immediate data is output to the console
00002228                          2089            
00002228  4EB9 00002E28           2090              JSR         PrntImm             ; Call immediate data subroutine to handle SUBQ operands
0000222E                          2091              
0000222E  6000 EE10               2092              BRA         LOOP                ; Return to control loop
00002232                          2093          
00002232                          2094  ***********************************************************************************************************
00002232                          2095  *
00002232                          2096  *                   MULS OPCODE
00002232                          2097  *
00002232                          2098  ***********************************************************************************************************
00002232                          2099  
00002232                          2100  opMULS  
00002232  43F9 00003D4A           2101              LEA         MULSmatch, A1       ; we know that the opcode will be MULS, so load A1 to print message
00002238  103C 000E               2102              MOVE.B      #14, D0             ; command for trap call to display message
0000223C  4E4F                    2103              TRAP        #15                 ; trap call
0000223E  43F9 00003CDD           2104              LEA         space, A1           ; create spaces
00002244  103C 000E               2105              MOVE.B      #14, D0             ; command for trap call to display message
00002248  4E4F                    2106              TRAP        #15                 ; trap call
0000224A                          2107          
0000224A  E141                    2108              ASL         #eight, D1          ; move D1 over by a byte
0000224C  1218                    2109              MOVE.B      (A0)+, D1           ; copy the next byte into D1
0000224E                          2110          
0000224E  4242                    2111              CLR         D2                  ; clear D2
00002250  4243                    2112              CLR         D3                  ; clear D3
00002252  1401                    2113              MOVE.B      D1, D2              ; copy the byte from D1 to D2
00002254  E642                    2114              ASR         #three, D2          ; shift D2 by 3 bits to get source mode
00002256  C47C 0007               2115              AND         #seven, D2          ; and D2 to get only first 3 bits
0000225A  1601                    2116              MOVE.B      D1, D3              ; copy D1 byte to D3
0000225C  C67C 0007               2117              AND         #seven, D3          ; and D3 to get first 3 bits also known as register
00002260                          2118          
00002260  4EB9 00002F00           2119              JSR         printEA             ; jump to printEA
00002266                          2120          
00002266  43F9 00003CE4           2121              LEA         comma, A1           ; create comma
0000226C  103C 000E               2122              MOVE.B      #14, D0             ; command for trap call to display message
00002270  4E4F                    2123              TRAP        #15                 ; trap call
00002272                          2124  
00002272  4242                    2125              CLR         D2                  ; clear D2 since we know mode should be data register
00002274  4243                    2126              CLR         D3                  ; clear D3
00002276  3601                    2127              MOVE.W      D1, D3              ; Move D1 word to D3
00002278  E043                    2128              ASR         #eight, D3          ; shift D3 by 8 bits
0000227A  E243                    2129              ASR         #one, D3            ; shift D3 by 1 bit
0000227C  C67C 0007               2130              AND         #seven, D3          ; and D3 to get first 3 bits which are the register
00002280                          2131  
00002280  4EB9 00002F00           2132              JSR         printEA             ; jump to printEA
00002286                          2133          
00002286  43F9 00003CD9           2134              LEA         newLine, A1         ; create new line
0000228C  103C 000E               2135              MOVE.B      #14, D0             ; command for trap call to display message
00002290  4E4F                    2136              TRAP        #15                 ; trap call
00002292                          2137          
00002292  6000 EDAC               2138              BRA         LOOP                ; branch back to LOOP
00002296                          2139  
00002296                          2140  ***********************************************************************************************************
00002296                          2141  *
00002296                          2142  *                   ADD OPCODE
00002296                          2143  *
00002296                          2144  ***********************************************************************************************************   
00002296                          2145  
00002296                          2146  opADDB  
00002296  43F9 00003D4F           2147              LEA         ADDmatch, A1        ; we know that the opcode will be ADD, so load A1 to print message
0000229C  103C 000E               2148              MOVE.B      #14, D0             ; command for trap call to display message
000022A0  4E4F                    2149              TRAP        #15                 ; trap call
000022A2                          2150          
000022A2  43F9 00003D77           2151              LEA         dispByte, A1        ; display byte
000022A8  103C 000E               2152              MOVE.B      #14, D0             ; command for trap call to display message
000022AC  4E4F                    2153              TRAP        #15                 ; trap call
000022AE  43F9 00003CDD           2154              LEA         space, A1           ; create spaces
000022B4  103C 000E               2155              MOVE.B      #14, D0             ; command for trap call to display message
000022B8  4E4F                    2156              TRAP        #15                 ; trap call
000022BA                          2157          
000022BA  4242                    2158              CLR         D2                  ; clear D2
000022BC  4243                    2159              CLR         D3                  ; clear D3
000022BE  1401                    2160              MOVE.B      D1, D2              ; copy the byte from D1 to D2
000022C0  E642                    2161              ASR         #three, D2          ; shift D2 by 3 bits to get source mode
000022C2  C47C 0007               2162              AND         #seven, D2          ; and D2 to get only first 3 bits
000022C6  1601                    2163              MOVE.B      D1, D3              ; copy D1 byte to D3
000022C8  C67C 0007               2164              AND         #seven, D3          ; and D3 to get first 3 bits also known as register
000022CC                          2165          
000022CC  4EB9 00002F00           2166              JSR         printEA             ; jump to printEA
000022D2                          2167          
000022D2  43F9 00003CE4           2168              LEA         comma, A1           ; create comma
000022D8  103C 000E               2169              MOVE.B      #14, D0             ; command for trap call to display message
000022DC  4E4F                    2170              TRAP        #15                 ; trap call
000022DE                          2171  
000022DE  4242                    2172              CLR         D2                  ; clear D2 since we know mode should be data register
000022E0  4243                    2173              CLR         D3                  ; clear D3
000022E2  3601                    2174              MOVE.W      D1, D3              ; Move D1 word to D3
000022E4  E043                    2175              ASR         #eight, D3          ; shift D3 by 8 bits
000022E6  E243                    2176              ASR         #one, D3            ; shift D3 by 1 bit
000022E8  C67C 0007               2177              AND         #seven, D3          ; and D3 to get first 3 bits which are the register
000022EC                          2178  
000022EC  4EB9 00002F00           2179              JSR         printEA             ; jump to printEA
000022F2                          2180          
000022F2  43F9 00003CD9           2181              LEA         newLine, A1         ; create new line
000022F8  103C 000E               2182              MOVE.B      #14, D0             ; command for trap call to display message
000022FC  4E4F                    2183              TRAP        #15                 ; trap call
000022FE                          2184          
000022FE  6000 ED40               2185              BRA         LOOP                ; branch back to LOOP
00002302                          2186          
00002302                          2187  opADDW  
00002302  43F9 00003D4F           2188              LEA         ADDmatch, A1        ; we know that the opcode will be ADD, so load A1 to print message
00002308  103C 000E               2189              MOVE.B      #14, D0             ; command for trap call to display message
0000230C  4E4F                    2190              TRAP        #15                 ; trap call
0000230E                          2191  
0000230E  43F9 00003D7A           2192              LEA         dispWord, A1        ; display word
00002314  103C 000E               2193              MOVE.B      #14, D0             ; command for trap call to display message
00002318  4E4F                    2194              TRAP        #15                 ; trap call
0000231A  43F9 00003CDD           2195              LEA         space, A1           ; create spaces
00002320  103C 000E               2196              MOVE.B      #14, D0             ; command for trap call to display message
00002324  4E4F                    2197              TRAP        #15                 ; trap call
00002326                          2198          
00002326  4242                    2199              CLR         D2                  ; clear D2
00002328  4243                    2200              CLR         D3                  ; clear D3
0000232A  1401                    2201              MOVE.B      D1, D2              ; copy the byte from D1 to D2
0000232C  E642                    2202              ASR         #three, D2          ; shift D2 by 3 bits to get source mode
0000232E  C47C 0007               2203              AND         #seven, D2          ; and D2 to get only first 3 bits
00002332  1601                    2204              MOVE.B      D1, D3              ; copy D1 byte to D3
00002334  C67C 0007               2205              AND         #seven, D3          ; and D3 to get first 3 bits also known as register
00002338                          2206          
00002338  4EB9 00002F00           2207              JSR         printEA             ; jump to printEA
0000233E                          2208          
0000233E  43F9 00003CE4           2209              LEA         comma, A1           ; create comma
00002344  103C 000E               2210              MOVE.B      #14, D0             ; command for trap call to display message
00002348  4E4F                    2211              TRAP        #15                 ; trap call
0000234A                          2212  
0000234A  4242                    2213              CLR         D2                  ; clear D2 since we know mode should be data register
0000234C  4243                    2214              CLR         D3                  ; clear D3
0000234E  3601                    2215              MOVE.W      D1, D3              ; Move D1 word to D3
00002350  E043                    2216              ASR         #eight, D3          ; shift D3 by 8 bits
00002352  E243                    2217              ASR         #one, D3            ; shift D3 by 1 bit
00002354  C67C 0007               2218              AND         #seven, D3          ; and D3 to get first 3 bits which are the register
00002358                          2219  
00002358  4EB9 00002F00           2220              JSR         printEA             ; jump to printEA
0000235E                          2221          
0000235E  43F9 00003CD9           2222              LEA         newLine, A1         ; create new line
00002364  103C 000E               2223              MOVE.B      #14, D0             ; command for trap call to display message
00002368  4E4F                    2224              TRAP        #15                 ; trap call
0000236A                          2225          
0000236A  6000 ECD4               2226              BRA         LOOP                ; branch back to LOOP
0000236E                          2227          
0000236E                          2228  opADDL  
0000236E  43F9 00003D4F           2229              LEA         ADDmatch, A1        ; we know that the opcode will be ADD, so load A1 to print message
00002374  103C 000E               2230              MOVE.B      #14, D0             ; command for trap call to display message
00002378  4E4F                    2231              TRAP        #15                 ; trap call
0000237A                          2232          
0000237A  43F9 00003D7D           2233              LEA         dispLong, A1        ; display long
00002380  103C 000E               2234              MOVE.B      #14, D0             ; command for trap call to display message
00002384  4E4F                    2235              TRAP        #15                 ; trap call
00002386  43F9 00003CDD           2236              LEA         space, A1           ; create spaces
0000238C  103C 000E               2237              MOVE.B      #14, D0             ; command for trap call to display message
00002390  4E4F                    2238              TRAP        #15                 ; trap call
00002392                          2239          
00002392  4242                    2240              CLR         D2                  ; clear D2
00002394  4243                    2241              CLR         D3                  ; clear D3
00002396  1401                    2242              MOVE.B      D1, D2              ; copy the byte from D1 to D2
00002398  E642                    2243              ASR         #three, D2          ; shift D2 by 3 bits to get source mode
0000239A  C47C 0007               2244              AND         #seven, D2          ; and D2 to get only first 3 bits
0000239E  1601                    2245              MOVE.B      D1, D3              ; copy D1 byte to D3
000023A0  C67C 0007               2246              AND         #seven, D3          ; and D3 to get first 3 bits also known as register
000023A4                          2247          
000023A4  4246                    2248              CLR         D6                  ; Clear D6
000023A6  1C3C 0001               2249              MOVE.B      #1, D6              ; move 1 to D6 in case source is printing immediate
000023AA                          2250          
000023AA  4EB9 00002F00           2251              JSR         printEA             ; jump to printEA
000023B0  4246                    2252              CLR         D6                  ; clear D6
000023B2                          2253          
000023B2  43F9 00003CE4           2254              LEA         comma, A1           ; create comma
000023B8  103C 000E               2255              MOVE.B      #14, D0             ; command for trap call to display message
000023BC  4E4F                    2256              TRAP        #15                 ; trap call
000023BE                          2257  
000023BE  4242                    2258              CLR         D2                  ; clear D2 since we know mode should be data register
000023C0  4243                    2259              CLR         D3                  ; clear D3
000023C2  3601                    2260              MOVE.W      D1, D3              ; Move D1 word to D3
000023C4  E043                    2261              ASR         #eight, D3          ; shift D3 by 8 bits
000023C6  E243                    2262              ASR         #one, D3            ; shift D3 by 1 bit
000023C8  C67C 0007               2263              AND         #seven, D3          ; and D3 to get first 3 bits which are the register
000023CC                          2264  
000023CC  4EB9 00002F00           2265              JSR         printEA             ; jump to printEA
000023D2                          2266          
000023D2  43F9 00003CD9           2267              LEA         newLine, A1         ; create new line
000023D8  103C 000E               2268              MOVE.B      #14, D0             ; command for trap call to display message
000023DC  4E4F                    2269              TRAP        #15                 ; trap call
000023DE                          2270          
000023DE  6000 EC60               2271              BRA         LOOP                ; branch back to LOOP
000023E2                          2272  
000023E2                          2273  ***********************************************************************************************************
000023E2                          2274  *
000023E2                          2275  *                   ADDA OPCODE
000023E2                          2276  *
000023E2                          2277  *********************************************************************************************************** 
000023E2                          2278  
000023E2                          2279  opADDAW 
000023E2  43F9 00003D53           2280              LEA         ADDAmatch, A1       ; we know that the opcode will be ADDA, so load A1 to print message
000023E8  103C 000E               2281              MOVE.B      #14, D0             ; command for trap call to display message
000023EC  4E4F                    2282              TRAP        #15                 ; trap call
000023EE                          2283          
000023EE  43F9 00003D7A           2284              LEA         dispWord, A1        ; display word
000023F4  103C 000E               2285              MOVE.B      #14, D0             ; command for trap call to display message
000023F8  4E4F                    2286              TRAP        #15                 ; trap call
000023FA  43F9 00003CDD           2287              LEA         space, A1           ; create spaces
00002400  103C 000E               2288              MOVE.B      #14, D0             ; command for trap call to display message
00002404  4E4F                    2289              TRAP        #15                 ; trap call
00002406                          2290          
00002406  4242                    2291              CLR         D2                  ; clear D2
00002408  4243                    2292              CLR         D3                  ; clear D3
0000240A  1401                    2293              MOVE.B      D1, D2              ; copy the byte from D1 to D2
0000240C  E642                    2294              ASR         #three, D2          ; shift D2 by 3 bits to get source mode
0000240E  C47C 0007               2295              AND         #seven, D2          ; and D2 to get only first 3 bits
00002412  1601                    2296              MOVE.B      D1, D3              ; copy D1 byte to D3
00002414  C67C 0007               2297              AND         #seven, D3          ; and D3 to get first 3 bits also known as register
00002418                          2298          
00002418  4EB9 00002F00           2299              JSR         printEA             ; jump to printEA 
0000241E                          2300          
0000241E  43F9 00003CE4           2301              LEA         comma, A1           ; create comma
00002424  103C 000E               2302              MOVE.B      #14, D0             ; command for trap call to display message
00002428  4E4F                    2303              TRAP        #15                 ; trap call
0000242A                          2304  
0000242A  4242                    2305              CLR         D2                  ; clear D2 since we know mode should be data register
0000242C  4243                    2306              CLR         D3                  ; clear D3
0000242E  143C 0001               2307              MOVE.B      #one, D2            ; move 1 to D2 since mode should be address
00002432  3601                    2308              MOVE.W      D1, D3              ; Move D1 word to D3
00002434  E043                    2309              ASR         #eight, D3          ; shift D3 by 8 bits
00002436  E243                    2310              ASR         #one, D3            ; shift D3 by 1 bit
00002438  C67C 0007               2311              AND         #seven, D3          ; and D3 to get first 3 bits which are the register
0000243C                          2312  
0000243C  4EB9 00002F00           2313              JSR         printEA             ; jump to printEA
00002442                          2314          
00002442  43F9 00003CD9           2315              LEA         newLine, A1         ; create new line
00002448  103C 000E               2316              MOVE.B      #14, D0             ; command for trap call to display message
0000244C  4E4F                    2317              TRAP        #15                 ; trap call
0000244E                          2318          
0000244E  6000 EBF0               2319              BRA         LOOP                ; branch back to LOOP
00002452                          2320  
00002452                          2321  opADDAL 
00002452  43F9 00003D53           2322              LEA         ADDAmatch, A1       ; we know that the opcode will be ADDA, so load A1 to print message
00002458  103C 000E               2323              MOVE.B      #14, D0             ; command for trap call to display message
0000245C  4E4F                    2324              TRAP        #15                 ; trap call
0000245E                          2325  
0000245E  43F9 00003D7D           2326              LEA         dispLong, A1        ; display long
00002464  103C 000E               2327              MOVE.B      #14, D0             ; command for trap call to display message
00002468  4E4F                    2328              TRAP        #15                 ; trap call
0000246A  43F9 00003CDD           2329              LEA         space, A1           ; create spaces
00002470  103C 000E               2330              MOVE.B      #14, D0             ; command for trap call to display message
00002474  4E4F                    2331              TRAP        #15                 ; trap call
00002476                          2332          
00002476  4242                    2333              CLR         D2                  ; clear D2
00002478  4243                    2334              CLR         D3                  ; clear D3
0000247A  1401                    2335              MOVE.B      D1, D2              ; copy the byte from D1 to D2
0000247C  E642                    2336              ASR         #three, D2          ; shift D2 by 3 bits to get source mode
0000247E  C47C 0007               2337              AND         #seven, D2          ; and D2 to get only first 3 bits
00002482  1601                    2338              MOVE.B      D1, D3              ; copy D1 byte to D3
00002484  C67C 0007               2339              AND         #seven, D3          ; and D3 to get first 3 bits also known as register
00002488                          2340          
00002488  4EB9 00002F00           2341              JSR         printEA             ; jump to printEA 
0000248E                          2342          
0000248E  43F9 00003CE4           2343              LEA         comma, A1           ; create comma
00002494  103C 000E               2344              MOVE.B      #14, D0             ; command for trap call to display message
00002498  4E4F                    2345              TRAP        #15                 ; trap call
0000249A                          2346  
0000249A  4242                    2347              CLR         D2                  ; clear D2 since we know mode should be data register
0000249C  4243                    2348              CLR         D3                  ; clear D3
0000249E  143C 0001               2349              MOVE.B      #one, D2            ; move 1 to D2 since mode should be address
000024A2  3601                    2350              MOVE.W      D1, D3              ; Move D1 word to D3
000024A4  E043                    2351              ASR         #eight, D3          ; shift D3 by 8 bits
000024A6  E243                    2352              ASR         #one, D3            ; shift D3 by 1 bit
000024A8  C67C 0007               2353              AND         #seven, D3          ; and D3 to get first 3 bits which are the register
000024AC                          2354  
000024AC  4EB9 00002F00           2355              JSR         printEA             ; jump to printEA
000024B2                          2356          
000024B2  43F9 00003CD9           2357              LEA         newLine, A1         ; create new line
000024B8  103C 000E               2358              MOVE.B      #14, D0             ; command for trap call to display message
000024BC  4E4F                    2359              TRAP        #15                 ; trap call
000024BE                          2360          
000024BE  6000 EB80               2361              BRA         LOOP                ; branch back to LOOP
000024C2                          2362          
000024C2                          2363  ***********************************************************************************************************
000024C2                          2364  *
000024C2                          2365  *                       Shifting OPCODES
000024C2                          2366  *
000024C2                          2367  ***********************************************************************************************************
000024C2                          2368  
000024C2                          2369  opASL       
000024C2  43F9 00003D64           2370              LEA         ASLmatch, A1        ; we know that the opcode will be ASL, so load A1 to print message
000024C8  103C 000E               2371              MOVE.B      #14, D0             ; command for trap call to display message
000024CC  4E4F                    2372              TRAP        #15                 ; trap call
000024CE                          2373          
000024CE  43F9 00003D7A           2374              LEA         dispWord, A1        ; display word
000024D4  103C 000E               2375              MOVE.B      #14, D0             ; command for trap call to display message
000024D8  4E4F                    2376              TRAP        #15                 ; trap call
000024DA                          2377          
000024DA  43F9 00003CDD           2378              LEA         space, A1           ; display space 
000024E0  103C 000E               2379              MOVE.B      #14, D0             ; command for trap call to display message
000024E4  4E4F                    2380              TRAP        #15                 ; trap call
000024E6                          2381          
000024E6  4242                    2382              CLR         D2                  ; clear D2
000024E8  4243                    2383              CLR         D3                  ; clear D3
000024EA  1401                    2384              MOVE.B      D1,D2               ; move byte from D1 to D2
000024EC  1601                    2385              MOVE.B      D1,D3               ; move byte from D1 to D3
000024EE                          2386          
000024EE  E602                    2387              ASR.B       #three, D2          ; shift D2 by 3 bits to get mode
000024F0  C47C 0007               2388              AND         #seven, D2          ; and D2 by 3 bits to get first 3 bits
000024F4  C67C 0007               2389              AND         #seven, D3          ; and D3 by 3 bits to get first 3 bits for register
000024F8                          2390          
000024F8  4EB9 00002F00           2391              JSR         printEA             ; jump to printEA
000024FE                          2392          
000024FE  43F9 00003CD9           2393              LEA         newLine, A1         ; Display newLine
00002504  103C 000E               2394              MOVE.B      #14, D0             ; command for trap call to display message
00002508  4E4F                    2395              TRAP        #15                 ; trap call
0000250A                          2396          
0000250A  6000 EB34               2397              BRA         LOOP                ; branch back to LOOP
0000250E                          2398  
0000250E                          2399  opASR   
0000250E  43F9 00003D60           2400              LEA         ASRmatch, A1        ; we know that the opcode will be ASR, so load A1 to print message
00002514  103C 000E               2401              MOVE.B      #14, D0             ; command for trap call to display message
00002518  4E4F                    2402              TRAP        #15                 ; trap call
0000251A                          2403          
0000251A  43F9 00003D7A           2404              LEA         dispWord, A1        ; display word
00002520  103C 000E               2405              MOVE.B      #14, D0             ; command for trap call to display message
00002524  4E4F                    2406              TRAP        #15                 ; trap call
00002526                          2407          
00002526  43F9 00003CDD           2408              LEA         space, A1           ; display space 
0000252C  103C 000E               2409              MOVE.B      #14, D0             ; command for trap call to display message
00002530  4E4F                    2410              TRAP        #15                 ; trap call
00002532                          2411          
00002532  4242                    2412              CLR         D2                  ; clear D2
00002534  4243                    2413              CLR         D3                  ; clear D3
00002536  1401                    2414              MOVE.B      D1,D2               ; move byte from D1 to D2
00002538  1601                    2415              MOVE.B      D1,D3               ; move byte from D1 to D3
0000253A                          2416          
0000253A  E602                    2417              ASR.B       #three, D2          ; shift D2 by 3 bits to get mode
0000253C  C47C 0007               2418              AND         #seven, D2          ; and D2 by 3 bits to get first 3 bits
00002540  C67C 0007               2419              AND         #seven, D3          ; and D3 by 3 bits to get first 3 bits for register
00002544                          2420          
00002544  4EB9 00002F00           2421              JSR         printEA             ; jump to printEA
0000254A                          2422          
0000254A  43F9 00003CD9           2423              LEA         newLine, A1         ; Display newLine
00002550  103C 000E               2424              MOVE.B      #14, D0             ; command for trap call to display message
00002554  4E4F                    2425              TRAP        #15                 ; trap call
00002556                          2426          
00002556  6000 EAE8               2427              BRA         LOOP                ; branch back to LOOP
0000255A                          2428  
0000255A                          2429  opLSL       
0000255A  43F9 00003D5C           2430              LEA         LSLmatch, A1        ; we know that the opcode will be LSL, so load A1 to print message
00002560  103C 000E               2431              MOVE.B      #14, D0             ; command for trap call to display message
00002564  4E4F                    2432              TRAP        #15                 ; trap call
00002566                          2433              
00002566  43F9 00003D7A           2434              LEA         dispWord, A1        ; display word
0000256C  103C 000E               2435              MOVE.B      #14, D0             ; command for trap call to display message
00002570  4E4F                    2436              TRAP        #15                 ; trap call
00002572                          2437          
00002572  43F9 00003CDD           2438              LEA         space, A1           ; display space 
00002578  103C 000E               2439              MOVE.B      #14, D0             ; command for trap call to display message
0000257C  4E4F                    2440              TRAP        #15                 ; trap call
0000257E                          2441          
0000257E  4242                    2442              CLR         D2                  ; clear D2
00002580  4243                    2443              CLR         D3                  ; clear D3
00002582  1401                    2444              MOVE.B      D1,D2               ; move byte from D1 to D2
00002584  1601                    2445              MOVE.B      D1,D3               ; move byte from D1 to D3
00002586                          2446          
00002586  E602                    2447              ASR.B       #three, D2          ; shift D2 by 3 bits to get mode
00002588  C47C 0007               2448              AND         #seven, D2          ; and D2 by 3 bits to get first 3 bits
0000258C  C67C 0007               2449              AND         #seven, D3          ; and D3 by 3 bits to get first 3 bits for register
00002590                          2450          
00002590  4EB9 00002F00           2451              JSR         printEA             ; jump to printEA
00002596                          2452          
00002596  43F9 00003CD9           2453              LEA         newLine, A1         ; Display newLine
0000259C  103C 000E               2454              MOVE.B      #14, D0             ; command for trap call to display message
000025A0  4E4F                    2455              TRAP        #15                 ; trap call
000025A2                          2456          
000025A2  6000 EA9C               2457              BRA         LOOP                ; branch back to LOOP
000025A6                          2458  
000025A6                          2459  opLSR   
000025A6  43F9 00003D58           2460              LEA         LSRmatch, A1        ; we know that the opcode will be LSR, so load A1 to print message
000025AC  103C 000E               2461              MOVE.B      #14, D0             ; command for trap call to display message
000025B0  4E4F                    2462              TRAP        #15                 ; trap call
000025B2                          2463          
000025B2  43F9 00003D7A           2464              LEA         dispWord, A1        ; display word
000025B8  103C 000E               2465              MOVE.B      #14, D0             ; command for trap call to display message
000025BC  4E4F                    2466              TRAP        #15                 ; trap call
000025BE                          2467          
000025BE  43F9 00003CDD           2468              LEA         space, A1           ; display space 
000025C4  103C 000E               2469              MOVE.B      #14, D0             ; command for trap call to display message
000025C8  4E4F                    2470              TRAP        #15                 ; trap call
000025CA                          2471          
000025CA  4242                    2472              CLR         D2                  ; clear D2
000025CC  4243                    2473              CLR         D3                  ; clear D3
000025CE  1401                    2474              MOVE.B      D1,D2               ; move byte from D1 to D2
000025D0  1601                    2475              MOVE.B      D1,D3               ; move byte from D1 to D3
000025D2                          2476          
000025D2  E602                    2477              ASR.B       #three, D2          ; shift D2 by 3 bits to get mode
000025D4  C47C 0007               2478              AND         #seven, D2          ; and D2 by 3 bits to get first 3 bits
000025D8  C67C 0007               2479              AND         #seven, D3          ; and D3 by 3 bits to get first 3 bits for register
000025DC                          2480          
000025DC  4EB9 00002F00           2481              JSR         printEA             ; jump to printEA
000025E2                          2482          
000025E2  43F9 00003CD9           2483              LEA         newLine, A1         ; Display newLine
000025E8  103C 000E               2484              MOVE.B      #14, D0             ; command for trap call to display message
000025EC  4E4F                    2485              TRAP        #15                 ; trap call
000025EE                          2486          
000025EE  6000 EA50               2487              BRA         LOOP                ; branch back to LOOP
000025F2                          2488  
000025F2                          2489  opROL   
000025F2  43F9 00003D6C           2490              LEA         ROLmatch, A1        ; we know that the opcode will be ROL, so load A1 to print message
000025F8  103C 000E               2491              MOVE.B      #14, D0             ; command for trap call to display message
000025FC  4E4F                    2492              TRAP        #15                 ; trap call
000025FE                          2493          
000025FE  43F9 00003D7A           2494              LEA         dispWord, A1        ; display word
00002604  103C 000E               2495              MOVE.B      #14, D0             ; command for trap call to display message
00002608  4E4F                    2496              TRAP        #15                 ; trap call
0000260A                          2497          
0000260A  43F9 00003CDD           2498              LEA         space, A1           ; display space 
00002610  103C 000E               2499              MOVE.B      #14, D0             ; command for trap call to display message
00002614  4E4F                    2500              TRAP        #15                 ; trap call
00002616                          2501          
00002616  4242                    2502              CLR         D2                  ; clear D2
00002618  4243                    2503              CLR         D3                  ; clear D3
0000261A  1401                    2504              MOVE.B      D1,D2               ; move byte from D1 to D2
0000261C  1601                    2505              MOVE.B      D1,D3               ; move byte from D1 to D3
0000261E                          2506          
0000261E  E602                    2507              ASR.B       #three, D2          ; shift D2 by 3 bits to get mode
00002620  C47C 0007               2508              AND         #seven, D2          ; and D2 by 3 bits to get first 3 bits
00002624  C67C 0007               2509              AND         #seven, D3          ; and D3 by 3 bits to get first 3 bits for register
00002628                          2510          
00002628  4EB9 00002F00           2511              JSR         printEA             ; jump to printEA
0000262E                          2512          
0000262E  43F9 00003CD9           2513              LEA         newLine, A1         ; Display newLine
00002634  103C 000E               2514              MOVE.B      #14, D0             ; command for trap call to display message
00002638  4E4F                    2515              TRAP        #15                 ; trap call
0000263A                          2516          
0000263A  6000 EA04               2517              BRA         LOOP                ; branch back to LOOP
0000263E                          2518  
0000263E                          2519  opROR   
0000263E  43F9 00003D68           2520              LEA         RORmatch, A1        ; we know that the opcode will be ROR, so load A1 to print message
00002644  103C 000E               2521              MOVE.B      #14, D0             ; command for trap call to display message
00002648  4E4F                    2522              TRAP        #15                 ; trap call
0000264A                          2523          
0000264A  43F9 00003D7A           2524              LEA         dispWord, A1        ; display word
00002650  103C 000E               2525              MOVE.B      #14, D0             ; command for trap call to display message
00002654  4E4F                    2526              TRAP        #15                 ; trap call
00002656                          2527          
00002656  43F9 00003CDD           2528              LEA         space, A1           ; display space 
0000265C  103C 000E               2529              MOVE.B      #14, D0             ; command for trap call to display message
00002660  4E4F                    2530              TRAP        #15                 ; trap call
00002662                          2531          
00002662  4242                    2532              CLR         D2                  ; clear D2
00002664  4243                    2533              CLR         D3                  ; clear D3
00002666  1401                    2534              MOVE.B      D1,D2               ; move byte from D1 to D2
00002668  1601                    2535              MOVE.B      D1,D3               ; move byte from D1 to D3
0000266A                          2536          
0000266A  E602                    2537              ASR.B       #three, D2          ; shift D2 by 3 bits to get mode
0000266C  C47C 0007               2538              AND         #seven, D2          ; and D2 by 3 bits to get first 3 bits
00002670  C67C 0007               2539              AND         #seven, D3          ; and D3 by 3 bits to get first 3 bits for register
00002674                          2540          
00002674  4EB9 00002F00           2541              JSR         printEA             ; jump to printEA
0000267A                          2542          
0000267A  43F9 00003CD9           2543              LEA         newLine, A1         ; Display newLine
00002680  103C 000E               2544              MOVE.B      #14, D0             ; command for trap call to display message
00002684  4E4F                    2545              TRAP        #15                 ; trap call
00002686                          2546          
00002686  6000 E9B8               2547              BRA         LOOP                ; branch back to LOOP
0000268A                          2548          
0000268A                          2549  memSB       
0000268A  4242                    2550              CLR         D2                  ; clear D2
0000268C  1401                    2551              MOVE.B      D1,D2               ; move D1 to D2
0000268E  E642                    2552              ASR         #three, D2          ; shift D2 by 3 bits to get i/r
00002690                          2553              
00002690  C47C 0007               2554              AND         #$07, D2            ; and D2 by 3 bits 
00002694                          2555          
00002694  B43C 0000               2556              CMP.B       #zero, D2           ; compare 0 to D2
00002698  6700 002E               2557              BEQ         opASBI              ; if true, branch to ASBI for immediate
0000269C  B43C 0004               2558              CMP.B       #four, D2           ; compare 4 to D2 
000026A0  6700 0088               2559              BEQ         opASBR              ; if true, branch to ASBR for register
000026A4  B43C 0001               2560              CMP.B       #one, D2            ; compare 1 to D2
000026A8  6700 00E2               2561              BEQ         opLSBI              ; if true, branch to LSBI for immediate
000026AC  B43C 0005               2562              CMP.B       #five, D2           ; compare 5 to D2
000026B0  6700 013C               2563              BEQ         opLSBR              ; if true, branch to LSBR for register
000026B4  B43C 0003               2564              CMP.B       #three, D2          ; compare 3 to D2
000026B8  6700 0196               2565              BEQ         opROBI              ; if true, branch to ROBI for immediate
000026BC  B43C 0007               2566              CMP.B       #seven, D2          ; compare 7 to D2
000026C0  6700 01F0               2567              BEQ         opROBR              ; if true, branch to ROBR for register
000026C4  6000 15A8               2568              BRA         printInvalid        ; otherwise invalid
000026C8                          2569          
000026C8                          2570  opASBI  
000026C8  4242                    2571              CLR         D2                  ; clear D2
000026CA  3401                    2572              MOVE.W      D1, D2              ; move word from D1 to D2
000026CC  E042                    2573              ASR         #eight, D2          ; shift D2 over by 8 bits 
000026CE  C47C 0001               2574              AND         #$01, D2            ; and D2 by 1 bit to get direction
000026D2                          2575      
000026D2  B43C 0000               2576              CMP.B       #zero, D2           ; compare 0 to D2
000026D6  6700 000E               2577              BEQ         opASRBI             ; if true, branch to ASRBI for right
000026DA  B43C 0001               2578              CMP.B       #one, D2            ; compare 1 to D2
000026DE  6700 0028               2579              BEQ         opASLBI             ; if true, branch to ASLBI for left
000026E2  6000 158A               2580              BRA         printInvalid        ; otherwise invalid
000026E6                          2581          
000026E6                          2582  opASRBI 
000026E6  43F9 00003D60           2583              LEA         ASRmatch, A1        ; we know that the opcode will be ASR, so load A1 to print message
000026EC  103C 000E               2584              MOVE.B      #14, D0             ; command for trap call to display message
000026F0  4E4F                    2585              TRAP        #15                 ; trap call
000026F2                          2586  
000026F2  43F9 00003D77           2587              LEA         dispByte, A1        ; display byte
000026F8  103C 000E               2588              MOVE.B      #14, D0             ; command for trap call to display message
000026FC  4E4F                    2589              TRAP        #15                 ; trap call
000026FE                          2590          
000026FE  4EB9 00002E28           2591              JSR         PrntImm             ; jump to PrntImm
00002704                          2592          
00002704  6000 E93A               2593              BRA         LOOP                ; branch back to LOOP
00002708                          2594  
00002708                          2595  opASLBI 
00002708  43F9 00003D64           2596              LEA         ASLmatch, A1        ; we know that the opcode will be ASL, so load A1 to print message
0000270E  103C 000E               2597              MOVE.B      #14, D0             ; command for trap call to display message
00002712  4E4F                    2598              TRAP        #15                 ; trap call
00002714                          2599  
00002714  43F9 00003D77           2600              LEA         dispByte, A1        ; display byte
0000271A  103C 000E               2601              MOVE.B      #14, D0             ; command for trap call to display message
0000271E  4E4F                    2602              TRAP        #15                 ; trap call
00002720                          2603          
00002720  4EB9 00002E28           2604              JSR         PrntImm             ; jump to PrntImm
00002726                          2605          
00002726  6000 E918               2606              BRA         LOOP                ; branch back to LOOP
0000272A                          2607  
0000272A                          2608  opASBR  
0000272A  4242                    2609              CLR         D2                  ; clear D2
0000272C  3401                    2610              MOVE.W      D1, D2              ; move word from D1 to D2
0000272E  E042                    2611              ASR         #eight, D2          ; shift D2 over by 8 bits 
00002730  C47C 0001               2612              AND         #$01, D2            ; and D2 by 1 bit to get direction
00002734                          2613      
00002734  B43C 0000               2614              CMP.B       #zero, D2           ; compare 0 to D2 
00002738  6700 000E               2615              BEQ         opASRBR             ; if true, branch to ASRBR for right
0000273C  B43C 0001               2616              CMP.B       #one, D2            ; compare 1 to D2
00002740  6700 0028               2617              BEQ         opASLBR             ; if true, branch to ASLBR for left
00002744  6000 1528               2618              BRA         printInvalid        ; otherwise invalid
00002748                          2619          
00002748                          2620  opASRBR 
00002748  43F9 00003D60           2621              LEA         ASRmatch, A1        ; we know that the opcode will be ASR, so load A1 to print message
0000274E  103C 000E               2622              MOVE.B      #14, D0             ; command for trap call to display message
00002752  4E4F                    2623              TRAP        #15                 ; trap call
00002754                          2624  
00002754  43F9 00003D77           2625              LEA         dispByte, A1        ; display byte
0000275A  103C 000E               2626              MOVE.B      #14, D0             ; command for trap call to display message
0000275E  4E4F                    2627              TRAP        #15                 ; trap call
00002760                          2628          
00002760  4EB9 00002E84           2629              JSR         PrntReg             ; jump to PrntReg
00002766                          2630          
00002766  6000 E8D8               2631              BRA         LOOP                ; branch back to LOOP
0000276A                          2632  
0000276A                          2633  opASLBR 
0000276A  43F9 00003D64           2634              LEA         ASLmatch, A1        ; we know that the opcode will be ASL, so load A1 to print message
00002770  103C 000E               2635              MOVE.B      #14, D0             ; command for trap call to display message
00002774  4E4F                    2636              TRAP        #15                 ; trap call
00002776                          2637  
00002776  43F9 00003D77           2638              LEA         dispByte, A1        ; display byte
0000277C  103C 000E               2639              MOVE.B      #14, D0             ; command for trap call to display message
00002780  4E4F                    2640              TRAP        #15                 ; trap call
00002782                          2641          
00002782  4EB9 00002E84           2642              JSR         PrntReg             ; jump to PrntReg
00002788                          2643          
00002788  6000 E8B6               2644              BRA         LOOP                ; branch back to LOOP
0000278C                          2645  
0000278C                          2646  opLSBI      
0000278C  4242                    2647              CLR         D2                  ; clear D2
0000278E  3401                    2648              MOVE.W      D1, D2              ; move word from D1 to D2
00002790  E042                    2649              ASR         #eight, D2          ; shift D2 over by 8 bits 
00002792  C47C 0001               2650              AND         #$01, D2            ; and D2 by 1 bit to get direction
00002796                          2651      
00002796  B43C 0000               2652              CMP.B       #zero, D2           ; compare 0 to D2 
0000279A  6700 000E               2653              BEQ         opLSRBI             ; if true, branch to LSRBI for right
0000279E  B43C 0001               2654              CMP.B       #one, D2            ; compare 1 to D2
000027A2  6700 0028               2655              BEQ         opLSLBI             ; if true, branch to LSLBI for left
000027A6  6000 14C6               2656              BRA         printInvalid        ; otherwise invalid
000027AA                          2657          
000027AA                          2658  opLSRBI 
000027AA  43F9 00003D58           2659              LEA         LSRmatch, A1        ; we know that the opcode will be ASR, so load A1 to print message
000027B0  103C 000E               2660              MOVE.B      #14, D0             ; command for trap call to display message
000027B4  4E4F                    2661              TRAP        #15                 ; trap call
000027B6                          2662  
000027B6  43F9 00003D77           2663              LEA         dispByte, A1        ; display byte
000027BC  103C 000E               2664              MOVE.B      #14, D0             ; command for trap call to display message
000027C0  4E4F                    2665              TRAP        #15                 ; trap call
000027C2                          2666          
000027C2  4EB9 00002E28           2667              JSR         PrntImm             ; jump to PrntImm
000027C8                          2668          
000027C8  6000 E876               2669              BRA         LOOP                ; branch back to LOOP
000027CC                          2670              
000027CC                          2671  opLSLBI     
000027CC  43F9 00003D5C           2672              LEA         LSLmatch, A1        ; we know that the opcode will be ASR, so load A1 to print message
000027D2  103C 000E               2673              MOVE.B      #14, D0             ; command for trap call to display message
000027D6  4E4F                    2674              TRAP        #15                 ; trap call
000027D8                          2675  
000027D8  43F9 00003D77           2676              LEA         dispByte, A1        ; display byte
000027DE  103C 000E               2677              MOVE.B      #14, D0             ; command for trap call to display message
000027E2  4E4F                    2678              TRAP        #15                 ; trap call
000027E4                          2679          
000027E4  4EB9 00002E28           2680              JSR         PrntImm             ; jump to PrntImm
000027EA                          2681          
000027EA  6000 E854               2682              BRA         LOOP                ; branch back to LOOP
000027EE                          2683  
000027EE                          2684  opLSBR  
000027EE  4242                    2685              CLR         D2                  ; clear D2
000027F0  3401                    2686              MOVE.W      D1, D2              ; move word from D1 to D2
000027F2  E042                    2687              ASR         #eight, D2          ; shift D2 over by 8 bits 
000027F4  C47C 0001               2688              AND         #$01, D2            ; and D2 by 1 bit to get direction
000027F8                          2689      
000027F8  B43C 0000               2690              CMP.B       #zero, D2           ; compare 0 to D2 
000027FC  6700 000E               2691              BEQ         opLSRBR             ; if true, branch to LSRBR for right
00002800  B43C 0001               2692              CMP.B       #one, D2            ; compare 1 to D2
00002804  6700 0028               2693              BEQ         opLSLBR             ; if true, branch to LSLBR for left
00002808  6000 1464               2694              BRA         printInvalid        ; otherwise invalid
0000280C                          2695          
0000280C                          2696  opLSRBR 
0000280C  43F9 00003D58           2697              LEA         LSRmatch, A1        ; we know that the opcode will be LSR, so load A1 to print message
00002812  103C 000E               2698              MOVE.B      #14, D0             ; command for trap call to display message
00002816  4E4F                    2699              TRAP        #15                 ; trap call
00002818                          2700  
00002818  43F9 00003D77           2701              LEA         dispByte, A1        ; display byte
0000281E  103C 000E               2702              MOVE.B      #14, D0             ; command for trap call to display message
00002822  4E4F                    2703              TRAP        #15                 ; trap call
00002824                          2704          
00002824  4EB9 00002E84           2705              JSR         PrntReg             ; jump to PrntReg
0000282A                          2706          
0000282A  6000 E814               2707              BRA         LOOP                ; branch back to LOOP
0000282E                          2708          
0000282E                          2709  opLSLBR     
0000282E  43F9 00003D5C           2710              LEA         LSLmatch, A1        ; we know that the opcode will be LSL, so load A1 to print message
00002834  103C 000E               2711              MOVE.B      #14, D0             ; command for trap call to display message
00002838  4E4F                    2712              TRAP        #15                 ; trap call
0000283A                          2713  
0000283A  43F9 00003D77           2714              LEA         dispByte, A1        ; display byte
00002840  103C 000E               2715              MOVE.B      #14, D0             ; command for trap call to display message
00002844  4E4F                    2716              TRAP        #15                 ; trap call
00002846                          2717          
00002846  4EB9 00002E84           2718              JSR         PrntReg             ; jump to PrntReg
0000284C                          2719          
0000284C  6000 E7F2               2720              BRA         LOOP                ; branch back to LOOP
00002850                          2721              
00002850                          2722  opROBI  
00002850  4242                    2723              CLR         D2                  ; clear D2
00002852  3401                    2724              MOVE.W      D1, D2              ; move word from D1 to D2
00002854  E042                    2725              ASR         #eight, D2          ; shift D2 over by 8 bits 
00002856  C47C 0001               2726              AND         #$01, D2            ; and D2 by 1 bit to get direction
0000285A                          2727      
0000285A  B43C 0000               2728              CMP.B       #zero, D2           ; compare 0 to D2
0000285E  6700 000E               2729              BEQ         opRORBI             ; if true, branch to RORBI for right
00002862  B43C 0001               2730              CMP.B       #one, D2            ; compare 1 to D2
00002866  6700 0028               2731              BEQ         opROLBI             ; if true, branch to ROLBI for left
0000286A  6000 1402               2732              BRA         printInvalid        ; otherwise invalid
0000286E                          2733          
0000286E                          2734  opRORBI 
0000286E  43F9 00003D68           2735              LEA         RORmatch, A1        ; we know that the opcode will be ROR, so load A1 to print message
00002874  103C 000E               2736              MOVE.B      #14, D0             ; command for trap call to display message
00002878  4E4F                    2737              TRAP        #15                 ; trap call
0000287A                          2738  
0000287A  43F9 00003D77           2739              LEA         dispByte, A1        ; display byte
00002880  103C 000E               2740              MOVE.B      #14, D0             ; command for trap call to display message
00002884  4E4F                    2741              TRAP        #15                 ; trap call
00002886                          2742          
00002886  4EB9 00002E28           2743              JSR         PrntImm             ; jump to PrntImm
0000288C                          2744          
0000288C  6000 E7B2               2745              BRA         LOOP                ; branch back to LOOP
00002890                          2746  
00002890                          2747  opROLBI 
00002890  43F9 00003D6C           2748              LEA         ROLmatch, A1        ; we know that the opcode will be ROL, so load A1 to print message
00002896  103C 000E               2749              MOVE.B      #14, D0             ; command for trap call to display message
0000289A  4E4F                    2750              TRAP        #15                 ; trap call
0000289C                          2751  
0000289C  43F9 00003D77           2752              LEA         dispByte, A1        ; display byte
000028A2  103C 000E               2753              MOVE.B      #14, D0             ; command for trap call to display message
000028A6  4E4F                    2754              TRAP        #15                 ; trap call
000028A8                          2755          
000028A8  4EB9 00002E28           2756              JSR         PrntImm             ; jump to PrntImm
000028AE                          2757          
000028AE  6000 E790               2758              BRA         LOOP                ; branch back to LOOP
000028B2                          2759  
000028B2                          2760  opROBR  
000028B2  4242                    2761              CLR         D2                  ; clear D2
000028B4  3401                    2762              MOVE.W      D1, D2              ; move word from D1 to D2
000028B6  E042                    2763              ASR         #eight, D2          ; shift D2 over by 8 bits 
000028B8  C47C 0001               2764              AND         #$01, D2            ; and D2 by 1 bit to get direction
000028BC                          2765      
000028BC  B43C 0000               2766              CMP.B       #zero, D2           ; compare 0 to D2 
000028C0  6700 000E               2767              BEQ         opRORBR             ; if true, branch to RORBR for right
000028C4  B43C 0001               2768              CMP.B       #one, D2            ; compare 1 to D2
000028C8  6700 0028               2769              BEQ         opROLBR             ; if true, branch to ROLBR for left
000028CC  6000 13A0               2770              BRA         printInvalid        ; otherwise invalid    
000028D0                          2771          
000028D0                          2772  opRORBR 
000028D0  43F9 00003D68           2773              LEA         RORmatch, A1        ; we know that the opcode will be ASR, so load A1 to print message
000028D6  103C 000E               2774              MOVE.B      #14, D0             ; command for trap call to display message
000028DA  4E4F                    2775              TRAP        #15                 ; trap call
000028DC                          2776  
000028DC  43F9 00003D77           2777              LEA         dispByte, A1        ; display byte
000028E2  103C 000E               2778              MOVE.B      #14, D0             ; command for trap call to display message
000028E6  4E4F                    2779              TRAP        #15                 ; trap call
000028E8                          2780          
000028E8  4EB9 00002E84           2781              JSR         PrntReg             ; jump to PrntReg
000028EE                          2782          
000028EE  6000 E750               2783              BRA         LOOP                ; branch back to LOOP
000028F2                          2784  
000028F2                          2785  opROLBR 
000028F2  43F9 00003D6C           2786              LEA         ROLmatch, A1        ; we know that the opcode will be ASR, so load A1 to print message
000028F8  103C 000E               2787              MOVE.B      #14, D0             ; command for trap call to display message
000028FC  4E4F                    2788              TRAP        #15                 ; trap call
000028FE                          2789  
000028FE  43F9 00003D77           2790              LEA         dispByte, A1        ; display byte
00002904  103C 000E               2791              MOVE.B      #14, D0             ; command for trap call to display message
00002908  4E4F                    2792              TRAP        #15                 ; trap call
0000290A                          2793          
0000290A  4EB9 00002E84           2794              JSR         PrntReg             ; jump to PrntReg
00002910                          2795          
00002910  6000 E72E               2796              BRA         LOOP                ; branch back to LOOP       
00002914                          2797  
00002914                          2798  memSW   
00002914  4242                    2799              CLR         D2                  ; clear D2
00002916  1401                    2800              MOVE.B      D1,D2               ; move D1 to D2
00002918  E642                    2801              ASR         #three, D2          ; shift D2 by 3 bits to get i/r
0000291A                          2802              
0000291A  C47C 0007               2803              AND         #$07, D2            ; and D2 by 3 bits 
0000291E                          2804          
0000291E  B43C 0000               2805              CMP.B       #zero, D2           ; compare 0 to D2
00002922  6700 002E               2806              BEQ         opASWI              ; if true, branch to ASWI for immediate
00002926  B43C 0004               2807              CMP.B       #four, D2           ; compare 4 to D2 
0000292A  6700 0088               2808              BEQ         opASWR              ; if true, branch to ASWR for register
0000292E  B43C 0001               2809              CMP.B       #one, D2            ; compare 1 to D2
00002932  6700 00E2               2810              BEQ         opLSWI              ; if true, branch to LSWI for immediate
00002936  B43C 0005               2811              CMP.B       #five, D2           ; compare 5 to D2
0000293A  6700 013C               2812              BEQ         opLSWR              ; if true, branch to LSWR for register
0000293E  B43C 0003               2813              CMP.B       #three, D2          ; compare 3 to D2
00002942  6700 0196               2814              BEQ         opROWI              ; if true, branch to ROWI for immediate
00002946  B43C 0007               2815              CMP.B       #seven, D2          ; compare 7 to D2
0000294A  6700 01F0               2816              BEQ         opROWR              ; if true, branch to ROWR for register
0000294E  6000 131E               2817              BRA         printInvalid        ; otherwise invalid
00002952                          2818          
00002952                          2819  opASWI  
00002952  4242                    2820              CLR         D2                  ; clear D2
00002954  3401                    2821              MOVE.W      D1, D2              ; move word from D1 to D2
00002956  E042                    2822              ASR         #eight, D2          ; shift D2 over by 8 bits 
00002958  C47C 0001               2823              AND         #$01, D2            ; and D2 by 1 bit to get direction
0000295C                          2824      
0000295C  B43C 0000               2825              CMP.B       #zero, D2           ; compare 0 to D2
00002960  6700 000E               2826              BEQ         opASRWI             ; if true, branch to ASRWI for right
00002964  B43C 0001               2827              CMP.B       #one, D2            ; compare 1 to D2
00002968  6700 0028               2828              BEQ         opASLWI             ; if true, branch to ASLWI for left
0000296C  6000 1300               2829              BRA         printInvalid        ; otherwise invalid
00002970                          2830          
00002970                          2831  opASRWI 
00002970  43F9 00003D60           2832              LEA         ASRmatch, A1        ; we know that the opcode will be ASR, so load A1 to print message
00002976  103C 000E               2833              MOVE.B      #14, D0             ; command for trap call to display message
0000297A  4E4F                    2834              TRAP        #15                 ; trap call
0000297C                          2835  
0000297C  43F9 00003D7A           2836              LEA         dispWord, A1        ; display word
00002982  103C 000E               2837              MOVE.B      #14, D0             ; command for trap call to display message
00002986  4E4F                    2838              TRAP        #15                 ; trap call
00002988                          2839          
00002988  4EB9 00002E28           2840              JSR         PrntImm             ; jump to PrntImm
0000298E                          2841          
0000298E  6000 E6B0               2842              BRA         LOOP                ; branch back to LOOP
00002992                          2843  
00002992                          2844  opASLWI 
00002992  43F9 00003D64           2845              LEA         ASLmatch, A1        ; we know that the opcode will be ASL, so load A1 to print message
00002998  103C 000E               2846              MOVE.B      #14, D0             ; command for trap call to display message
0000299C  4E4F                    2847              TRAP        #15                 ; trap call
0000299E                          2848  
0000299E  43F9 00003D7A           2849              LEA         dispWord, A1        ; display word
000029A4  103C 000E               2850              MOVE.B      #14, D0             ; command for trap call to display message
000029A8  4E4F                    2851              TRAP        #15                 ; trap call
000029AA                          2852          
000029AA  4EB9 00002E28           2853              JSR         PrntImm             ; jump to PrntImm
000029B0                          2854          
000029B0  6000 E68E               2855              BRA         LOOP                ; branch back to LOOP
000029B4                          2856  
000029B4                          2857  opASWR  
000029B4  4242                    2858              CLR         D2                  ; clear D2
000029B6  3401                    2859              MOVE.W      D1, D2              ; move word from D1 to D2
000029B8  E042                    2860              ASR         #eight, D2          ; shift D2 over by 8 bits 
000029BA  C47C 0001               2861              AND         #$01, D2            ; and D2 by 1 bit to get direction
000029BE                          2862      
000029BE  B43C 0000               2863              CMP.B       #zero, D2           ; compare 0 to D2 
000029C2  6700 000E               2864              BEQ         opASRWR             ; if true, branch to ASRWR for right
000029C6  B43C 0001               2865              CMP.B       #one, D2            ; compare 1 to D2
000029CA  6700 0028               2866              BEQ         opASLWR             ; if true, branch to ASLWR for left
000029CE  6000 129E               2867              BRA         printInvalid        ; otherwise invalid
000029D2                          2868          
000029D2                          2869  opASRWR     
000029D2  43F9 00003D60           2870              LEA         ASRmatch, A1        ; we know that the opcode will be ASR, so load A1 to print message
000029D8  103C 000E               2871              MOVE.B      #14, D0             ; command for trap call to display message
000029DC  4E4F                    2872              TRAP        #15                 ; trap call
000029DE                          2873  
000029DE  43F9 00003D7A           2874              LEA         dispWord, A1        ; display word
000029E4  103C 000E               2875              MOVE.B      #14, D0             ; command for trap call to display message
000029E8  4E4F                    2876              TRAP        #15                 ; trap call
000029EA                          2877          
000029EA  4EB9 00002E84           2878              JSR         PrntReg             ; jump to PrntReg
000029F0                          2879          
000029F0  6000 E64E               2880              BRA         LOOP                ; branch back to LOOP
000029F4                          2881  
000029F4                          2882  opASLWR     
000029F4  43F9 00003D64           2883              LEA         ASLmatch, A1        ; we know that the opcode will be ASL, so load A1 to print message
000029FA  103C 000E               2884              MOVE.B      #14, D0             ; command for trap call to display message
000029FE  4E4F                    2885              TRAP        #15                 ; trap call
00002A00                          2886  
00002A00  43F9 00003D7A           2887              LEA         dispWord, A1        ; display word
00002A06  103C 000E               2888              MOVE.B      #14, D0             ; command for trap call to display message
00002A0A  4E4F                    2889              TRAP        #15                 ; trap call
00002A0C                          2890          
00002A0C  4EB9 00002E84           2891              JSR         PrntReg             ; jump to PrntReg
00002A12                          2892          
00002A12  6000 E62C               2893              BRA         LOOP                ; branch back to LOOP
00002A16                          2894  
00002A16                          2895  opLSWI      
00002A16  4242                    2896              CLR         D2                  ; clear D2
00002A18  3401                    2897              MOVE.W      D1, D2              ; move word from D1 to D2
00002A1A  E042                    2898              ASR         #eight, D2          ; shift D2 over by 8 bits 
00002A1C  C47C 0001               2899              AND         #$01, D2            ; and D2 by 1 bit to get direction
00002A20                          2900      
00002A20  B43C 0000               2901              CMP.B       #zero, D2           ; compare 0 to D2 
00002A24  6700 000E               2902              BEQ         opLSRWI             ; if true, branch to LSRWI for right
00002A28  B43C 0001               2903              CMP.B       #one, D2            ; compare 1 to D2
00002A2C  6700 0028               2904              BEQ         opLSLWI             ; if true, branch to LSLWI for left
00002A30  6000 123C               2905              BRA         printInvalid        ; otherwise invalid 
00002A34                          2906          
00002A34                          2907  opLSRWI 
00002A34  43F9 00003D58           2908              LEA         LSRmatch, A1        ; we know that the opcode will be LSR, so load A1 to print message
00002A3A  103C 000E               2909              MOVE.B      #14, D0             ; command for trap call to display message
00002A3E  4E4F                    2910              TRAP        #15                 ; trap call
00002A40                          2911      
00002A40  43F9 00003D7A           2912              LEA         dispWord, A1        ; display word
00002A46  103C 000E               2913              MOVE.B      #14, D0             ; command for trap call to display message
00002A4A  4E4F                    2914              TRAP        #15                 ; trap call
00002A4C                          2915          
00002A4C  4EB9 00002E28           2916              JSR         PrntImm             ; jump to PrntImm
00002A52                          2917          
00002A52  6000 E5EC               2918              BRA         LOOP                ; branch back to LOOP
00002A56                          2919              
00002A56                          2920  opLSLWI 
00002A56  43F9 00003D5C           2921              LEA         LSLmatch, A1        ; we know that the opcode will be LSL, so load A1 to print message
00002A5C  103C 000E               2922              MOVE.B      #14, D0             ; command for trap call to display message
00002A60  4E4F                    2923              TRAP        #15                 ; trap call
00002A62                          2924  
00002A62  43F9 00003D7A           2925              LEA         dispWord, A1        ; display word
00002A68  103C 000E               2926              MOVE.B      #14, D0             ; command for trap call to display message
00002A6C  4E4F                    2927              TRAP        #15                 ; trap call
00002A6E                          2928          
00002A6E  4EB9 00002E28           2929              JSR         PrntImm             ; jump to PrntImm
00002A74                          2930          
00002A74  6000 E5CA               2931              BRA         LOOP                ; branch back to LOOP
00002A78                          2932              
00002A78                          2933  opLSWR  
00002A78  4242                    2934              CLR         D2                  ; clear D2
00002A7A  3401                    2935              MOVE.W      D1, D2              ; move word from D1 to D2
00002A7C  E042                    2936              ASR         #eight, D2          ; shift D2 over by 8 bits 
00002A7E  C47C 0001               2937              AND         #$01, D2            ; and D2 by 1 bit to get direction
00002A82                          2938      
00002A82  B43C 0000               2939              CMP.B       #zero, D2           ; compare 0 to D2 
00002A86  6700 000E               2940              BEQ         opLSRWR             ; if true, branch to LSRWR for right
00002A8A  B43C 0001               2941              CMP.B       #one, D2            ; compare 1 to D2
00002A8E  6700 0028               2942              BEQ         opLSLWR             ; if true, branch to LSLWR for left
00002A92  6000 11DA               2943              BRA         printInvalid        ; otherwise invalid
00002A96                          2944          
00002A96                          2945  opLSRWR 
00002A96  43F9 00003D58           2946              LEA         LSRmatch, A1        ; we know that the opcode will be LSR, so load A1 to print message
00002A9C  103C 000E               2947              MOVE.B      #14, D0             ; command for trap call to display message
00002AA0  4E4F                    2948              TRAP        #15                 ; trap call
00002AA2                          2949  
00002AA2  43F9 00003D7A           2950              LEA         dispWord, A1        ; display word
00002AA8  103C 000E               2951              MOVE.B      #14, D0             ; command for trap call to display message
00002AAC  4E4F                    2952              TRAP        #15                 ; trap call
00002AAE                          2953          
00002AAE  4EB9 00002E84           2954              JSR         PrntReg             ; jump to PrntReg
00002AB4                          2955          
00002AB4  6000 E58A               2956              BRA         LOOP                ; branch back to LOOP
00002AB8                          2957          
00002AB8                          2958  opLSLWR 
00002AB8  43F9 00003D5C           2959              LEA         LSLmatch, A1        ; we know that the opcode will be LSL, so load A1 to print message
00002ABE  103C 000E               2960              MOVE.B      #14, D0             ; command for trap call to display message
00002AC2  4E4F                    2961              TRAP        #15                 ; trap call
00002AC4                          2962  
00002AC4  43F9 00003D7A           2963              LEA         dispWord, A1        ; display word
00002ACA  103C 000E               2964              MOVE.B      #14, D0             ; command for trap call to display message
00002ACE  4E4F                    2965              TRAP        #15                 ; trap call
00002AD0                          2966          
00002AD0  4EB9 00002E84           2967              JSR         PrntReg             ; jump to PrntReg
00002AD6                          2968          
00002AD6  6000 E568               2969              BRA         LOOP                ; branch back to LOOP
00002ADA                          2970  
00002ADA                          2971  opROWI  
00002ADA  4242                    2972              CLR         D2                  ; clear D2
00002ADC  3401                    2973              MOVE.W      D1, D2              ; move word from D1 to D2
00002ADE  E042                    2974              ASR         #eight, D2          ; shift D2 over by 8 bits 
00002AE0  C47C 0001               2975              AND         #$01, D2            ; and D2 by 1 bit to get direction
00002AE4                          2976      
00002AE4  B43C 0000               2977              CMP.B       #zero, D2           ; compare 0 to D2
00002AE8  6700 000E               2978              BEQ         opRORWI             ; if true, branch to RORWI for right
00002AEC  B43C 0001               2979              CMP.B       #one, D2            ; compare 1 to D2
00002AF0  6700 0028               2980              BEQ         opROLWI             ; if true, branch to ROLWI for left
00002AF4  6000 1178               2981              BRA         printInvalid        ; otherwise invalid
00002AF8                          2982          
00002AF8                          2983  opRORWI 
00002AF8  43F9 00003D68           2984              LEA         RORmatch, A1        ; we know that the opcode will be ROR, so load A1 to print message
00002AFE  103C 000E               2985              MOVE.B      #14, D0             ; command for trap call to display message
00002B02  4E4F                    2986              TRAP        #15                 ; trap call
00002B04                          2987  
00002B04  43F9 00003D7A           2988              LEA         dispWord, A1        ; display word
00002B0A  103C 000E               2989              MOVE.B      #14, D0             ; command for trap call to display message
00002B0E  4E4F                    2990              TRAP        #15                 ; trap call
00002B10                          2991          
00002B10  4EB9 00002E28           2992              JSR         PrntImm             ; jump to PrntImm
00002B16                          2993          
00002B16  6000 E528               2994              BRA         LOOP                ; branch back to LOOP
00002B1A                          2995  
00002B1A                          2996  opROLWI     
00002B1A  43F9 00003D6C           2997              LEA         ROLmatch, A1        ; we know that the opcode will be ROL, so load A1 to print message
00002B20                          2998          
00002B20  103C 000E               2999              MOVE.B      #14, D0             ; command for trap call to display message
00002B24  4E4F                    3000              TRAP        #15                 ; trap call
00002B26                          3001  
00002B26  43F9 00003D7A           3002              LEA         dispWord, A1        ; display word
00002B2C  103C 000E               3003              MOVE.B      #14, D0             ; command for trap call to display message
00002B30  4E4F                    3004              TRAP        #15                 ; trap call
00002B32                          3005          
00002B32  4EB9 00002E28           3006              JSR         PrntImm             ; jump to PrntImm
00002B38                          3007          
00002B38  6000 E506               3008              BRA         LOOP                ; branch back to LOOP
00002B3C                          3009  
00002B3C                          3010  opROWR      
00002B3C  4242                    3011              CLR         D2                  ; clear D2
00002B3E  3401                    3012              MOVE.W      D1, D2              ; move word from D1 to D2
00002B40  E042                    3013              ASR         #eight, D2          ; shift D2 over by 8 bits 
00002B42  C47C 0001               3014              AND         #$01, D2            ; and D2 by 1 bit to get direction
00002B46                          3015      
00002B46  B43C 0000               3016              CMP.B       #zero, D2           ; compare 0 to D2 
00002B4A  6700 000E               3017              BEQ         opRORWR             ; if true, branch to RORWR for right
00002B4E  B43C 0001               3018              CMP.B       #one, D2            ; compare 1 to D2
00002B52  6700 0028               3019              BEQ         opROLWR             ; if true, branch to ROLWR for left
00002B56  6000 1116               3020              BRA         printInvalid        ; otherwise invalid     
00002B5A                          3021          
00002B5A                          3022  opRORWR 
00002B5A  43F9 00003D68           3023              LEA         RORmatch, A1        ; we know that the opcode will be ROR, so load A1 to print message
00002B60  103C 000E               3024              MOVE.B      #14, D0             ; command for trap call to display message
00002B64  4E4F                    3025              TRAP        #15                 ; trap call
00002B66                          3026      
00002B66  43F9 00003D7A           3027              LEA         dispWord, A1        ; display word
00002B6C  103C 000E               3028              MOVE.B      #14, D0             ; command for trap call to display message
00002B70  4E4F                    3029              TRAP        #15                 ; trap call
00002B72                          3030          
00002B72  4EB9 00002E84           3031              JSR         PrntReg             ; jump to PrntReg
00002B78                          3032          
00002B78  6000 E4C6               3033              BRA         LOOP                ; branch back to LOOP
00002B7C                          3034  
00002B7C                          3035  opROLWR 
00002B7C  43F9 00003D6C           3036              LEA         ROLmatch, A1        ; we know that the opcode will be ROL, so load A1 to print message
00002B82  103C 000E               3037              MOVE.B      #14, D0             ; command for trap call to display message
00002B86  4E4F                    3038              TRAP        #15                 ; trap call
00002B88                          3039  
00002B88  43F9 00003D7A           3040              LEA         dispWord, A1        ; display word
00002B8E  103C 000E               3041              MOVE.B      #14, D0             ; command for trap call to display message
00002B92  4E4F                    3042              TRAP        #15                 ; trap call
00002B94                          3043          
00002B94  4EB9 00002E84           3044              JSR         PrntReg             ; jump to PrntReg
00002B9A                          3045          
00002B9A  6000 E4A4               3046              BRA         LOOP                ; branch back to LOOP
00002B9E                          3047  
00002B9E                          3048  memSL   
00002B9E  4242                    3049              CLR         D2                  ; clear D2
00002BA0  1401                    3050              MOVE.B      D1,D2               ; move D1 to D2
00002BA2  E642                    3051              ASR         #three, D2          ; shift D2 by 3 bits to get i/r
00002BA4                          3052              
00002BA4  C47C 0007               3053              AND         #$07, D2            ; and D2 by 3 bits 
00002BA8                          3054          
00002BA8  B43C 0000               3055              CMP.B       #zero, D2           ; compare 0 to D2
00002BAC  6700 002E               3056              BEQ         opASLI              ; if true, branch to ASLI for immediate
00002BB0  B43C 0004               3057              CMP.B       #four, D2           ; compare 4 to D2 
00002BB4  6700 0088               3058              BEQ         opASLR              ; if true, branch to ASLR for register
00002BB8  B43C 0001               3059              CMP.B       #one, D2            ; compare 1 to D2
00002BBC  6700 00E2               3060              BEQ         opLSLI              ; if true, branch to LSLI for immediate
00002BC0  B43C 0005               3061              CMP.B       #five, D2           ; compare 5 to D2
00002BC4  6700 013C               3062              BEQ         opLSLR              ; if true, branch to LSLR for register
00002BC8  B43C 0003               3063              CMP.B       #three, D2          ; compare 3 to D2
00002BCC  6700 0196               3064              BEQ         opROLI              ; if true, branch to ROLI for immediate
00002BD0  B43C 0007               3065              CMP.B       #seven, D2          ; compare 7 to D2
00002BD4  6700 01F0               3066              BEQ         opROLR              ; if true, branch to ROLR for register
00002BD8  6000 1094               3067              BRA         printInvalid        ; otherwise invalid
00002BDC                          3068          
00002BDC                          3069  opASLI  
00002BDC  4242                    3070              CLR         D2                  ; clear D2
00002BDE  3401                    3071              MOVE.W      D1, D2              ; move word from D1 to D2
00002BE0  E042                    3072              ASR         #eight, D2          ; shift D2 over by 8 bits 
00002BE2  C47C 0001               3073              AND         #$01, D2            ; and D2 by 1 bit to get direction
00002BE6                          3074      
00002BE6  B43C 0000               3075              CMP.B       #zero, D2           ; compare 0 to D2
00002BEA  6700 000E               3076              BEQ         opASRLI             ; if true, branch to ASRLI for right
00002BEE  B43C 0001               3077              CMP.B       #one, D2            ; compare 1 to D2
00002BF2  6700 0028               3078              BEQ         opASLLI             ; if true, branch to ASLLI for left
00002BF6  6000 1076               3079              BRA         printInvalid        ; otherwise invalid
00002BFA                          3080          
00002BFA                          3081  opASRLI 
00002BFA  43F9 00003D60           3082              LEA         ASRmatch, A1        ; we know that the opcode will be ASR, so load A1 to print message
00002C00  103C 000E               3083              MOVE.B      #14, D0             ; command for trap call to display message
00002C04  4E4F                    3084              TRAP        #15                 ; trap call
00002C06                          3085  
00002C06  43F9 00003D7D           3086              LEA         dispLong, A1        ; display long
00002C0C  103C 000E               3087              MOVE.B      #14, D0             ; command for trap call to display message
00002C10  4E4F                    3088              TRAP        #15                 ; trap call
00002C12                          3089          
00002C12  4EB9 00002E28           3090              JSR         PrntImm             ; jump to PrntImm
00002C18                          3091          
00002C18  6000 E426               3092              BRA         LOOP                ; branch back to LOOP
00002C1C                          3093  
00002C1C                          3094  opASLLI 
00002C1C  43F9 00003D64           3095              LEA         ASLmatch, A1        ; we know that the opcode will be ASL, so load A1 to print message
00002C22  103C 000E               3096              MOVE.B      #14, D0             ; command for trap call to display message
00002C26  4E4F                    3097              TRAP        #15                 ; trap call
00002C28                          3098  
00002C28  43F9 00003D7D           3099              LEA         dispLong, A1        ; display long
00002C2E  103C 000E               3100              MOVE.B      #14, D0             ; command for trap call to display message
00002C32  4E4F                    3101              TRAP        #15                 ; trap call
00002C34                          3102          
00002C34  4EB9 00002E28           3103              JSR         PrntImm             ; jump to PrntImm
00002C3A                          3104          
00002C3A  6000 E404               3105              BRA         LOOP                ; branch back to LOOP
00002C3E                          3106  
00002C3E                          3107  opASLR  
00002C3E  4242                    3108              CLR         D2                  ; clear D2
00002C40  3401                    3109              MOVE.W      D1, D2              ; move word from D1 to D2
00002C42  E042                    3110              ASR         #eight, D2          ; shift D2 over by 8 bits 
00002C44  C47C 0001               3111              AND         #$01, D2            ; and D2 by 1 bit to get direction
00002C48                          3112      
00002C48  B43C 0000               3113              CMP.B       #zero, D2           ; compare 0 to D2 
00002C4C  6700 000E               3114              BEQ         opASRLR             ; if true, branch to ASRLR for right
00002C50  B43C 0001               3115              CMP.B       #one, D2            ; compare 1 to D2
00002C54  6700 0028               3116              BEQ         opASLLR             ; if true, branch to ASLLR for left
00002C58  6000 1014               3117              BRA         printInvalid        ; otherwise invalid 
00002C5C                          3118          
00002C5C                          3119  opASRLR 
00002C5C  43F9 00003D60           3120              LEA         ASRmatch, A1        ; we know that the opcode will be ASR, so load A1 to print message
00002C62  103C 000E               3121              MOVE.B      #14, D0             ; command for trap call to display message
00002C66  4E4F                    3122              TRAP        #15                 ; trap call
00002C68                          3123  
00002C68  43F9 00003D7D           3124              LEA         dispLong, A1        ; display long
00002C6E  103C 000E               3125              MOVE.B      #14, D0             ; command for trap call to display message
00002C72  4E4F                    3126              TRAP        #15                 ; trap call
00002C74                          3127          
00002C74  4EB9 00002E84           3128              JSR         PrntReg             ; jump to PrntReg
00002C7A                          3129          
00002C7A  6000 E3C4               3130              BRA         LOOP                ; branch back to LOOP
00002C7E                          3131  
00002C7E                          3132  opASLLR 
00002C7E  43F9 00003D64           3133              LEA         ASLmatch, A1        ; we know that the opcode will be ASL, so load A1 to print message
00002C84  103C 000E               3134              MOVE.B      #14, D0             ; command for trap call to display message
00002C88  4E4F                    3135              TRAP        #15                 ; trap call
00002C8A                          3136  
00002C8A  43F9 00003D7D           3137              LEA         dispLong, A1        ; display long
00002C90  103C 000E               3138              MOVE.B      #14, D0             ; command for trap call to display message
00002C94  4E4F                    3139              TRAP        #15                 ; trap call
00002C96                          3140          
00002C96  4EB9 00002E84           3141              JSR         PrntReg             ; jump to PrntReg
00002C9C                          3142          
00002C9C  6000 E3A2               3143              BRA         LOOP                ; branch back to LOOP
00002CA0                          3144  
00002CA0                          3145  opLSLI  
00002CA0  4242                    3146              CLR         D2                  ; clear D2
00002CA2  3401                    3147              MOVE.W      D1, D2              ; move word from D1 to D2
00002CA4  E042                    3148              ASR         #eight, D2          ; shift D2 over by 8 bits 
00002CA6  C47C 0001               3149              AND         #$01, D2            ; and D2 by 1 bit to get direction
00002CAA                          3150      
00002CAA  B43C 0000               3151              CMP.B       #zero, D2           ; compare 0 to D2 
00002CAE  6700 000E               3152              BEQ         opLSRLI             ; if true, branch to LSRLI for right
00002CB2  B43C 0001               3153              CMP.B       #one, D2            ; compare 1 to D2
00002CB6  6700 0028               3154              BEQ         opLSLLI             ; if true, branch to LSLLI for left
00002CBA  6000 0FB2               3155              BRA         printInvalid        ; otherwise invalid  
00002CBE                          3156          
00002CBE                          3157  opLSRLI 
00002CBE  43F9 00003D58           3158              LEA         LSRmatch, A1        ; we know that the opcode will be LSR, so load A1 to print message
00002CC4  103C 000E               3159              MOVE.B      #14, D0             ; command for trap call to display message
00002CC8  4E4F                    3160              TRAP        #15                 ; trap call
00002CCA                          3161  
00002CCA  43F9 00003D7D           3162              LEA         dispLong, A1        ; display long
00002CD0  103C 000E               3163              MOVE.B      #14, D0             ; command for trap call to display message
00002CD4  4E4F                    3164              TRAP        #15                 ; trap call
00002CD6                          3165          
00002CD6  4EB9 00002E28           3166              JSR         PrntImm             ; jump to PrntImm
00002CDC                          3167          
00002CDC  6000 E362               3168              BRA         LOOP                ; branch back to LOOP
00002CE0                          3169  
00002CE0                          3170  
00002CE0                          3171  opLSLLI 
00002CE0  43F9 00003D5C           3172              LEA         LSLmatch, A1        ; we know that the opcode will be LSL, so load A1 to print message
00002CE6  103C 000E               3173              MOVE.B      #14, D0             ; command for trap call to display message
00002CEA  4E4F                    3174              TRAP        #15                 ; trap call
00002CEC                          3175  
00002CEC  43F9 00003D7D           3176              LEA         dispLong, A1        ; display long
00002CF2  103C 000E               3177              MOVE.B      #14, D0             ; command for trap call to display message
00002CF6  4E4F                    3178              TRAP        #15                 ; trap call
00002CF8                          3179          
00002CF8  4EB9 00002E28           3180              JSR         PrntImm             ; jump to PrntImm
00002CFE                          3181          
00002CFE  6000 E340               3182              BRA         LOOP                ; branch back to LOOP
00002D02                          3183  
00002D02                          3184  opLSLR  
00002D02  4242                    3185              CLR         D2                  ; clear D2
00002D04  3401                    3186              MOVE.W      D1, D2              ; move word from D1 to D2
00002D06  E042                    3187              ASR         #eight, D2          ; shift D2 over by 8 bits 
00002D08  C47C 0001               3188              AND         #$01, D2            ; and D2 by 1 bit to get direction
00002D0C                          3189      
00002D0C  B43C 0000               3190              CMP.B       #zero, D2           ; compare 0 to D2 
00002D10  6700 000E               3191              BEQ         opLSRLR             ; if true, branch to LSRLR for right
00002D14  B43C 0001               3192              CMP.B       #one, D2            ; compare 1 to D2
00002D18  6700 0028               3193              BEQ         opLSLLR             ; if true, branch to LSLLR for left
00002D1C  6000 0F50               3194              BRA         printInvalid        ; otherwise invalid
00002D20                          3195          
00002D20                          3196  opLSRLR 
00002D20  43F9 00003D58           3197              LEA         LSRmatch, A1        ; we know that the opcode will be LSR, so load A1 to print message
00002D26  103C 000E               3198              MOVE.B      #14, D0             ; command for trap call to display message
00002D2A  4E4F                    3199              TRAP        #15                 ; trap call
00002D2C                          3200  
00002D2C  43F9 00003D7D           3201              LEA         dispLong, A1        ; display long
00002D32  103C 000E               3202              MOVE.B      #14, D0             ; command for trap call to display message
00002D36  4E4F                    3203              TRAP        #15                 ; trap call
00002D38                          3204          
00002D38  4EB9 00002E84           3205              JSR         PrntReg             ; jump to PrntReg
00002D3E                          3206          
00002D3E  6000 E300               3207              BRA         LOOP                ; branch back to LOOP
00002D42                          3208          
00002D42                          3209  opLSLLR 
00002D42  43F9 00003D5C           3210              LEA         LSLmatch, A1        ; we know that the opcode will be LSL, so load A1 to print message
00002D48  103C 000E               3211              MOVE.B      #14, D0             ; command for trap call to display message
00002D4C  4E4F                    3212              TRAP        #15                 ; trap call
00002D4E                          3213  
00002D4E  43F9 00003D7D           3214              LEA         dispLong, A1        ; display long
00002D54  103C 000E               3215              MOVE.B      #14, D0             ; command for trap call to display message
00002D58  4E4F                    3216              TRAP        #15                 ; trap call
00002D5A                          3217          
00002D5A  4EB9 00002E84           3218              JSR         PrntReg             ; jump to PrntReg
00002D60                          3219          
00002D60  6000 E2DE               3220              BRA         LOOP                ; branch back to LOOP
00002D64                          3221              
00002D64                          3222  opROLI  
00002D64  4242                    3223              CLR         D2                  ; clear D2
00002D66  3401                    3224              MOVE.W      D1, D2              ; move word from D1 to D2
00002D68  E042                    3225              ASR         #eight, D2          ; shift D2 over by 8 bits 
00002D6A  C47C 0001               3226              AND         #$01, D2            ; and D2 by 1 bit to get direction
00002D6E                          3227      
00002D6E  B43C 0000               3228              CMP.B       #zero, D2           ; compare 0 to D2
00002D72  6700 000E               3229              BEQ         opRORLI             ; if true, branch to RORLI for right
00002D76  B43C 0001               3230              CMP.B       #one, D2            ; compare 1 to D2
00002D7A  6700 0028               3231              BEQ         opROLLI             ; if true, branch to ROLLI for left
00002D7E  6000 0EEE               3232              BRA         printInvalid        ; otherwise invalid
00002D82                          3233          
00002D82                          3234  opRORLI 
00002D82  43F9 00003D68           3235              LEA         RORmatch, A1        ; we know that the opcode will be ROR, so load A1 to print message
00002D88  103C 000E               3236              MOVE.B      #14, D0             ; command for trap call to display message
00002D8C  4E4F                    3237              TRAP        #15                 ; trap call
00002D8E                          3238  
00002D8E  43F9 00003D7D           3239              LEA         dispLong, A1        ; display long
00002D94  103C 000E               3240              MOVE.B      #14, D0             ; command for trap call to display message
00002D98  4E4F                    3241              TRAP        #15                 ; trap call
00002D9A                          3242          
00002D9A  4EB9 00002E28           3243              JSR         PrntImm             ; jump to PrntImm
00002DA0                          3244          
00002DA0  6000 E29E               3245              BRA         LOOP                ; branch back to LOOP
00002DA4                          3246  
00002DA4                          3247  opROLLI 
00002DA4  43F9 00003D6C           3248              LEA         ROLmatch, A1        ; we know that the opcode will be ROL, so load A1 to print message
00002DAA  103C 000E               3249              MOVE.B      #14, D0             ; command for trap call to display message
00002DAE  4E4F                    3250              TRAP        #15                 ; trap call
00002DB0                          3251  
00002DB0  43F9 00003D7D           3252              LEA         dispLong, A1        ; display long
00002DB6  103C 000E               3253              MOVE.B      #14, D0             ; command for trap call to display message
00002DBA  4E4F                    3254              TRAP        #15                 ; trap call
00002DBC                          3255          
00002DBC  4EB9 00002E28           3256              JSR         PrntImm             ; jump to PrntImm
00002DC2                          3257          
00002DC2  6000 E27C               3258              BRA         LOOP                ; branch back to LOOP
00002DC6                          3259  
00002DC6                          3260  opROLR  
00002DC6  4242                    3261              CLR         D2                  ; clear D2
00002DC8  3401                    3262              MOVE.W      D1, D2              ; move word from D1 to D2
00002DCA  E042                    3263              ASR         #eight, D2          ; shift D2 over by 8 bits 
00002DCC  C47C 0001               3264              AND         #$01, D2            ; and D2 by 1 bit to get direction
00002DD0                          3265      
00002DD0  B43C 0000               3266              CMP.B       #zero, D2           ; compare 0 to D2 
00002DD4  6700 000E               3267              BEQ         opRORLR             ; if true, branch to RORLR for right
00002DD8  B43C 0001               3268              CMP.B       #one, D2            ; compare 1 to D2
00002DDC  6700 0028               3269              BEQ         opROLLR             ; if true, branch to ROLLR for left
00002DE0  6000 0E8C               3270              BRA         printInvalid        ; otherwise invalid     
00002DE4                          3271          
00002DE4                          3272  opRORLR 
00002DE4  43F9 00003D68           3273              LEA         RORmatch, A1        ; we know that the opcode will be ROR, so load A1 to print message
00002DEA  103C 000E               3274              MOVE.B      #14, D0             ; command for trap call to display message
00002DEE  4E4F                    3275              TRAP        #15                 ; trap call
00002DF0                          3276  
00002DF0  43F9 00003D7D           3277              LEA         dispLong, A1        ; display long
00002DF6  103C 000E               3278              MOVE.B      #14, D0             ; command for trap call to display message
00002DFA  4E4F                    3279              TRAP        #15                 ; trap call
00002DFC                          3280          
00002DFC  4EB9 00002E84           3281              JSR         PrntReg             ; jump to PrntReg
00002E02                          3282          
00002E02  6000 E23C               3283              BRA         LOOP                ; branch back to LOOP
00002E06                          3284  
00002E06                          3285  opROLLR     
00002E06  43F9 00003D6C           3286              LEA         ROLmatch, A1        ; we know that the opcode will be ROL, so load A1 to print message
00002E0C  103C 000E               3287              MOVE.B      #14, D0             ; command for trap call to display message
00002E10  4E4F                    3288              TRAP        #15                 ; trap call
00002E12                          3289      
00002E12  43F9 00003D7D           3290              LEA         dispLong, A1        ; display long
00002E18  103C 000E               3291              MOVE.B      #14, D0             ; command for trap call to display message
00002E1C  4E4F                    3292              TRAP        #15                 ; trap call
00002E1E                          3293          
00002E1E  4EB9 00002E84           3294              JSR         PrntReg             ; jump to PrntReg
00002E24                          3295          
00002E24  6000 E21A               3296              BRA         LOOP                ; branch back to LOOP
00002E28                          3297          
00002E28                          3298  ***********************************************************************************************************
00002E28                          3299  *                       Immediate Data Subroutine Part 1
00002E28                          3300  *
00002E28                          3301  * The following subroutine displays the immediate number to shift and the data register that is being shifted. 
00002E28                          3302  * This subroutine calls two printing immediate subroutine first, the the ea print subroutine.        
00002E28                          3303  *
00002E28                          3304  ***********************************************************************************************************
00002E28                          3305  
00002E28                          3306  PrntImm 
00002E28  48E7 FF7E               3307              MOVEM.L     D0-D7/A1-A6, -(SP)  ; callee saved registers
00002E2C                          3308              
00002E2C  43F9 00003CDD           3309              LEA         space, A1           ; display space
00002E32  103C 000E               3310              MOVE.B      #14, D0             ; command for trap call to display message
00002E36  4E4F                    3311              TRAP        #15                 ; trap call
00002E38                          3312              
00002E38  43F9 00003CE0           3313              LEA         hashTag, A1         ; display #
00002E3E  103C 000E               3314              MOVE.B      #14, D0             ; command for trap call to display message
00002E42  4E4F                    3315              TRAP        #15                 ; trap call
00002E44                          3316              
00002E44  4242                    3317              CLR         D2                  ; clear D2
00002E46  3401                    3318              MOVE.W      D1, D2              ; move word from D1 to D2
00002E48  E042                    3319              ASR         #eight, D2          ; shift D2 by 8 bits
00002E4A  E242                    3320              ASR         #one, D2            ; shift D2 by one bit
00002E4C  C47C 0007               3321              AND         #$07, D2            ; and D2 to get just first 3 bits
00002E50                          3322          
00002E50  4EB9 00002ED6           3323              JSR         MemShiftImm         ; jump to MemShiftImm
00002E56                          3324          
00002E56  43F9 00003CE4           3325              LEA         comma, A1           ; display comma
00002E5C  103C 000E               3326              MOVE.B      #14, D0             ; command for trap call to display message
00002E60  4E4F                    3327              TRAP        #15                 ; trap call
00002E62                          3328          
00002E62  4242                    3329              CLR         D2                  ; clear D2 since destination mode must be data register
00002E64  4243                    3330              CLR         D3                  ; clear D3 to get register
00002E66  1601                    3331              MOVE.B      D1,D3               ; move byte from D1 to D3
00002E68  C67C 0007               3332              AND         #$07, D3            ; and D3 to get first 3 bits only
00002E6C                          3333          
00002E6C  4EB9 00002F00           3334              JSR         printEA             ; jump to printEA
00002E72                          3335          
00002E72  43F9 00003CD9           3336              LEA         newLine, A1         ; create new line
00002E78  103C 000E               3337              MOVE.B      #14, D0             ; command for trap call to display message
00002E7C  4E4F                    3338              TRAP        #15                 ; trap call
00002E7E                          3339          
00002E7E  4CDF 7EFF               3340              MOVEM.L     (SP)+, D0-D7/A1-A6  ; pop saved registers from stack
00002E82  4E75                    3341              RTS                             ; return
00002E84                          3342              
00002E84                          3343  ***********************************************************************************************************
00002E84                          3344  *
00002E84                          3345  *                       Shifting Helping Function
00002E84                          3346  *
00002E84                          3347  * The following subroutine determines the correct data register to display, and sets the values of D2 and 
00002E84                          3348  *       D3 accordingly to display the data register.
00002E84                          3349  * after setting the values, it calls another subroutine to actually display the data register.        
00002E84                          3350  *
00002E84                          3351  ***********************************************************************************************************
00002E84                          3352  
00002E84                          3353  PrntReg     
00002E84  48E7 FF7E               3354              MOVEM.L     D0-D7/A1-A6, -(SP)  ; callee saved
00002E88                          3355          
00002E88  43F9 00003CDD           3356              LEA         space, A1           ; display space
00002E8E  103C 000E               3357              MOVE.B      #14, D0             ; command for trap call to display message
00002E92  4E4F                    3358              TRAP        #15                 ; trap call
00002E94                          3359          
00002E94  4242                    3360              CLR         D2                  ; clear D2
00002E96  4243                    3361              CLR         D3                  ; clear D3
00002E98  3601                    3362              MOVE.W      D1, D3              ; move word from D1 to D3
00002E9A  E043                    3363              ASR         #eight, D3          ; shift D3 by 8 bits
00002E9C  E243                    3364              ASR         #one, D3            ; shift D3 by 1 bit
00002E9E  C67C 0007               3365              AND         #$07, D3            ; and D3 to get first 3 bits only
00002EA2                          3366          
00002EA2  4EB9 00002F00           3367              JSR         printEA
00002EA8                          3368          
00002EA8  43F9 00003CE4           3369              LEA         comma, A1           ; display comma
00002EAE  103C 000E               3370              MOVE.B      #14, D0             ; command for trap call to display message
00002EB2  4E4F                    3371              TRAP        #15                 ; trap call
00002EB4                          3372          
00002EB4  4242                    3373              CLR         D2                  ; clear D2
00002EB6  4243                    3374              CLR         D3                  ; clear D3
00002EB8  1601                    3375              MOVE.B      D1,D3               ; move byte from D1 to D3
00002EBA  C67C 0007               3376              AND         #$07, D3            ; and D3 to get first 3 bits only
00002EBE                          3377          
00002EBE  4EB9 00002F00           3378              JSR         printEA             ; jump to printEA
00002EC4                          3379          
00002EC4  43F9 00003CD9           3380              LEA         newLine, A1         ; newline
00002ECA  103C 000E               3381              MOVE.B      #14, D0             ; command for trap call to display message
00002ECE  4E4F                    3382              TRAP        #15                 ; trap call
00002ED0                          3383          
00002ED0  4CDF 7EFF               3384              MOVEM.L     (SP)+, D0-D7/A1-A6  ; pop saved registers from stack
00002ED4  4E75                    3385              RTS                             ; return
00002ED6                          3386  
00002ED6                          3387  ***********************************************************************************************************
00002ED6                          3388  *
00002ED6                          3389  *                       Immediate Data Subroutine Part 2
00002ED6                          3390  *
00002ED6                          3391  * The following subroutine is used to display the number between 1-8 for the bit vount for the shift/rotate opcode
00002ED6                          3392  * It displays it by storing the appropriate number in D1 and running trap task 3.
00002ED6                          3393  *
00002ED6                          3394  ***********************************************************************************************************
00002ED6                          3395  
00002ED6                          3396  MemShiftImm     
00002ED6  48E7 FF7E               3397              MOVEM.L     D0-D7/A1-A6, -(SP)  ; caller saved data
00002EDA  4241                    3398              CLR         D1                  ; clear D1
00002EDC                          3399                 
00002EDC  1202                    3400              MOVE.B      D2, D1              ; move byte from D2 to D1
00002EDE  B23C 0000               3401              CMP.B       #zero, D1           ; compare 0 to D1
00002EE2  6700 000C               3402              BEQ         displayEight        ; if true, branch to displayEight
00002EE6                          3403                  
00002EE6  103C 0003               3404              MOVE.B      #3, D0              ; trap task command to display decimal
00002EEA  4E4F                    3405              TRAP        #15                 ; trap call
00002EEC  6000 000C               3406              BRA         endSubroutine       ; branch to endSubroutine
00002EF0                          3407                  
00002EF0                          3408  displayEight    
00002EF0  123C 0008               3409              MOVE.B      #$08, D1            ; move 8 to D1
00002EF4  103C 0003               3410              MOVE.B      #3, D0              ; trap task command to display decimal
00002EF8  4E4F                    3411              TRAP        #15                 ; trap call
00002EFA                          3412              
00002EFA                          3413  endSubroutine
00002EFA  4CDF 7EFF               3414              MOVEM.L     (SP)+, D0-D7/A1-A6  ; pop saved registers from stack
00002EFE  4E75                    3415              RTS                             ; return
00002F00                          3416          
00002F00                          3417  ***********************************************************************************************************
00002F00                          3418  *
00002F00                          3419  *                       EA Print Subroutine
00002F00                          3420  *
00002F00                          3421  ***********************************************************************************************************
00002F00                          3422  
00002F00                          3423  printEA     
00002F00  48E7 FF7E               3424              MOVEM.L  D0-D7/A1-A6, -(SP)
00002F04                          3425  
00002F04  B43C 0000               3426              CMP.B       #zero, D2
00002F08  6700 002E               3427              BEQ         pDataReg
00002F0C  B43C 0001               3428              CMP.B       #one, D2
00002F10  6700 00E6               3429              BEQ         pAddrReg
00002F14  B43C 0002               3430              CMP.B       #two, D2
00002F18  6700 019E               3431              BEQ         pAddrDir
00002F1C  B43C 0003               3432              CMP.B       #three, D2
00002F20  6700 02C2               3433              BEQ         pAddrPost
00002F24  B43C 0004               3434              CMP.B       #four, D2
00002F28  6700 0446               3435              BEQ         pAddrDec
00002F2C  B43C 0007               3436              CMP.B       #seven, D2
00002F30  6700 0576               3437              BEQ         pHex
00002F34  6000 0642               3438              BRA         invalid
00002F38                          3439  
00002F38                          3440  ***********************************************************************************************************
00002F38                          3441  * Data Register        
00002F38                          3442  pDataReg    
00002F38  B63C 0000               3443              CMP.B       #zero,D3
00002F3C  6700 003A               3444              BEQ         displayD0
00002F40  B63C 0001               3445              CMP.B       #one,D3
00002F44  6700 0042               3446              BEQ         displayD1
00002F48  B63C 0002               3447              CMP.B       #two,D3
00002F4C  6700 004A               3448              BEQ         displayD2
00002F50  B63C 0003               3449              CMP.B       #three,D3
00002F54  6700 0052               3450              BEQ         displayD3
00002F58  B63C 0004               3451              CMP.B       #four,D3
00002F5C  6700 005A               3452              BEQ         displayD4
00002F60  B63C 0005               3453              CMP.B       #five,D3
00002F64  6700 0062               3454              BEQ         displayD5
00002F68  B63C 0006               3455              CMP.B       #six,D3
00002F6C  6700 006A               3456              BEQ         displayD6
00002F70  B63C 0007               3457              CMP.B       #seven,D3
00002F74  6700 0072               3458              BEQ         displayD7
00002F78                          3459              
00002F78  43F9 00003D9A           3460  displayD0   LEA         dispD0, A1          ; Display space
00002F7E  103C 000E               3461              MOVE.B      #14, D0             ; command for trap call to display message
00002F82  4E4F                    3462              TRAP        #15                 ; trap call
00002F84  6000 05F6               3463              BRA         endSUB              ; go to the end of the subroutine
00002F88                          3464              
00002F88  43F9 00003D9D           3465  displayD1   LEA         dispD1, A1          ; Display space
00002F8E  103C 000E               3466              MOVE.B      #14, D0             ; command for trap call to display message
00002F92  4E4F                    3467              TRAP        #15                 ; trap call
00002F94  6000 05E6               3468              BRA         endSUB              ; go to the end of the subroutine
00002F98                          3469  
00002F98  43F9 00003DA0           3470  displayD2   LEA         dispD2, A1          ; Display space
00002F9E  103C 000E               3471              MOVE.B      #14, D0             ; command for trap call to display message
00002FA2  4E4F                    3472              TRAP        #15                 ; trap call
00002FA4  6000 05D6               3473              BRA         endSUB              ; go to the end of the subroutine
00002FA8                          3474  
00002FA8  43F9 00003DA3           3475  displayD3   LEA         dispD3, A1          ; Display space
00002FAE  103C 000E               3476              MOVE.B      #14, D0             ; command for trap call to display message
00002FB2  4E4F                    3477              TRAP        #15                 ; trap call
00002FB4  6000 05C6               3478              BRA         endSUB              ; go to the end of the subroutine
00002FB8                          3479  
00002FB8  43F9 00003DA6           3480  displayD4   LEA         dispD4, A1          ; Display space
00002FBE  103C 000E               3481              MOVE.B      #14, D0             ; command for trap call to display message
00002FC2  4E4F                    3482              TRAP        #15                 ; trap call
00002FC4  6000 05B6               3483              BRA         endSUB              ; go to the end of the subroutine
00002FC8                          3484  
00002FC8  43F9 00003DA9           3485  displayD5   LEA         dispD5, A1          ; Display space
00002FCE  103C 000E               3486              MOVE.B      #14, D0             ; command for trap call to display message
00002FD2  4E4F                    3487              TRAP        #15                 ; trap call
00002FD4  6000 05A6               3488              BRA         endSUB              ; go to the end of the subroutine
00002FD8                          3489  
00002FD8  43F9 00003DAC           3490  displayD6   LEA         dispD6, A1          ; Display space
00002FDE  103C 000E               3491              MOVE.B      #14, D0             ; command for trap call to display message
00002FE2  4E4F                    3492              TRAP        #15                 ; trap call
00002FE4  6000 0596               3493              BRA         endSUB              ; go to the end of the subroutine
00002FE8                          3494  
00002FE8  43F9 00003DAF           3495  displayD7   LEA         dispD7, A1          ; Display space
00002FEE  103C 000E               3496              MOVE.B      #14, D0             ; command for trap call to display message
00002FF2  4E4F                    3497              TRAP        #15                 ; trap call
00002FF4  6000 0586               3498              BRA         endSUB              ; go to the end of the subroutine
00002FF8                          3499              
00002FF8                          3500  ***********************************************************************************************************
00002FF8                          3501  * Address Register
00002FF8                          3502  
00002FF8  B63C 0000               3503  pAddrReg    CMP.B       #zero,D3
00002FFC  6700 003A               3504              BEQ         displayA0
00003000  B63C 0001               3505              CMP.B       #one,D3
00003004  6700 0042               3506              BEQ         displayA1
00003008  B63C 0002               3507              CMP.B       #two,D3
0000300C  6700 004A               3508              BEQ         displayA2
00003010  B63C 0003               3509              CMP.B       #three,D3
00003014  6700 0052               3510              BEQ         displayA3
00003018  B63C 0004               3511              CMP.B       #four,D3
0000301C  6700 005A               3512              BEQ         displayA4
00003020  B63C 0005               3513              CMP.B       #five,D3
00003024  6700 0062               3514              BEQ         displayA5
00003028  B63C 0006               3515              CMP.B       #six,D3
0000302C  6700 006A               3516              BEQ         displayA6
00003030  B63C 0007               3517              CMP.B       #seven,D3
00003034  6700 0072               3518              BEQ         displayA7
00003038                          3519              
00003038  43F9 00003D80           3520  displayA0   LEA         dispA0, A1          ; Display space
0000303E  103C 000E               3521              MOVE.B      #14, D0             ; command for trap call to display message
00003042  4E4F                    3522              TRAP        #15                 ; trap call
00003044  6000 0536               3523              BRA         endSUB              ; go to the end of the subroutine
00003048                          3524              
00003048  43F9 00003D83           3525  displayA1   LEA         dispA1, A1          ; Display space
0000304E  103C 000E               3526              MOVE.B      #14, D0             ; command for trap call to display message
00003052  4E4F                    3527              TRAP        #15                 ; trap call
00003054  6000 0526               3528              BRA         endSUB              ; go to the end of the subroutine
00003058                          3529  
00003058  43F9 00003D86           3530  displayA2   LEA         dispA2, A1          ; Display space
0000305E  103C 000E               3531              MOVE.B      #14, D0             ; command for trap call to display message
00003062  4E4F                    3532              TRAP        #15                 ; trap call
00003064  6000 0516               3533              BRA         endSUB              ; go to the end of the subroutine
00003068                          3534  
00003068  43F9 00003D89           3535  displayA3   LEA         dispA3, A1          ; Display space
0000306E  103C 000E               3536              MOVE.B      #14, D0             ; command for trap call to display message
00003072  4E4F                    3537              TRAP        #15                 ; trap call
00003074  6000 0506               3538              BRA         endSUB              ; go to the end of the subroutine
00003078                          3539  
00003078  43F9 00003D8C           3540  displayA4   LEA         dispA4, A1          ; Display space
0000307E  103C 000E               3541              MOVE.B      #14, D0             ; command for trap call to display message
00003082  4E4F                    3542              TRAP        #15                 ; trap call
00003084  6000 04F6               3543              BRA         endSUB              ; go to the end of the subroutine
00003088                          3544  
00003088  43F9 00003D8F           3545  displayA5   LEA         dispA5, A1          ; Display space
0000308E  103C 000E               3546              MOVE.B      #14, D0             ; command for trap call to display message
00003092  4E4F                    3547              TRAP        #15                 ; trap call
00003094  6000 04E6               3548              BRA         endSUB              ; go to the end of the subroutine
00003098                          3549  
00003098  43F9 00003D92           3550  displayA6   LEA         dispA6, A1          ; Display space
0000309E  103C 000E               3551              MOVE.B      #14, D0             ; command for trap call to display message
000030A2  4E4F                    3552              TRAP        #15                 ; trap call
000030A4  6000 04D6               3553              BRA         endSUB              ; go to the end of the subroutine
000030A8                          3554  
000030A8  43F9 00003D95           3555  displayA7   LEA         dispA7, A1          ; Display space
000030AE  103C 000E               3556              MOVE.B      #14, D0             ; command for trap call to display message
000030B2  4E4F                    3557              TRAP        #15                 ; trap call
000030B4  6000 04C6               3558              BRA         endSUB              ; go to the end of the subroutine
000030B8                          3559  
000030B8                          3560  ***********************************************************************************************************
000030B8                          3561  * Address Register Direct
000030B8                          3562  
000030B8  43F9 00003CE6           3563  pAddrDir    LEA         opPer, A1           ; Display space
000030BE  103C 000E               3564              MOVE.B      #14, D0             ; command for trap call to display message
000030C2  4E4F                    3565              TRAP        #15                 ; trap call
000030C4                          3566              
000030C4  B63C 0000               3567              CMP.B       #zero,D3
000030C8  6700 003A               3568              BEQ         displayA0A
000030CC  B63C 0001               3569              CMP.B       #one,D3
000030D0  6700 004E               3570              BEQ         displayA1A
000030D4  B63C 0002               3571              CMP.B       #two,D3
000030D8  6700 0062               3572              BEQ         displayA2A
000030DC  B63C 0003               3573              CMP.B       #three,D3
000030E0  6700 0076               3574              BEQ         displayA3A
000030E4  B63C 0004               3575              CMP.B       #four,D3
000030E8  6700 008A               3576              BEQ         displayA4A
000030EC  B63C 0005               3577              CMP.B       #five,D3
000030F0  6700 009E               3578              BEQ         displayA5A
000030F4  B63C 0006               3579              CMP.B       #six,D3
000030F8  6700 00B2               3580              BEQ         displayA6A
000030FC  B63C 0007               3581              CMP.B       #seven,D3
00003100  6700 00C6               3582              BEQ         displayA7A
00003104                          3583              
00003104  43F9 00003D80           3584  displayA0A  LEA         dispA0, A1          ; Display space
0000310A  103C 000E               3585              MOVE.B      #14, D0             ; command for trap call to display message
0000310E  4E4F                    3586              TRAP        #15                 ; trap call
00003110  43F9 00003CE8           3587              LEA         clPer, A1           ; Display space
00003116  103C 000E               3588              MOVE.B      #14, D0             ; command for trap call to display message
0000311A  4E4F                    3589              TRAP        #15                 ; trap call
0000311C  6000 045E               3590              BRA         endSUB              ; go to the end of the subroutine
00003120                          3591              
00003120  43F9 00003D83           3592  displayA1A  LEA         dispA1, A1          ; Display space
00003126  103C 000E               3593              MOVE.B      #14, D0             ; command for trap call to display message
0000312A  4E4F                    3594              TRAP        #15                 ; trap call
0000312C  43F9 00003CE8           3595              LEA         clPer, A1           ; Display space
00003132  103C 000E               3596              MOVE.B      #14, D0             ; command for trap call to display message
00003136  4E4F                    3597              TRAP        #15                 ; trap call
00003138  6000 0442               3598              BRA         endSUB              ; go to the end of the subroutine
0000313C                          3599  
0000313C  43F9 00003D86           3600  displayA2A  LEA         dispA2, A1          ; Display space
00003142  103C 000E               3601              MOVE.B      #14, D0             ; command for trap call to display message
00003146  4E4F                    3602              TRAP        #15                 ; trap call
00003148  43F9 00003CE8           3603              LEA         clPer, A1           ; Display space
0000314E  103C 000E               3604              MOVE.B      #14, D0             ; command for trap call to display message
00003152  4E4F                    3605              TRAP        #15                 ; trap call
00003154  6000 0426               3606              BRA         endSUB              ; go to the end of the subroutine
00003158                          3607  
00003158  43F9 00003D89           3608  displayA3A  LEA         dispA3, A1          ; Display space
0000315E  103C 000E               3609              MOVE.B      #14, D0             ; command for trap call to display message
00003162  4E4F                    3610              TRAP        #15                 ; trap call
00003164  43F9 00003CE8           3611              LEA         clPer, A1           ; Display space
0000316A  103C 000E               3612              MOVE.B      #14, D0             ; command for trap call to display message
0000316E  4E4F                    3613              TRAP        #15                 ; trap call
00003170  6000 040A               3614              BRA         endSUB              ; go to the end of the subroutine
00003174                          3615  
00003174  43F9 00003D8C           3616  displayA4A  LEA         dispA4, A1          ; Display space
0000317A  103C 000E               3617              MOVE.B      #14, D0             ; command for trap call to display message
0000317E  4E4F                    3618              TRAP        #15                 ; trap call
00003180  43F9 00003CE8           3619              LEA         clPer, A1           ; Display space
00003186  103C 000E               3620              MOVE.B      #14, D0             ; command for trap call to display message
0000318A  4E4F                    3621              TRAP        #15                 ; trap call
0000318C  6000 03EE               3622              BRA         endSUB              ; go to the end of the subroutine
00003190                          3623  
00003190  43F9 00003D8F           3624  displayA5A  LEA         dispA5, A1          ; Display space
00003196  103C 000E               3625              MOVE.B      #14, D0             ; command for trap call to display message
0000319A  4E4F                    3626              TRAP        #15                 ; trap call
0000319C  43F9 00003CE8           3627              LEA         clPer, A1           ; Display space
000031A2  103C 000E               3628              MOVE.B      #14, D0             ; command for trap call to display message
000031A6  4E4F                    3629              TRAP        #15                 ; trap call
000031A8  6000 03D2               3630              BRA         endSUB              ; go to the end of the subroutine
000031AC                          3631  
000031AC  43F9 00003D92           3632  displayA6A  LEA         dispA6, A1          ; Display space
000031B2  103C 000E               3633              MOVE.B      #14, D0             ; command for trap call to display message
000031B6  4E4F                    3634              TRAP        #15                 ; trap call
000031B8  43F9 00003CE8           3635              LEA         clPer, A1           ; Display space
000031BE  103C 000E               3636              MOVE.B      #14, D0             ; command for trap call to display message
000031C2  4E4F                    3637              TRAP        #15                 ; trap call
000031C4  6000 03B6               3638              BRA         endSUB              ; go to the end of the subroutine
000031C8                          3639  
000031C8  43F9 00003D95           3640  displayA7A  LEA         dispA7, A1          ; Display space
000031CE  103C 000E               3641              MOVE.B      #14, D0             ; command for trap call to display message
000031D2  4E4F                    3642              TRAP        #15                 ; trap call
000031D4  43F9 00003CE8           3643              LEA         clPer, A1           ; Display space
000031DA  103C 000E               3644              MOVE.B      #14, D0             ; command for trap call to display message
000031DE  4E4F                    3645              TRAP        #15                 ; trap call
000031E0  6000 039A               3646              BRA         endSUB              ; go to the end of the subroutine
000031E4                          3647              
000031E4                          3648  ***********************************************************************************************************
000031E4                          3649  * Addr Postincrement
000031E4                          3650              
000031E4  43F9 00003CE6           3651  pAddrPost   LEA         opPer, A1           ; Display space
000031EA  103C 000E               3652              MOVE.B      #14, D0             ; command for trap call to display message
000031EE  4E4F                    3653              TRAP        #15                 ; trap call
000031F0                          3654              
000031F0  B63C 0000               3655              CMP.B       #zero,D3
000031F4  6700 003A               3656              BEQ         displayA0P
000031F8  B63C 0001               3657              CMP.B       #one,D3
000031FC  6700 005A               3658              BEQ         displayA1P
00003200  B63C 0002               3659              CMP.B       #two,D3
00003204  6700 007A               3660              BEQ         displayA2P
00003208  B63C 0003               3661              CMP.B       #three,D3
0000320C  6700 009A               3662              BEQ         displayA3P
00003210  B63C 0004               3663              CMP.B       #four,D3
00003214  6700 00BA               3664              BEQ         displayA4P
00003218  B63C 0005               3665              CMP.B       #five,D3
0000321C  6700 00DA               3666              BEQ         displayA5P
00003220  B63C 0006               3667              CMP.B       #six,D3
00003224  6700 00FA               3668              BEQ         displayA6P
00003228  B63C 0007               3669              CMP.B       #seven,D3
0000322C  6700 011A               3670              BEQ         displayA7P
00003230                          3671              
00003230  43F9 00003D80           3672  displayA0P  LEA         dispA0, A1          ; Display space
00003236  103C 000E               3673              MOVE.B      #14, D0             ; command for trap call to display message
0000323A  4E4F                    3674              TRAP        #15                 ; trap call
0000323C  43F9 00003CE8           3675              LEA         clPer, A1           ; Display space
00003242  103C 000E               3676              MOVE.B      #14, D0             ; command for trap call to display message
00003246  4E4F                    3677              TRAP        #15                 ; trap call
00003248  43F9 00003CEC           3678              LEA         inc, A1             ; Display space
0000324E  103C 000E               3679              MOVE.B      #14, D0             ; command for trap call to display message
00003252  4E4F                    3680              TRAP        #15                 ; trap call
00003254  6000 0326               3681              BRA         endSUB              ; go to the end of the subroutine
00003258                          3682              
00003258  43F9 00003D83           3683  displayA1P  LEA         dispA1, A1          ; Display space
0000325E  103C 000E               3684              MOVE.B      #14, D0             ; command for trap call to display message
00003262  4E4F                    3685              TRAP        #15                 ; trap call
00003264  43F9 00003CE8           3686              LEA         clPer, A1           ; Display space
0000326A  103C 000E               3687              MOVE.B      #14, D0             ; command for trap call to display message
0000326E  4E4F                    3688              TRAP        #15                 ; trap call
00003270  43F9 00003CEC           3689              LEA         inc, A1             ; Display space
00003276  103C 000E               3690              MOVE.B      #14, D0             ; command for trap call to display message
0000327A  4E4F                    3691              TRAP        #15                 ; trap call
0000327C  6000 02FE               3692              BRA         endSUB              ; go to the end of the subroutine
00003280                          3693  
00003280  43F9 00003D86           3694  displayA2P  LEA         dispA2, A1          ; Display space
00003286  103C 000E               3695              MOVE.B      #14, D0             ; command for trap call to display message
0000328A  4E4F                    3696              TRAP        #15                 ; trap call
0000328C  43F9 00003CE8           3697              LEA         clPer, A1           ; Display space
00003292  103C 000E               3698              MOVE.B      #14, D0             ; command for trap call to display message
00003296  4E4F                    3699              TRAP        #15                 ; trap call
00003298  43F9 00003CEC           3700              LEA         inc, A1             ; Display space
0000329E  103C 000E               3701              MOVE.B      #14, D0             ; command for trap call to display message
000032A2  4E4F                    3702              TRAP        #15                 ; trap call
000032A4  6000 02D6               3703              BRA         endSUB              ; go to the end of the subroutine
000032A8                          3704  
000032A8  43F9 00003D89           3705  displayA3P  LEA         dispA3, A1          ; Display space
000032AE  103C 000E               3706              MOVE.B      #14, D0             ; command for trap call to display message
000032B2  4E4F                    3707              TRAP        #15                 ; trap call
000032B4  43F9 00003CE8           3708              LEA         clPer, A1           ; Display space
000032BA  103C 000E               3709              MOVE.B      #14, D0             ; command for trap call to display message
000032BE  4E4F                    3710              TRAP        #15                 ; trap call
000032C0  43F9 00003CEC           3711              LEA         inc, A1             ; Display space
000032C6  103C 000E               3712              MOVE.B      #14, D0             ; command for trap call to display message
000032CA  4E4F                    3713              TRAP        #15                 ; trap call
000032CC  6000 02AE               3714              BRA         endSUB              ; go to the end of the subroutine
000032D0                          3715  
000032D0  43F9 00003D8C           3716  displayA4P  LEA         dispA4, A1          ; Display space
000032D6  103C 000E               3717              MOVE.B      #14, D0             ; command for trap call to display message
000032DA  4E4F                    3718              TRAP        #15                 ; trap call
000032DC  43F9 00003CE8           3719              LEA         clPer, A1           ; Display space
000032E2  103C 000E               3720              MOVE.B      #14, D0             ; command for trap call to display message
000032E6  4E4F                    3721              TRAP        #15                 ; trap call
000032E8  43F9 00003CEC           3722              LEA         inc, A1             ; Display space
000032EE  103C 000E               3723              MOVE.B      #14, D0             ; command for trap call to display message
000032F2  4E4F                    3724              TRAP        #15                 ; trap call
000032F4  6000 0286               3725              BRA         endSUB              ; go to the end of the subroutine
000032F8                          3726  
000032F8  43F9 00003D8F           3727  displayA5P  LEA         dispA5, A1          ; Display space
000032FE  103C 000E               3728              MOVE.B      #14, D0             ; command for trap call to display message
00003302  4E4F                    3729              TRAP        #15                 ; trap call
00003304  43F9 00003CE8           3730              LEA         clPer, A1           ; Display space
0000330A  103C 000E               3731              MOVE.B      #14, D0             ; command for trap call to display message
0000330E  4E4F                    3732              TRAP        #15                 ; trap call
00003310  43F9 00003CEC           3733              LEA         inc, A1             ; Display space
00003316  103C 000E               3734              MOVE.B      #14, D0             ; command for trap call to display message
0000331A  4E4F                    3735              TRAP        #15                 ; trap call
0000331C  6000 025E               3736              BRA         endSUB              ; go to the end of the subroutine
00003320                          3737  
00003320  43F9 00003D92           3738  displayA6P  LEA         dispA6, A1          ; Display space
00003326  103C 000E               3739              MOVE.B      #14, D0             ; command for trap call to display message
0000332A  4E4F                    3740              TRAP        #15                 ; trap call
0000332C  43F9 00003CE8           3741              LEA         clPer, A1           ; Display space
00003332  103C 000E               3742              MOVE.B      #14, D0             ; command for trap call to display message
00003336  4E4F                    3743              TRAP        #15                 ; trap call
00003338  43F9 00003CEC           3744              LEA         inc, A1             ; Display space
0000333E  103C 000E               3745              MOVE.B      #14, D0             ; command for trap call to display message
00003342  4E4F                    3746              TRAP        #15                 ; trap call
00003344  6000 0236               3747              BRA         endSUB              ; go to the end of the subroutine
00003348                          3748  
00003348  43F9 00003D95           3749  displayA7P  LEA         dispA7, A1          ; Display space
0000334E  103C 000E               3750              MOVE.B      #14, D0             ; command for trap call to display message
00003352  4E4F                    3751              TRAP        #15                 ; trap call
00003354  43F9 00003CE8           3752              LEA         clPer, A1           ; Display space
0000335A  103C 000E               3753              MOVE.B      #14, D0             ; command for trap call to display message
0000335E  4E4F                    3754              TRAP        #15                 ; trap call
00003360  43F9 00003CEC           3755              LEA         inc, A1             ; Display space
00003366  103C 000E               3756              MOVE.B      #14, D0             ; command for trap call to display message
0000336A  4E4F                    3757              TRAP        #15                 ; trap call
0000336C  6000 020E               3758              BRA         endSUB              ; go to the end of the subroutine
00003370                          3759  
00003370                          3760  ***********************************************************************************************************
00003370                          3761  * Addr Postdecrement
00003370                          3762  
00003370                          3763  pAddrDec    
00003370  43F9 00003CEA           3764              LEA         dec, A1             ; Display space
00003376  103C 000E               3765              MOVE.B      #14, D0             ; command for trap call to display message
0000337A  4E4F                    3766              TRAP        #15                 ; trap call
0000337C                          3767              
0000337C  43F9 00003CE6           3768              LEA         opPer, A1           ; Display space
00003382  103C 000E               3769              MOVE.B      #14, D0             ; command for trap call to display message
00003386  4E4F                    3770              TRAP        #15                 ; trap call
00003388                          3771              
00003388  B63C 0000               3772              CMP.B       #zero,D3
0000338C  6700 003A               3773              BEQ         displayA0D
00003390  B63C 0001               3774              CMP.B       #one,D3
00003394  6700 004E               3775              BEQ         displayA1D
00003398  B63C 0002               3776              CMP.B       #two,D3
0000339C  6700 0062               3777              BEQ         displayA2D
000033A0  B63C 0003               3778              CMP.B       #three,D3
000033A4  6700 0076               3779              BEQ         displayA3D
000033A8  B63C 0004               3780              CMP.B       #four,D3
000033AC  6700 008A               3781              BEQ         displayA4D
000033B0  B63C 0005               3782              CMP.B       #five,D3
000033B4  6700 009E               3783              BEQ         displayA5D
000033B8  B63C 0006               3784              CMP.B       #six,D3
000033BC  6700 00B2               3785              BEQ         displayA6D
000033C0  B63C 0007               3786              CMP.B       #seven,D3
000033C4  6700 00C6               3787              BEQ         displayA7D
000033C8                          3788              
000033C8                          3789  displayA0D  
000033C8  43F9 00003D80           3790              LEA         dispA0, A1          ; Display space
000033CE  103C 000E               3791              MOVE.B      #14, D0             ; command for trap call to display message
000033D2  4E4F                    3792              TRAP        #15                 ; trap call
000033D4  43F9 00003CE8           3793              LEA         clPer, A1           ; Display space
000033DA  103C 000E               3794              MOVE.B      #14, D0             ; command for trap call to display message
000033DE  4E4F                    3795              TRAP        #15                 ; trap call
000033E0  6000 019A               3796              BRA         endSUB              ; go to the end of the subroutine
000033E4                          3797              
000033E4                          3798  displayA1D  
000033E4  43F9 00003D83           3799              LEA         dispA1, A1          ; Display space
000033EA  103C 000E               3800              MOVE.B      #14, D0             ; command for trap call to display message
000033EE  4E4F                    3801              TRAP        #15                 ; trap call
000033F0  43F9 00003CE8           3802              LEA         clPer, A1           ; Display space
000033F6  103C 000E               3803              MOVE.B      #14, D0             ; command for trap call to display message
000033FA  4E4F                    3804              TRAP        #15                 ; trap call
000033FC  6000 017E               3805              BRA         endSUB              ; go to the end of the subroutine
00003400                          3806  
00003400                          3807  displayA2D  
00003400  43F9 00003D86           3808              LEA         dispA2, A1          ; Display space
00003406  103C 000E               3809              MOVE.B      #14, D0             ; command for trap call to display message
0000340A  4E4F                    3810              TRAP        #15                 ; trap call
0000340C  43F9 00003CE8           3811              LEA         clPer, A1           ; Display space
00003412  103C 000E               3812              MOVE.B      #14, D0             ; command for trap call to display message
00003416  4E4F                    3813              TRAP        #15                 ; trap call
00003418  6000 0162               3814              BRA         endSUB              ; go to the end of the subroutine
0000341C                          3815  
0000341C                          3816  displayA3D  
0000341C  43F9 00003D89           3817              LEA         dispA3, A1          ; Display space
00003422  103C 000E               3818              MOVE.B      #14, D0             ; command for trap call to display message
00003426  4E4F                    3819              TRAP        #15                 ; trap call
00003428  43F9 00003CE8           3820              LEA         clPer, A1           ; Display space
0000342E  103C 000E               3821              MOVE.B      #14, D0             ; command for trap call to display message
00003432  4E4F                    3822              TRAP        #15                 ; trap call
00003434  6000 0146               3823              BRA         endSUB              ; go to the end of the subroutine
00003438                          3824  
00003438                          3825  displayA4D  
00003438  43F9 00003D8C           3826              LEA         dispA4, A1          ; Display space
0000343E  103C 000E               3827              MOVE.B      #14, D0             ; command for trap call to display message
00003442  4E4F                    3828              TRAP        #15                 ; trap call
00003444  43F9 00003CE8           3829              LEA         clPer, A1           ; Display space
0000344A  103C 000E               3830              MOVE.B      #14, D0             ; command for trap call to display message
0000344E  4E4F                    3831              TRAP        #15                 ; trap call
00003450  6000 012A               3832              BRA         endSUB              ; go to the end of the subroutine
00003454                          3833  
00003454                          3834  displayA5D  
00003454  43F9 00003D8F           3835              LEA         dispA5, A1          ; Display space
0000345A  103C 000E               3836              MOVE.B      #14, D0             ; command for trap call to display message
0000345E  4E4F                    3837              TRAP        #15                 ; trap call
00003460  43F9 00003CE8           3838              LEA         clPer, A1           ; Display space
00003466  103C 000E               3839              MOVE.B      #14, D0             ; command for trap call to display message
0000346A  4E4F                    3840              TRAP        #15                 ; trap call
0000346C  6000 010E               3841              BRA         endSUB              ; go to the end of the subroutine
00003470                          3842  
00003470                          3843  displayA6D  
00003470  43F9 00003D92           3844              LEA         dispA6, A1          ; Display space
00003476  103C 000E               3845              MOVE.B      #14, D0             ; command for trap call to display message
0000347A  4E4F                    3846              TRAP        #15                 ; trap call
0000347C  43F9 00003CE8           3847              LEA         clPer, A1           ; Display space
00003482  103C 000E               3848              MOVE.B      #14, D0             ; command for trap call to display message
00003486  4E4F                    3849              TRAP        #15                 ; trap call
00003488  6000 00F2               3850              BRA         endSUB              ; go to the end of the subroutine
0000348C                          3851  
0000348C                          3852  displayA7D  
0000348C  43F9 00003D95           3853              LEA         dispA7, A1          ; Display space
00003492  103C 000E               3854              MOVE.B      #14, D0             ; command for trap call to display message
00003496  4E4F                    3855              TRAP        #15                 ; trap call
00003498  43F9 00003CE8           3856              LEA         clPer, A1           ; Display space
0000349E  103C 000E               3857              MOVE.B      #14, D0             ; command for trap call to display message
000034A2  4E4F                    3858              TRAP        #15                 ; trap call
000034A4  6000 00D6               3859              BRA         endSUB              ; go to the end of the subroutine
000034A8                          3860  
000034A8                          3861  ***********************************************************************************************************
000034A8                          3862  * Display Hex
000034A8                          3863  
000034A8                          3864  pHex        
000034A8  B63C 0000               3865              CMP.B       #zero, D3
000034AC  6700 0012               3866              BEQ         AbsShort
000034B0  B63C 0001               3867              CMP.B       #one, D3
000034B4  6700 0042               3868              BEQ         AbsLong
000034B8  B63C 0004               3869              CMP.B       #four, D3
000034BC  6700 0072               3870              BEQ         DispImm
000034C0                          3871              
000034C0                          3872  AbsShort    
000034C0  43F9 00003CE6           3873              LEA         opPer, A1           ; Display space
000034C6  103C 000E               3874              MOVE.B      #14, D0             ; command for trap call to display message
000034CA  4E4F                    3875              TRAP        #15                 ; trap call
000034CC                          3876              
000034CC  43F9 00003CE2           3877              LEA         dispHex, A1         ; Display space
000034D2  103C 000E               3878              MOVE.B      #14, D0             ; command for trap call to display message
000034D6  4E4F                    3879              TRAP        #15                 ; trap call
000034D8                          3880              
000034D8  4241                    3881              CLR         D1
000034DA  3218                    3882              MOVE.W      (A0)+, D1
000034DC  4240                    3883              CLR         D0
000034DE  103C 0004               3884              MOVE.B      #4, D0
000034E2                          3885              
000034E2  4EB9 00003AA4           3886              JSR         outHex
000034E8                          3887              
000034E8  43F9 00003CE8           3888              LEA         clPer, A1           ; Display space
000034EE  103C 000E               3889              MOVE.B      #14, D0             ; command for trap call to display message
000034F2  4E4F                    3890              TRAP        #15                 ; trap call
000034F4                          3891              
000034F4  6000 0086               3892              BRA         endSub
000034F8                          3893              
000034F8                          3894  AbsLong     
000034F8  43F9 00003CE6           3895              LEA         opPer, A1           ; Display space
000034FE  103C 000E               3896              MOVE.B      #14, D0             ; command for trap call to display message
00003502  4E4F                    3897              TRAP        #15                 ; trap call
00003504                          3898              
00003504  43F9 00003CE2           3899              LEA         dispHex, A1         ; Display space
0000350A  103C 000E               3900              MOVE.B      #14, D0             ; command for trap call to display message
0000350E  4E4F                    3901              TRAP        #15                 ; trap call
00003510                          3902              
00003510  4241                    3903              CLR         D1
00003512  2218                    3904              MOVE.L      (A0)+, D1
00003514  4240                    3905              CLR         D0
00003516  103C 0008               3906              MOVE.B      #8, D0
0000351A                          3907              
0000351A  4EB9 00003AA4           3908              JSR         outHex
00003520                          3909              
00003520  43F9 00003CE8           3910              LEA         clPer, A1           ; Display space
00003526  103C 000E               3911              MOVE.B      #14, D0             ; command for trap call to display message
0000352A  4E4F                    3912              TRAP        #15                 ; trap call
0000352C                          3913              
0000352C  6000 004E               3914              BRA         endSub
00003530                          3915  
00003530                          3916  DispImm     
00003530  43F9 00003CE0           3917              LEA         hashTag, A1         ; Display space
00003536  103C 000E               3918              MOVE.B      #14, D0             ; command for trap call to display message
0000353A  4E4F                    3919              TRAP        #15                 ; trap call
0000353C                          3920  
0000353C  43F9 00003CE2           3921              LEA         dispHex, A1         ; Display space
00003542  103C 000E               3922              MOVE.B      #14, D0             ; command for trap call to display message
00003546  4E4F                    3923              TRAP        #15                 ; trap call
00003548                          3924              
00003548  BC3C 0001               3925              CMP.B       #1,D6
0000354C  6700 0016               3926              BEQ         ImmLong
00003550                          3927              
00003550  4241                    3928              CLR         D1
00003552  3218                    3929              MOVE.W      (A0)+, D1
00003554  4240                    3930              CLR         D0
00003556  103C 0004               3931              MOVE.B      #4, D0
0000355A  4EB9 00003AA4           3932              JSR         outHex
00003560  6000 0012               3933              BRA         LongSkip
00003564                          3934              
00003564                          3935  ImmLong     
00003564  4241                    3936              CLR         D1
00003566  2218                    3937              MOVE.L      (A0)+, D1
00003568  4240                    3938              CLR         D0
0000356A  103C 0008               3939              MOVE.B      #8, D0
0000356E  4EB9 00003AA4           3940              JSR         outHex             
00003574                          3941  
00003574                          3942  LongSkip
00003574  6000 0006               3943              BRA         endSub
00003578                          3944  
00003578                          3945  invalid
00003578  6000 06F4               3946              BRA         printInvalid
0000357C                          3947  
0000357C                          3948  endSUB        
0000357C  4CDF 7EFF               3949              MOVEM.L     (SP)+, D0-D7/A1-A6
00003580  4E75                    3950              RTS
00003582                          3951  
00003582                          3952  ***********************************************************************************************************
00003582                          3953  *
00003582                          3954  *                       MOVEM Helper Function
00003582                          3955  *
00003582                          3956  ***********************************************************************************************************
00003582                          3957  
00003582                          3958  MOVEMBRA    
00003582  48E7 FF7E               3959              MOVEM.L     D0-D7/A1-A6, -(SP)     ; Branches off depending on size bit
00003586  BA7C 0000               3960              CMP         #zero,D5
0000358A  6700 000A               3961              BEQ         MOVEMW
0000358E  BA7C 0001               3962              CMP         #one, D5
00003592  6700 001E               3963              BEQ         MOVEML
00003596                          3964              
00003596                          3965  MOVEMW     
00003596  43F9 00003D7A           3966              LEA         dispWord, A1        ; we know that the opcode will be ROR, so load A1 to print message
0000359C  103C 000E               3967              MOVE.B      #14, D0             ; command for trap call to display message
000035A0  4E4F                    3968              TRAP        #15                 ; trap call
000035A2                          3969  
000035A2  43F9 00003CDD           3970              LEA         space, A1           ; we know that the opcode will be ROR, so load A1 to print message
000035A8  103C 000E               3971              MOVE.B      #14, D0             ; command for trap call to display message
000035AC  4E4F                    3972              TRAP        #15                 ; trap call
000035AE                          3973              
000035AE  6000 001E               3974              BRA         CheckDR
000035B2                          3975  
000035B2                          3976  MOVEML   
000035B2  43F9 00003D7D           3977              LEA         dispLong, A1        ; we know that the opcode will be ROR, so load A1 to print message
000035B8  103C 000E               3978              MOVE.B      #14, D0             ; command for trap call to display message
000035BC  4E4F                    3979              TRAP        #15                 ; trap call
000035BE                          3980  
000035BE  43F9 00003CDD           3981              LEA         space, A1        ; we know that the opcode will be ROR, so load A1 to print message
000035C4  103C 000E               3982              MOVE.B      #14, D0             ; command for trap call to display message
000035C8  4E4F                    3983              TRAP        #15                 ; trap call
000035CA                          3984           
000035CA                          3985  
000035CA  6000 0002               3986              BRA         CheckDR
000035CE                          3987  
000035CE                          3988  CheckDR     
000035CE  3218                    3989              MOVE.W      (A0)+, D1           ; Taking in next word
000035D0  BC7C 0000               3990              CMP         #zero,D6
000035D4  6700 0020               3991              BEQ         printRegMem
000035D8  BC7C 0001               3992              CMP         #one,D6
000035DC  6700 0004               3993              BEQ         printStack
000035E0  6096                    3994              BRA         invalid
000035E2                          3995              
000035E2                          3996  printStack 
000035E2  4EB8 2F00               3997              JSR         printEA
000035E6                          3998              
000035E6  43F9 00003CE4           3999              LEA         comma,A1
000035EC  103C 000E               4000              MOVE.B      #14, D0             ; command for trap call to display message
000035F0  4E4F                    4001              TRAP        #15                 ; trap call
000035F2                          4002              
000035F2                          4003              
000035F2  6000 0002               4004              BRA         printRegMem
000035F6                          4005             
000035F6                          4006  printRegMem 
000035F6  4244                    4007              CLR         D4                  ; Using D4 to store predecrement mode addresses
000035F8  1801                    4008              MOVE.B      D1,D4               ; Stores bits for D0-D7
000035FA                          4009              
000035FA  4245                    4010              CLR         D5
000035FC  1A01                    4011              MOVE.B      D1,D5
000035FE  CA7C 0001               4012              AND         #mask1,D5
00003602  BA7C 0001               4013              CMP         #mask1,D5
00003606  6700 007A               4014              BEQ         DataReg0
0000360A                          4015              
0000360A  4245                    4016              CLR         D5
0000360C  1A01                    4017              MOVE.B      D1,D5
0000360E  CA7C 0002               4018              AND         #mask2,D5
00003612  BA7C 0002               4019              CMP         #mask2,D5
00003616  6700 009A               4020              BEQ         DataReg1
0000361A                          4021  
0000361A  4245                    4022              CLR         D5
0000361C  1A01                    4023              MOVE.B      D1,D5
0000361E  CA7C 0004               4024              AND         #mask3,D5
00003622  BA7C 0004               4025              CMP         #mask3,D5
00003626  6700 00CA               4026              BEQ         DataReg2            
0000362A                          4027              
0000362A  4245                    4028              CLR         D5
0000362C  1A01                    4029              MOVE.B      D1,D5
0000362E  CA7C 0008               4030              AND         #mask4,D5
00003632  BA7C 0008               4031              CMP         #mask4,D5
00003636  6700 00FA               4032              BEQ         DataReg3            
0000363A                          4033              
0000363A  4245                    4034              CLR         D5
0000363C  1A01                    4035              MOVE.B      D1,D5
0000363E  CA7C 0010               4036              AND         #mask5,D5
00003642  BA7C 0010               4037              CMP         #mask5,D5
00003646  6700 012A               4038              BEQ         DataReg4
0000364A                          4039  
0000364A  4245                    4040              CLR         D5
0000364C  1A01                    4041              MOVE.B      D1,D5
0000364E  CA7C 0020               4042              AND         #mask6,D5
00003652  BA7C 0020               4043              CMP         #mask6,D5
00003656  6700 015A               4044              BEQ         DataReg5
0000365A                          4045  
0000365A  4245                    4046              CLR         D5
0000365C  1A01                    4047              MOVE.B      D1,D5
0000365E  CA7C 0040               4048              AND         #mask7,D5
00003662  BA7C 0040               4049              CMP         #mask7,D5
00003666  6700 018A               4050              BEQ         DataReg6
0000366A                          4051  
0000366A  4245                    4052              CLR         D5
0000366C  1A01                    4053              MOVE.B      D1,D5
0000366E  CA7C 0080               4054              AND         #mask8,D5
00003672  BA7C 0080               4055              CMP         #mask8,D5
00003676  6700 01BA               4056              BEQ         DataReg7
0000367A                          4057              
0000367A  6000 FEFC               4058              BRA         invalid
0000367E  6000 FEF8               4059              BRA         invalid        
00003682                          4060              
00003682                          4061  DataReg0
00003682  43F9 00003D9A           4062              LEA         dispD0, A1          ; Output string D0
00003688  103C 000E               4063              MOVE.B      #14, D0             ; command for trap call to display message
0000368C  4E4F                    4064              TRAP        #15                 ; trap call
0000368E                          4065              
0000368E  4245                    4066              CLR         D5
00003690  1A01                    4067              MOVE.B      D1,D5
00003692  CA7C 0002               4068              AND         #mask2,D5
00003696  BA7C 0002               4069              CMP         #mask2,D5
0000369A  6700 0006               4070              BEQ         Reg0Cont
0000369E  6000 01A2               4071              BRA         printMem
000036A2                          4072              
000036A2                          4073  Reg0Cont        
000036A2  43F9 00003CEA           4074              LEA         dec, A1             ; Output -
000036A8  103C 000E               4075              MOVE.B      #14, D0             ; command for trap call to display message
000036AC  4E4F                    4076              TRAP        #15                 ; trap call        
000036AE  6000 0002               4077              BRA         DataReg1
000036B2                          4078  
000036B2                          4079  DataReg1
000036B2  4245                    4080              CLR         D5
000036B4  1A01                    4081              MOVE.B      D1,D5
000036B6  CA7C 0005               4082              AND         #maskA,D5
000036BA  BA7C 0005               4083              CMP         #maskA,D5
000036BE  6700 0032               4084              BEQ         DataReg2
000036C2                          4085              
000036C2  43F9 00003D9D           4086              LEA         dispD1, A1          ; Output string D0
000036C8  103C 000E               4087              MOVE.B      #14, D0             ; command for trap call to display message
000036CC  4E4F                    4088              TRAP        #15                 ; trap call
000036CE                          4089              
000036CE  4245                    4090              CLR         D5
000036D0  1A01                    4091              MOVE.B      D1,D5
000036D2  CA7C 0004               4092              AND         #mask3,D5
000036D6  BA7C 0004               4093              CMP         #mask3,D5
000036DA  6700 0006               4094              BEQ         Reg1Cont
000036DE  6000 0162               4095              BRA         printMem
000036E2                          4096              
000036E2                          4097  Reg1Cont        
000036E2  43F9 00003CEA           4098              LEA         dec, A1             ; Output -
000036E8  103C 000E               4099              MOVE.B      #14, D0             ; command for trap call to display message
000036EC  4E4F                    4100              TRAP        #15                 ; trap call        
000036EE  6000 0002               4101              BRA         DataReg2
000036F2                          4102  
000036F2                          4103  DataReg2
000036F2  4245                    4104              CLR         D5
000036F4  1A01                    4105              MOVE.B      D1,D5
000036F6  CA7C 000A               4106              AND         #maskB,D5
000036FA  BA7C 000A               4107              CMP         #maskB,D5
000036FE  6700 0032               4108              BEQ         DataReg3
00003702                          4109              
00003702                          4110              
00003702  43F9 00003DA0           4111              LEA         dispD2, A1          ; Output string D0
00003708  103C 000E               4112              MOVE.B      #14, D0             ; command for trap call to display message
0000370C  4E4F                    4113              TRAP        #15                 ; trap call
0000370E                          4114              
0000370E  4245                    4115              CLR         D5
00003710  1A01                    4116              MOVE.B      D1,D5
00003712  CA7C 0008               4117              AND         #mask4,D5
00003716  BA7C 0008               4118              CMP         #mask4,D5
0000371A  6700 0006               4119              BEQ         Reg2Cont
0000371E  6000 0122               4120              BRA         printMem
00003722                          4121              
00003722                          4122  Reg2Cont        
00003722  43F9 00003CEA           4123              LEA         dec, A1             ; Output -
00003728  103C 000E               4124              MOVE.B      #14, D0             ; command for trap call to display message
0000372C  4E4F                    4125              TRAP        #15                 ; trap call        
0000372E  6000 0002               4126              BRA         DataReg3
00003732                          4127  
00003732                          4128  DataReg3
00003732  4245                    4129              CLR         D5
00003734  1A01                    4130              MOVE.B      D1,D5
00003736  CA7C 0014               4131              AND         #maskC,D5
0000373A  BA7C 0014               4132              CMP         #maskC,D5
0000373E  6700 0032               4133              BEQ         DataReg4
00003742                          4134              
00003742  43F9 00003DA3           4135              LEA         dispD3, A1          ; Output string D0
00003748  103C 000E               4136              MOVE.B      #14, D0             ; command for trap call to display message
0000374C  4E4F                    4137              TRAP        #15                 ; trap call
0000374E                          4138              
0000374E  4245                    4139              CLR         D5
00003750  1A01                    4140              MOVE.B      D1,D5
00003752  CA7C 0010               4141              AND         #mask5,D5
00003756  BA7C 0010               4142              CMP         #mask5,D5
0000375A  6700 0006               4143              BEQ         Reg3Cont
0000375E  6000 00E2               4144              BRA         printMem
00003762                          4145              
00003762                          4146  Reg3Cont        
00003762  43F9 00003CEA           4147              LEA         dec, A1             ; Output -
00003768  103C 000E               4148              MOVE.B      #14, D0             ; command for trap call to display message
0000376C  4E4F                    4149              TRAP        #15                 ; trap call        
0000376E  6000 0002               4150              BRA         DataReg4
00003772                          4151  
00003772                          4152  DataReg4
00003772  4245                    4153              CLR         D5
00003774  1A01                    4154              MOVE.B      D1,D5
00003776  CA7C 0028               4155              AND         #maskD,D5
0000377A  BA7C 0028               4156              CMP         #maskD,D5
0000377E  6700 0032               4157              BEQ         DataReg5
00003782                          4158              
00003782  43F9 00003DA6           4159              LEA         dispD4, A1          ; Output string D0
00003788  103C 000E               4160              MOVE.B      #14, D0             ; command for trap call to display message
0000378C  4E4F                    4161              TRAP        #15                 ; trap call
0000378E                          4162              
0000378E  4245                    4163              CLR         D5
00003790  1A01                    4164              MOVE.B      D1,D5
00003792  CA7C 0020               4165              AND         #mask6,D5
00003796  BA7C 0020               4166              CMP         #mask6,D5
0000379A  6700 0006               4167              BEQ         Reg4Cont
0000379E  6000 00A2               4168              BRA         printMem
000037A2                          4169              
000037A2                          4170  Reg4Cont        
000037A2  43F9 00003CEA           4171              LEA         dec, A1             ; Output -
000037A8  103C 000E               4172              MOVE.B      #14, D0             ; command for trap call to display message
000037AC  4E4F                    4173              TRAP        #15                 ; trap call        
000037AE  6000 0002               4174              BRA         DataReg5
000037B2                          4175  
000037B2                          4176  DataReg5
000037B2  4245                    4177              CLR         D5
000037B4  1A01                    4178              MOVE.B      D1,D5
000037B6  CA7C 0050               4179              AND         #maskE,D5
000037BA  BA7C 0050               4180              CMP         #maskE,D5
000037BE  6700 0032               4181              BEQ         DataReg6
000037C2                          4182              
000037C2  43F9 00003DA9           4183              LEA         dispD5, A1          ; Output string D0
000037C8  103C 000E               4184              MOVE.B      #14, D0             ; command for trap call to display message
000037CC  4E4F                    4185              TRAP        #15                 ; trap call
000037CE                          4186              
000037CE  4245                    4187              CLR         D5
000037D0  1A01                    4188              MOVE.B      D1,D5
000037D2  CA7C 0040               4189              AND         #mask7,D5
000037D6  BA7C 0040               4190              CMP         #mask7,D5
000037DA  6700 0006               4191              BEQ         Reg5Cont
000037DE  6000 0062               4192              BRA         printMem
000037E2                          4193              
000037E2                          4194  Reg5Cont        
000037E2  43F9 00003CEA           4195              LEA         dec, A1             ; Output -
000037E8  103C 000E               4196              MOVE.B      #14, D0             ; command for trap call to display message
000037EC  4E4F                    4197              TRAP        #15                 ; trap call        
000037EE  6000 0042               4198              BRA         DataReg7
000037F2                          4199  
000037F2                          4200  DataReg6
000037F2  4245                    4201              CLR         D5
000037F4  1A01                    4202              MOVE.B      D1,D5
000037F6  CA7C 00A0               4203              AND         #maskF,D5
000037FA  BA7C 00A0               4204              CMP         #maskF,D5
000037FE  6700 0032               4205              BEQ         DataReg7
00003802                          4206  
00003802  43F9 00003DAC           4207              LEA         dispD6, A1          ; Output string D0
00003808  103C 000E               4208              MOVE.B      #14, D0             ; command for trap call to display message
0000380C  4E4F                    4209              TRAP        #15                 ; trap call
0000380E                          4210              
0000380E  4245                    4211              CLR         D5
00003810  1A01                    4212              MOVE.B      D1,D5
00003812  CA7C 0080               4213              AND         #mask8,D5
00003816  BA7C 0080               4214              CMP         #mask8,D5
0000381A  6700 0006               4215              BEQ         Reg6Cont
0000381E  6000 0022               4216              BRA         printMem
00003822                          4217              
00003822                          4218  Reg6Cont        
00003822  43F9 00003CEA           4219              LEA         dec, A1             ; Output -
00003828  103C 000E               4220              MOVE.B      #14, D0             ; command for trap call to display message
0000382C  4E4F                    4221              TRAP        #15                 ; trap call        
0000382E  6000 0002               4222              BRA         DataReg7
00003832                          4223  
00003832                          4224  DataReg7    
00003832  43F9 00003DAF           4225              LEA         dispD7, A1             ; Output -
00003838  103C 000E               4226              MOVE.B      #14, D0             ; command for trap call to display message
0000383C  4E4F                    4227              TRAP        #15                 ; trap call        
0000383E  6000 0002               4228              BRA         printMem            
00003842                          4229              
00003842                          4230  printMem                                    ; Made this function in order to reuse if DR is 1
00003842  6000 0002               4231              BRA         printMemNow
00003846                          4232              
00003846                          4233  printMemNow               
00003846  43F9 00003D70           4234              LEA         slash, A1           ; Display slash
0000384C  103C 000E               4235              MOVE.B      #14, D0             ; command for trap call to display message
00003850  4E4F                    4236              TRAP        #15                 ; trap call
00003852                          4237           
00003852  4244                    4238              CLR         D4                  ; Using D4 to store predecrement mode addresses
00003854  3801                    4239              MOVE.W      D1,D4               ; Stores bits for D0-D7
00003856  E044                    4240              ASR         #eight,D4
00003858                          4241              
00003858  4245                    4242              CLR         D5
0000385A  1A04                    4243              MOVE.B      D4,D5
0000385C  CA7C 0001               4244              AND         #mask1,D5
00003860  BA7C 0001               4245              CMP         #mask1,D5
00003864  6700 0072               4246              BEQ         AddrReg0
00003868                          4247              
00003868  4245                    4248              CLR         D5
0000386A  1A04                    4249              MOVE.B      D4,D5
0000386C  CA7C 0002               4250              AND         #mask2,D5
00003870  BA7C 0002               4251              CMP         #mask2,D5
00003874  6700 0092               4252              BEQ         AddrReg1
00003878                          4253  
00003878  4245                    4254              CLR         D5
0000387A  1A04                    4255              MOVE.B      D4,D5
0000387C  CA7C 0004               4256              AND         #mask3,D5
00003880  BA7C 0004               4257              CMP         #mask3,D5
00003884  6700 00C2               4258              BEQ         AddrReg2            
00003888                          4259              
00003888  4245                    4260              CLR         D5
0000388A  1A04                    4261              MOVE.B      D4,D5
0000388C  CA7C 0008               4262              AND         #mask4,D5
00003890  BA7C 0008               4263              CMP         #mask4,D5
00003894  6700 00F2               4264              BEQ         AddrReg3            
00003898                          4265              
00003898  4245                    4266              CLR         D5
0000389A  1A04                    4267              MOVE.B      D4,D5
0000389C  CA7C 0010               4268              AND         #mask5,D5
000038A0  BA7C 0010               4269              CMP         #mask5,D5
000038A4  6700 0122               4270              BEQ         AddrReg4
000038A8                          4271  
000038A8  4245                    4272              CLR         D5
000038AA  1A04                    4273              MOVE.B      D4,D5
000038AC  CA7C 0020               4274              AND         #mask6,D5
000038B0  BA7C 0020               4275              CMP         #mask6,D5
000038B4  6700 0152               4276              BEQ         AddrReg5
000038B8                          4277  
000038B8  4245                    4278              CLR         D5
000038BA  1A04                    4279              MOVE.B      D4,D5
000038BC  CA7C 0040               4280              AND         #mask7,D5
000038C0  BA7C 0040               4281              CMP         #mask7,D5
000038C4  6700 0182               4282              BEQ         AddrReg6
000038C8                          4283  
000038C8  4245                    4284              CLR         D5
000038CA  1A04                    4285              MOVE.B      D4,D5
000038CC  CA7C 0080               4286              AND         #mask8,D5
000038D0  BA7C 0080               4287              CMP         #mask8,D5
000038D4  6700 01B2               4288              BEQ         AddrReg7
000038D8                          4289              
000038D8                          4290  AddrReg0
000038D8  43F9 00003D80           4291              LEA         dispA0, A1          ; Output string D0
000038DE  103C 000E               4292              MOVE.B      #14, D0             ; command for trap call to display message
000038E2  4E4F                    4293              TRAP        #15                 ; trap call
000038E4                          4294              
000038E4  4245                    4295              CLR         D5
000038E6  1A01                    4296              MOVE.B      D1,D5
000038E8  CA7C 0002               4297              AND         #mask2,D5
000038EC  BA7C 0002               4298              CMP         #mask2,D5
000038F0  6700 0006               4299              BEQ         Addr0Cont
000038F4  6000 01A2               4300              BRA         endMOVE
000038F8                          4301              
000038F8                          4302  Addr0Cont        
000038F8  43F9 00003CEA           4303              LEA         dec, A1             ; Output -
000038FE  103C 000E               4304              MOVE.B      #14, D0             ; command for trap call to display message
00003902  4E4F                    4305              TRAP        #15                 ; trap call        
00003904  6000 0002               4306              BRA         AddrReg1
00003908                          4307  
00003908                          4308  AddrReg1
00003908  4245                    4309              CLR         D5
0000390A  1A04                    4310              MOVE.B      D4,D5
0000390C  CA7C 0005               4311              AND         #maskA,D5
00003910  BA7C 0005               4312              CMP         #maskA,D5
00003914  6700 0032               4313              BEQ         AddrReg2
00003918                          4314              
00003918  43F9 00003D83           4315              LEA         dispA1, A1          ; Output string D0
0000391E  103C 000E               4316              MOVE.B      #14, D0             ; command for trap call to display message
00003922  4E4F                    4317              TRAP        #15                 ; trap call
00003924                          4318              
00003924  4245                    4319              CLR         D5
00003926  1A04                    4320              MOVE.B      D4,D5
00003928  CA7C 0004               4321              AND         #mask3,D5
0000392C  BA7C 0004               4322              CMP         #mask3,D5
00003930  6700 0006               4323              BEQ         Addr1Cont
00003934  6000 0162               4324              BRA         endMOVE
00003938                          4325              
00003938                          4326  Addr1Cont        
00003938  43F9 00003CEA           4327              LEA         dec, A1             ; Output -
0000393E  103C 000E               4328              MOVE.B      #14, D0             ; command for trap call to display message
00003942  4E4F                    4329              TRAP        #15                 ; trap call        
00003944  6000 0002               4330              BRA         AddrReg2
00003948                          4331  
00003948                          4332  AddrReg2
00003948  4245                    4333              CLR         D5
0000394A  1A04                    4334              MOVE.B      D4,D5
0000394C  CA7C 000A               4335              AND         #maskB,D5
00003950  BA7C 000A               4336              CMP         #maskB,D5
00003954  6700 0032               4337              BEQ         AddrReg3
00003958                          4338              
00003958  43F9 00003D86           4339              LEA         dispA2, A1          ; Output string D0
0000395E  103C 000E               4340              MOVE.B      #14, D0             ; command for trap call to display message
00003962  4E4F                    4341              TRAP        #15                 ; trap call
00003964                          4342              
00003964  4245                    4343              CLR         D5
00003966  1A04                    4344              MOVE.B      D4,D5
00003968  CA7C 0008               4345              AND         #mask4,D5
0000396C  BA7C 0008               4346              CMP         #mask4,D5
00003970  6700 0006               4347              BEQ         Addr2Cont
00003974  6000 0122               4348              BRA         endMOVE
00003978                          4349              
00003978                          4350  Addr2Cont        
00003978  43F9 00003CEA           4351              LEA         dec, A1             ; Output -
0000397E  103C 000E               4352              MOVE.B      #14, D0             ; command for trap call to display message
00003982  4E4F                    4353              TRAP        #15                 ; trap call        
00003984  6000 0002               4354              BRA         AddrReg3
00003988                          4355  
00003988                          4356  AddrReg3
00003988  4245                    4357              CLR         D5
0000398A  1A04                    4358              MOVE.B      D4,D5
0000398C  CA7C 0014               4359              AND         #maskC,D5
00003990  BA7C 0014               4360              CMP         #maskC,D5
00003994  6700 0032               4361              BEQ         AddrReg4
00003998                          4362              
00003998  43F9 00003D89           4363              LEA         dispA3, A1          ; Output string D0
0000399E  103C 000E               4364              MOVE.B      #14, D0             ; command for trap call to display message
000039A2  4E4F                    4365              TRAP        #15                 ; trap call
000039A4                          4366              
000039A4  4245                    4367              CLR         D5
000039A6  1A04                    4368              MOVE.B      D4,D5
000039A8  CA7C 0010               4369              AND         #mask5,D5
000039AC  BA7C 0010               4370              CMP         #mask5,D5
000039B0  6700 0006               4371              BEQ         Addr3Cont
000039B4  6000 00E2               4372              BRA         endMOVE
000039B8                          4373              
000039B8                          4374  Addr3Cont        
000039B8  43F9 00003CEA           4375              LEA         dec, A1             ; Output -
000039BE  103C 000E               4376              MOVE.B      #14, D0             ; command for trap call to display message
000039C2  4E4F                    4377              TRAP        #15                 ; trap call        
000039C4  6000 0002               4378              BRA         AddrReg4
000039C8                          4379  
000039C8                          4380  AddrReg4
000039C8  4245                    4381              CLR         D5
000039CA  1A04                    4382              MOVE.B      D4,D5
000039CC  CA7C 0028               4383              AND         #maskD,D5
000039D0  BA7C 0028               4384              CMP         #maskD,D5
000039D4  6700 0032               4385              BEQ         AddrReg5
000039D8                          4386              
000039D8  43F9 00003D8C           4387              LEA         dispA4, A1          ; Output string D0
000039DE  103C 000E               4388              MOVE.B      #14, D0             ; command for trap call to display message
000039E2  4E4F                    4389              TRAP        #15                 ; trap call
000039E4                          4390              
000039E4  4245                    4391              CLR         D5
000039E6  1A04                    4392              MOVE.B      D4,D5
000039E8  CA7C 0020               4393              AND         #mask6,D5
000039EC  BA7C 0020               4394              CMP         #mask6,D5
000039F0  6700 0006               4395              BEQ         Addr4Cont
000039F4  6000 00A2               4396              BRA         endMOVE
000039F8                          4397              
000039F8                          4398  Addr4Cont        
000039F8  43F9 00003CEA           4399              LEA         dec, A1             ; Output -
000039FE  103C 000E               4400              MOVE.B      #14, D0             ; command for trap call to display message
00003A02  4E4F                    4401              TRAP        #15                 ; trap call        
00003A04  6000 0002               4402              BRA         AddrReg5
00003A08                          4403  AddrReg5
00003A08  4245                    4404              CLR         D5
00003A0A  1A04                    4405              MOVE.B      D4,D5
00003A0C  CA7C 0050               4406              AND         #maskE,D5
00003A10  BA7C 0050               4407              CMP         #maskE,D5
00003A14  6700 0032               4408              BEQ         AddrReg6
00003A18                          4409              
00003A18  43F9 00003D8F           4410              LEA         dispA5, A1          ; Output string D0
00003A1E  103C 000E               4411              MOVE.B      #14, D0             ; command for trap call to display message
00003A22  4E4F                    4412              TRAP        #15                 ; trap call
00003A24                          4413              
00003A24  4245                    4414              CLR         D5
00003A26  1A04                    4415              MOVE.B      D4,D5
00003A28  CA7C 0040               4416              AND         #mask7,D5
00003A2C  BA7C 0040               4417              CMP         #mask7,D5
00003A30  6700 0006               4418              BEQ         Addr5Cont
00003A34  6000 0062               4419              BRA         endMOVE
00003A38                          4420              
00003A38                          4421  Addr5Cont        
00003A38  43F9 00003CEA           4422              LEA         dec, A1             ; Output -
00003A3E  103C 000E               4423              MOVE.B      #14, D0             ; command for trap call to display message
00003A42  4E4F                    4424              TRAP        #15                 ; trap call        
00003A44  6000 0042               4425              BRA         AddrReg7
00003A48                          4426  
00003A48                          4427  AddrReg6
00003A48  4245                    4428              CLR         D5
00003A4A  1A04                    4429              MOVE.B      D4,D5
00003A4C  CA7C 00A0               4430              AND         #maskF,D5
00003A50  BA7C 00A0               4431              CMP         #maskF,D5
00003A54  6700 0032               4432              BEQ         AddrReg7
00003A58                          4433  
00003A58  43F9 00003D92           4434              LEA         dispA6, A1          ; Output string D0
00003A5E  103C 000E               4435              MOVE.B      #14, D0             ; command for trap call to display message
00003A62  4E4F                    4436              TRAP        #15                 ; trap call
00003A64                          4437              
00003A64  4245                    4438              CLR         D5
00003A66  1A04                    4439              MOVE.B      D4,D5
00003A68  CA7C 0080               4440              AND         #mask8,D5
00003A6C  BA7C 0080               4441              CMP         #mask8,D5
00003A70  6700 0006               4442              BEQ         Addr6Cont
00003A74  6000 0022               4443              BRA         endMOVE
00003A78                          4444              
00003A78                          4445  Addr6Cont        
00003A78  43F9 00003CEA           4446              LEA         dec, A1             ; Output -
00003A7E  103C 000E               4447              MOVE.B      #14, D0             ; command for trap call to display message
00003A82  4E4F                    4448              TRAP        #15                 ; trap call        
00003A84  6000 0002               4449              BRA         AddrReg7
00003A88                          4450  
00003A88                          4451  AddrReg7    
00003A88  43F9 00003D95           4452              LEA         dispA7, A1          ; Output -
00003A8E  103C 000E               4453              MOVE.B      #14, D0             ; command for trap call to display message
00003A92  4E4F                    4454              TRAP        #15                 ; trap call        
00003A94  6000 0002               4455              BRA         endMOVE
00003A98                          4456  
00003A98                          4457  endMOVE
00003A98  4CDF 7EFF               4458              MOVEM.L  (SP)+, D0-D7/A1-A6
00003A9C  4E75                    4459              RTS
00003A9E                          4460  endMove1                                    ; Used if MOVEM has DR is 1
00003A9E  4CDF 7EFF               4461              MOVEM.L  (SP)+, D0-D7/A1-A6
00003AA2  4E75                    4462              RTS
00003AA4                          4463  ***********************************************************************************************************
00003AA4                          4464  *
00003AA4                          4465  *                       Hex Decode
00003AA4                          4466  *
00003AA4                          4467  *this subroutine displays hex code stored in D1. It displays based on the number of 
00003AA4                          4468  *It displays based on the number of hex to display which is stored in D0. If it is a
00003AA4                          4469  *long or word to display, it will figure out the ascii character and add $37 if it
00003AA4                          4470  *is a letter, and $30 if its a number. It will then load the character into D1 and 
00003AA4                          4471  *display it via trap task 6 and loop however many times is needed, 4 or 8. If a word
00003AA4                          4472  *needs to be displayed, it will roll the bits over so that, the hex are shifted by a word.
00003AA4                          4473  *
00003AA4                          4474  ***********************************************************************************************************
00003AA4                          4475  
00003AA4                          4476  outHex      
00003AA4  48E7 FF7E               4477              MOVEM.L     D0-D7/A1-A6, -(SP)
00003AA8  4243                    4478              CLR         D3
00003AAA  4244                    4479              CLR         D4
00003AAC  1800                    4480              MOVE.B      D0, D4
00003AAE  2601                    4481              MOVE.L      D1, D3
00003AB0  B03C 0004               4482              CMP.B       #4, D0
00003AB4  6700 0006               4483              BEQ         moveOver
00003AB8  6000 0006               4484              BRA         dispLOOP
00003ABC                          4485              
00003ABC                          4486  moveOver    
00003ABC  E19B                    4487              ROL.L       #8,D3
00003ABE  E19B                    4488              ROL.L       #8,D3
00003AC0                          4489              
00003AC0                          4490  dispLOOP    
00003AC0  B83C 0000               4491              CMP.B       #0, D4
00003AC4  6700 0042               4492              BEQ         endDispSub
00003AC8  E99B                    4493              ROL.L       #4, D3
00003ACA  4245                    4494              CLR         D5
00003ACC  1A03                    4495              MOVE.B      D3, D5 
00003ACE  CABC 0000000F           4496              AND.L       #$0F, D5
00003AD4  BA3C 000A               4497              CMP.B       #10, D5
00003AD8  6D00 0006               4498              BLT         DLnine
00003ADC  6000 0016               4499              BRA         DLetters
00003AE0                          4500              
00003AE0                          4501  DLnine      
00003AE0  0645 0030               4502              ADD         #$30, D5
00003AE4  4241                    4503              CLR         D1
00003AE6  1205                    4504              MOVE.B      D5, D1
00003AE8  4240                    4505              CLR         D0
00003AEA  103C 0006               4506              MOVE.B      #6, D0
00003AEE  4E4F                    4507              TRAP        #15
00003AF0  5344                    4508              SUB         #1, D4
00003AF2  60CC                    4509              BRA         dispLOOP  
00003AF4                          4510   
00003AF4                          4511  DLetters    
00003AF4  0645 0037               4512              ADD         #$37, D5
00003AF8  4241                    4513              CLR         D1
00003AFA  1205                    4514              MOVE.B      D5, D1
00003AFC  4240                    4515              CLR         D0
00003AFE  103C 0006               4516              MOVE.B      #6, D0
00003B02  4E4F                    4517              TRAP        #15
00003B04  5344                    4518              SUB         #1, D4
00003B06  60B8                    4519              BRA         dispLOOP        
00003B08                          4520  
00003B08                          4521  endDispSub  
00003B08  4CDF 7EFF               4522              MOVEM.L     (SP)+, D0-D7/A1-A6
00003B0C  4E75                    4523              RTS
00003B0E                          4524  
00003B0E                          4525              
00003B0E                          4526  ***********************************************************************************************************
00003B0E                          4527  *
00003B0E                          4528  *                       IO Subroutine
00003B0E                          4529  *
00003B0E                          4530  *
00003B0E                          4531  *   the following subroutine gets the string address from the user
00003B0E                          4532  *   and converts it to Hex for a starting/ending address. it is done 
00003B0E                          4533  *   by checking each byte at address A1, and converting it from ascii to 
00003B0E                          4534  *   hex number. If the user enters an invalid character string, the
00003B0E                          4535  *   program will have a simhalt.
00003B0E                          4536  *
00003B0E                          4537  ***********************************************************************************************************
00003B0E                          4538  
00003B0E                          4539  Address     
00003B0E  48E7 1F3E               4540              MOVEM.L     D3-D7/A2-A6, -(SP)
00003B12                          4541  
00003B12                          4542  Retry       
00003B12  4242                    4543              CLR         D2
00003B14  4243                    4544              CLR         D3
00003B16  B23C 0004               4545              CMP.B       #4, D1
00003B1A  6700 000E               4546              BEQ         subLOOP
00003B1E  B23C 0008               4547              CMP.B       #8, D1
00003B22  6700 0006               4548              BEQ         subLOOP
00003B26  6000 012A               4549              BRA         ADDinvalid        
00003B2A                          4550          
00003B2A                          4551  subLOOP     
00003B2A  E85C                    4552              ROR         #4, D4
00003B2C  1404                    4553              MOVE.B      D4, D2
00003B2E  4244                    4554              CLR         D4
00003B30  4245                    4555              CLR         D5
00003B32  B601                    4556              CMP.B       D1, D3
00003B34  6700 0132               4557              BEQ         endLOOP
00003B38  5443                    4558              ADD.W       #2, D3
00003B3A  E19A                    4559              ROL.L       #8, D2
00003B3C                          4560          
00003B3C                          4561  bytLOOP     
00003B3C  E95C                    4562              ROL         #4, D4
00003B3E                          4563          
00003B3E  0C11 0030               4564              CMP.B       #$30, (A1)
00003B42  6700 007E               4565              BEQ         hZero 
00003B46  0C11 0031               4566              CMP.B       #$31, (A1)
00003B4A  6700 007E               4567              BEQ         hOne
00003B4E  0C11 0032               4568              CMP.B       #$32, (A1)
00003B52  6700 007E               4569              BEQ         hTwo
00003B56  0C11 0033               4570              CMP.B       #$33, (A1)
00003B5A  6700 007E               4571              BEQ         hThree
00003B5E  0C11 0034               4572              CMP.B       #$34, (A1)
00003B62  6700 007E               4573              BEQ         hFour
00003B66  0C11 0035               4574              CMP.B       #$35, (A1)
00003B6A  6700 007E               4575              BEQ         hFive
00003B6E  0C11 0036               4576              CMP.B       #$36, (A1)
00003B72  6700 007E               4577              BEQ         hSix
00003B76  0C11 0037               4578              CMP.B       #$37, (A1)
00003B7A  6700 007E               4579              BEQ         hSeven
00003B7E  0C11 0038               4580              CMP.B       #$38, (A1)
00003B82  6700 007E               4581              BEQ         hEight
00003B86  0C11 0039               4582              CMP.B       #$39, (A1)
00003B8A  6700 007E               4583              BEQ         hNine
00003B8E  0C11 0041               4584              CMP.B       #$41, (A1)
00003B92  6700 007E               4585              BEQ         hA
00003B96  0C11 0042               4586              CMP.B       #$42, (A1)
00003B9A  6700 007E               4587              BEQ         hB
00003B9E  0C11 0043               4588              CMP.B       #$43, (A1)
00003BA2  6700 007E               4589              BEQ         hC
00003BA6  0C11 0044               4590              CMP.B       #$44, (A1)
00003BAA  6700 007E               4591              BEQ         hD
00003BAE  0C11 0045               4592              CMP.B       #$45, (A1)
00003BB2  6700 007E               4593              BEQ         hE
00003BB6  0C11 0046               4594              CMP.B       #$46, (A1)
00003BBA  6700 007E               4595              BEQ         hF 
00003BBE                          4596              
00003BBE  6000 F9B8               4597              BRA         invalid 
00003BC2                          4598              
00003BC2                          4599  hZero       
00003BC2  183C 0000               4600              MOVE.B      #$00, D4
00003BC6  6000 007A               4601              BRA         nextH
00003BCA                          4602              
00003BCA                          4603  hOne        
00003BCA  183C 0010               4604              MOVE.B      #$10, D4
00003BCE  6000 0072               4605              BRA         nextH
00003BD2                          4606  hTwo        
00003BD2  183C 0020               4607              MOVE.B      #$20, D4
00003BD6  6000 006A               4608              BRA         nextH
00003BDA                          4609              
00003BDA                          4610  hThree      
00003BDA  183C 0030               4611              MOVE.B      #$30, D4
00003BDE  6000 0062               4612              BRA         nextH
00003BE2                          4613              
00003BE2  183C 0040               4614  hFour       MOVE.B      #$40, D4
00003BE6  6000 005A               4615              BRA         nextH
00003BEA                          4616              
00003BEA                          4617  hFive       
00003BEA  183C 0050               4618              MOVE.B      #$50, D4
00003BEE  6000 0052               4619              BRA         nextH
00003BF2                          4620              
00003BF2                          4621  hSix        
00003BF2  183C 0060               4622              MOVE.B      #$60, D4
00003BF6  6000 004A               4623              BRA         nextH
00003BFA                          4624              
00003BFA                          4625  hSeven      
00003BFA  183C 0070               4626              MOVE.B      #$70, D4
00003BFE  6000 0042               4627              BRA         nextH
00003C02                          4628              
00003C02                          4629  hEight      
00003C02  183C 0080               4630              MOVE.B      #$80, D4
00003C06  6000 003A               4631              BRA         nextH
00003C0A                          4632              
00003C0A                          4633  hNine       
00003C0A  183C 0090               4634              MOVE.B      #$90, D4
00003C0E  6000 0032               4635              BRA         nextH
00003C12                          4636          
00003C12                          4637  hA          
00003C12  183C 00A0               4638              MOVE.B      #$A0, D4
00003C16  6000 002A               4639              BRA         nextH
00003C1A                          4640              
00003C1A                          4641  hB          
00003C1A  183C 00B0               4642              MOVE.B      #$B0, D4
00003C1E  6000 0022               4643              BRA         nextH
00003C22                          4644              
00003C22                          4645  hC          
00003C22  183C 00C0               4646              MOVE.B      #$C0, D4
00003C26  6000 001A               4647              BRA         nextH
00003C2A                          4648              
00003C2A                          4649  hD          
00003C2A  183C 00D0               4650              MOVE.B      #$D0, D4
00003C2E  6000 0012               4651              BRA         nextH
00003C32                          4652              
00003C32                          4653  hE          
00003C32  183C 00E0               4654              MOVE.B      #$E0, D4
00003C36  6000 000A               4655              BRA         nextH
00003C3A                          4656              
00003C3A                          4657  hF          
00003C3A  183C 00F0               4658              MOVE.B      #$F0, D4
00003C3E  6000 0002               4659              BRA         nextH
00003C42                          4660  
00003C42                          4661  nextH       
00003C42  1019                    4662              MOVE.B      (A1)+, D0
00003C44  5245                    4663              ADD         #1, D5
00003C46  BA3C 0002               4664              CMP.B       #2, D5
00003C4A  6700 FEDE               4665              BEQ         subLOOP
00003C4E  6000 FEEC               4666              BRA         bytLOOP
00003C52                          4667          
00003C52                          4668  ADDinvalid  
00003C52  43F9 00003CBA           4669              LEA         errorMessage, A1
00003C58  103C 000E               4670              MOVE.B      #14, D0
00003C5C  4E4F                    4671              TRAP        #15    
00003C5E                          4672      
00003C5E  103C 0002               4673              MOVE.B      #2, D0
00003C62  4E4F                    4674              TRAP        #15
00003C64                          4675  
00003C64  6000 FEAC               4676              BRA         Retry
00003C68                          4677     
00003C68                          4678  endLOOP     
00003C68  4CDF 7CF8               4679              MOVEM.L     (SP)+, D3-D7/A2-A6
00003C6C  4E75                    4680              RTS
00003C6E                          4681  
00003C6E                          4682  printInvalid
00003C6E  1218                    4683              MOVE.B      (A0)+,D1
00003C70  6000 D3CE               4684              BRA         LOOP
00003C74                          4685  
00003C74                          4686  endPROG    
00003C74                          4687  
00003C74  FFFF FFFF               4688      SIMHALT                             ; halt simulator
00003C78                          4689  
00003C78                          4690  ***********************************************************************************************************
00003C78                          4691  *
00003C78                          4692  *                       IO Strings
00003C78                          4693  *           
00003C78                          4694  *       This section holds all of the various strings to output to the console.
00003C78                          4695  *
00003C78                          4696  ***********************************************************************************************************
00003C78                          4697  
00003C78= 45 6E 74 65 72 20 ...   4698  startingMessage DC.B    'Enter Starting Address (in hex): ', 0
00003C9A= 45 6E 74 65 72 20 ...   4699  endingMessage   DC.B    'Enter Ending Address (in hex): ', 0
00003CBA= 49 6E 63 6F 72 72 ...   4700  errorMessage    DC.B    'Incorrect Address, try again: ', 0
00003CD9                          4701  
00003CD9= 20 0D 0A 00             4702  newLine         DC.B    ' ', CR, LF, 0
00003CDD= 20 20 00                4703  space           DC.B    '  ', 0
00003CE0                          4704  
00003CE0= 23 00                   4705  hashTag         DC.B    '#', 0
00003CE2= 24 00                   4706  dispHex         DC.B    '$', 0
00003CE4= 2C 00                   4707  comma           DC.B    ',', 0
00003CE6                          4708  
00003CE6= 28 00                   4709  opPer           DC.B    '(', 0
00003CE8= 29 00                   4710  clPer           DC.B    ')', 0
00003CEA= 2D 00                   4711  dec             DC.B    '-', 0
00003CEC= 2B 00                   4712  inc             DC.B    '+', 0
00003CEE                          4713  
00003CEE= 4F 52 49 00             4714  ORImatch        DC.B    'ORI', 0
00003CF2= 43 4D 50 49 00          4715  CMPImatch       DC.B    'CMPI', 0
00003CF7= 42 43 4C 52 00          4716  BCLRmatch       DC.B    'BCLR', 0
00003CFC= 4D 4F 56 45 00          4717  MOVEmatch       DC.B    'MOVE', 0
00003D01= 4D 4F 56 45 41 00       4718  MOVEAmatch      DC.B    'MOVEA', 0
00003D07= 4E 45 47 00             4719  NEGmatch        DC.B    'NEG', 0
00003D0B= 52 54 53 00             4720  RTSmatch        DC.B    'RTS', 0
00003D0F= 4A 53 52 00             4721  JSRmatch        DC.B    'JSR', 0
00003D13= 4D 4F 56 45 4D 00       4722  MOVEMmatch      DC.B    'MOVEM', 0
00003D19= 4C 45 41 00             4723  LEAmatch        DC.B    'LEA', 0
00003D1D= 53 55 42 51 00          4724  SUBQmatch       DC.B    'SUBQ', 0
00003D22= 42 52 41 00             4725  BRAmatch        DC.B    'BRA', 0
00003D26= 42 43 53 00             4726  BCSmatch        DC.B    'BCS', 0
00003D2A= 42 56 43 00             4727  BVCmatch        DC.B    'BVC', 0
00003D2E= 42 47 45 00             4728  BGEmatch        DC.B    'BGE', 0
00003D32= 42 4C 54 00             4729  BLTmatch        DC.B    'BLT', 0
00003D36= 44 49 56 53 00          4730  DIVSmatch       DC.B    'DIVS', 0
00003D3B= 4F 52 00                4731  ORmatch         DC.B    'OR', 0
00003D3E= 53 55 42 00             4732  SUBmatch        DC.B    'SUB', 0
00003D42= 45 4F 52 00             4733  EORmatch        DC.B    'EOR', 0
00003D46= 43 4D 50 00             4734  CMPmatch        DC.B    'CMP', 0
00003D4A= 4D 55 4C 53 00          4735  MULSmatch       DC.B    'MULS', 0
00003D4F= 41 44 44 00             4736  ADDmatch        DC.B    'ADD', 0
00003D53= 41 44 44 41 00          4737  ADDAmatch       DC.B    'ADDA', 0
00003D58= 4C 53 52 00             4738  LSRmatch        DC.B    'LSR', 0
00003D5C= 4C 53 4C 00             4739  LSLmatch        DC.B    'LSL', 0
00003D60= 41 53 52 00             4740  ASRmatch        DC.B    'ASR', 0
00003D64= 41 53 4C 00             4741  ASLmatch        DC.B    'ASL', 0
00003D68= 52 4F 52 00             4742  RORmatch        DC.B    'ROR', 0
00003D6C= 52 4F 4C 00             4743  ROLmatch        DC.B    'ROL', 0
00003D70                          4744  
00003D70= 2F 00                   4745  slash           DC.B    '/', 0
00003D72= 28 53 50 29 00          4746  stack           DC.B    '(SP)', 0
00003D77                          4747   
00003D77= 2E 42 00                4748  dispByte        DC.B    '.B', 0
00003D7A= 2E 57 00                4749  dispWord        DC.B    '.W', 0
00003D7D= 2E 4C 00                4750  dispLong        DC.B    '.L', 0
00003D80                          4751  
00003D80= 41 30 00                4752  dispA0          DC.B    'A0', 0
00003D83= 41 31 00                4753  dispA1          DC.B    'A1', 0
00003D86= 41 32 00                4754  dispA2          DC.B    'A2', 0
00003D89= 41 33 00                4755  dispA3          DC.B    'A3', 0
00003D8C= 41 34 00                4756  dispA4          DC.B    'A4', 0
00003D8F= 41 35 00                4757  dispA5          DC.B    'A5', 0
00003D92= 41 36 00                4758  dispA6          DC.B    'A6', 0
00003D95= 41 37 00                4759  dispA7          DC.B    'A7', 0
00003D98                          4760  
00003D98= 44 00                   4761  dispD           DC.B    'D',0
00003D9A= 44 30 00                4762  dispD0          DC.B    'D0', 0
00003D9D= 44 31 00                4763  dispD1          DC.B    'D1', 0
00003DA0= 44 32 00                4764  dispD2          DC.B    'D2', 0
00003DA3= 44 33 00                4765  dispD3          DC.B    'D3', 0
00003DA6= 44 34 00                4766  dispD4          DC.B    'D4', 0
00003DA9= 44 35 00                4767  dispD5          DC.B    'D5', 0
00003DAC= 44 36 00                4768  dispD6          DC.B    'D6', 0
00003DAF= 44 37 00                4769  dispD7          DC.B    'D7', 0 
00003DB2                          4770   
00003DB2                          4771             END    START                ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSLONG             34F8
ABSSHORT            34C0
ADDAMATCH           3D53
ADDINVALID          3C52
ADDMATCH            3D4F
ADDR0CONT           38F8
ADDR1CONT           3938
ADDR2CONT           3978
ADDR3CONT           39B8
ADDR4CONT           39F8
ADDR5CONT           3A38
ADDR6CONT           3A78
ADDRESS             3B0E
ADDRREG0            38D8
ADDRREG1            3908
ADDRREG2            3948
ADDRREG3            3988
ADDRREG4            39C8
ADDRREG5            3A08
ADDRREG6            3A48
ADDRREG7            3A88
ASLMATCH            3D64
ASRMATCH            3D60
BCLRMATCH           3CF7
BCSMATCH            3D26
BGEMATCH            3D2E
BLTMATCH            3D32
BRAEIGHT            114A
BRAELEVEN           1168
BRAFIVE             1112
BRAFOUR             10F6
BRAFOURTEEN         11D8
BRAMATCH            3D22
BRANINE             1164
BRAONE              10EA
BRASIX              1116
BRATHIRTEEN         1186
BRATHREE            10F2
BRATWELVE           1182
BRATWO              10EE
BRAZERO             10BA
BVCMATCH            3D2A
BYTLOOP             3B3C
CHECKDR             35CE
CLPER               3CE8
CMPIMATCH           3CF2
CMPMATCH            3D46
COMMA               3CE4
CR                  D
DATAREG0            3682
DATAREG1            36B2
DATAREG2            36F2
DATAREG3            3732
DATAREG4            3772
DATAREG5            37B2
DATAREG6            37F2
DATAREG7            3832
DEC                 3CEA
DISPA0              3D80
DISPA1              3D83
DISPA2              3D86
DISPA3              3D89
DISPA4              3D8C
DISPA5              3D8F
DISPA6              3D92
DISPA7              3D95
DISPBYTE            3D77
DISPD               3D98
DISPD0              3D9A
DISPD1              3D9D
DISPD2              3DA0
DISPD3              3DA3
DISPD4              3DA6
DISPD5              3DA9
DISPD6              3DAC
DISPD7              3DAF
DISPHEX             3CE2
DISPIMM             3530
DISPLAYA0           3038
DISPLAYA0A          3104
DISPLAYA0D          33C8
DISPLAYA0P          3230
DISPLAYA1           3048
DISPLAYA1A          3120
DISPLAYA1D          33E4
DISPLAYA1P          3258
DISPLAYA2           3058
DISPLAYA2A          313C
DISPLAYA2D          3400
DISPLAYA2P          3280
DISPLAYA3           3068
DISPLAYA3A          3158
DISPLAYA3D          341C
DISPLAYA3P          32A8
DISPLAYA4           3078
DISPLAYA4A          3174
DISPLAYA4D          3438
DISPLAYA4P          32D0
DISPLAYA5           3088
DISPLAYA5A          3190
DISPLAYA5D          3454
DISPLAYA5P          32F8
DISPLAYA6           3098
DISPLAYA6A          31AC
DISPLAYA6D          3470
DISPLAYA6P          3320
DISPLAYA7           30A8
DISPLAYA7A          31C8
DISPLAYA7D          348C
DISPLAYA7P          3348
DISPLAYD0           2F78
DISPLAYD1           2F88
DISPLAYD2           2F98
DISPLAYD3           2FA8
DISPLAYD4           2FB8
DISPLAYD5           2FC8
DISPLAYD6           2FD8
DISPLAYD7           2FE8
DISPLAYEIGHT        2EF0
DISPLONG            3D7D
DISPLOOP            3AC0
DISPWORD            3D7A
DIVSMATCH           3D36
DLETTERS            3AF4
DLNINE              3AE0
EIGHT               8
ELEVEN              B
ENDDISPSUB          3B08
ENDINGMESSAGE       3C9A
ENDLOOP             3C68
ENDMOVE             3A98
ENDMOVE1            3A9E
ENDPROG             3C74
ENDSUB              357C
ENDSUBROUTINE       2EFA
EORMATCH            3D42
ERRORMESSAGE        3CBA
FIRSTNIB            F0
FIVE                5
FOUR                4
FOURTEEN            E
HA                  3C12
HASHTAG             3CE0
HB                  3C1A
HC                  3C22
HD                  3C2A
HE                  3C32
HEIGHT              3C02
HF                  3C3A
HFIVE               3BEA
HFOUR               3BE2
HNINE               3C0A
HONE                3BCA
HSEVEN              3BFA
HSIX                3BF2
HTHREE              3BDA
HTWO                3BD2
HZERO               3BC2
IMMLONG             3564
INC                 3CEC
INVALID             3578
JSRMATCH            3D0F
LEAMATCH            3D19
LF                  A
LONGSKIP            3574
LOOP                1040
LSLMATCH            3D5C
LSRMATCH            3D58
MASK0               0
MASK1               1
MASK2               2
MASK3               4
MASK4               8
MASK5               10
MASK6               20
MASK7               40
MASK8               80
MASKA               5
MASKB               A
MASKC               14
MASKD               28
MASKE               50
MASKF               A0
MEMSB               268A
MEMSHIFTIMM         2ED6
MEMSHIFTS           11F2
MEMSL               2B9E
MEMSW               2914
MOVEAMATCH          3D01
MOVEMATCH           3CFC
MOVEMBRA            3582
MOVEML              35B2
MOVEMMATCH          3D13
MOVEMW              3596
MOVEOVER            3ABC
MULSMATCH           3D4A
NEGMATCH            3D07
NEWLINE             3CD9
NEXTH               3C42
NINE                9
ONE                 1
OPADDAL             2452
OPADDAW             23E2
OPADDB              2296
OPADDL              236E
OPADDW              2302
OPASBI              26C8
OPASBR              272A
OPASL               24C2
OPASLBI             2708
OPASLBR             276A
OPASLI              2BDC
OPASLLI             2C1C
OPASLLR             2C7E
OPASLR              2C3E
OPASLWI             2992
OPASLWR             29F4
OPASR               250E
OPASRBI             26E6
OPASRBR             2748
OPASRLI             2BFA
OPASRLR             2C5C
OPASRWI             2970
OPASRWR             29D2
OPASWI              2952
OPASWR              29B4
OPBCLR              1542
OPBCS               20DA
OPBGE               214A
OPBLT               2182
OPBRA               20A2
OPBVC               2112
OPCMP               1E0A
OPCMPB              1E3C
OPCMPI              13B4
OPCMPIB             13D6
OPCMPIL             14CC
OPCMPIW             1448
OPCMPL              1EF0
OPCMPW              1E96
OPDIVS              1C62
OPDYNBCLR           15A6
OPEOR               1CBC
OPEORB              1CEA
OPEORL              1DAA
OPEORW              1D4A
OPJSR               1992
OPLEA               1A94
OPLSBI              278C
OPLSBR              27EE
OPLSL               255A
OPLSLBI             27CC
OPLSLBR             282E
OPLSLI              2CA0
OPLSLLI             2CE0
OPLSLLR             2D42
OPLSLR              2D02
OPLSLWI             2A56
OPLSLWR             2AB8
OPLSR               25A6
OPLSRBI             27AA
OPLSRBR             280C
OPLSRLI             2CBE
OPLSRLR             2D20
OPLSRWI             2A34
OPLSRWR             2A96
OPLSWI              2A16
OPLSWR              2A78
OPMOVEAL            172C
OPMOVEAW            1822
OPMOVEB             1614
OPMOVEL             1698
OPMOVEM             1A0A
OPMOVEMLEA          19EE
OPMOVEW             1794
OPMULS              2232
OPNEG               188A
OPNEGB              18B8
OPNEGL              18F8
OPNEGW              1938
OPOR                1B14
OPORB               1B54
OPORI               124C
OPORIB              127A
OPORIL              1346
OPORIW              12E0
OPORL               1C08
OPORW               1BAE
OPPER               3CE6
OPROBI              2850
OPROBR              28B2
OPROL               25F2
OPROLBI             2890
OPROLBR             28F2
OPROLI              2D64
OPROLLI             2DA4
OPROLLR             2E06
OPROLR              2DC6
OPROLWI             2B1A
OPROLWR             2B7C
OPROR               263E
OPRORBI             286E
OPRORBR             28D0
OPRORLI             2D82
OPRORLR             2DE4
OPRORWI             2AF8
OPRORWR             2B5A
OPROWI              2ADA
OPROWR              2B3C
OPRTS               19D2
OPRTSJSR            1978
OPSUB               1F4A
OPSUBB              1F94
OPSUBL              2048
OPSUBQ              21BA
OPSUBQB             21EA
OPSUBQL             2216
OPSUBQW             2200
OPSUBW              1FEE
ORIMATCH            3CEE
ORMATCH             3D3B
OUTHEX              3AA4
PADDRDEC            3370
PADDRDIR            30B8
PADDRPOST           31E4
PADDRREG            2FF8
PDATAREG            2F38
PHEX                34A8
PRINTEA             2F00
PRINTINVALID        3C6E
PRINTMEM            3842
PRINTMEMNOW         3846
PRINTREGMEM         35F6
PRINTSTACK          35E2
PRNTIMM             2E28
PRNTREG             2E84
REG0CONT            36A2
REG1CONT            36E2
REG2CONT            3722
REG3CONT            3762
REG4CONT            37A2
REG5CONT            37E2
REG6CONT            3822
REGSHIFTS           1230
RETRY               3B12
ROLMATCH            3D6C
RORMATCH            3D68
RTSMATCH            3D0B
SECNIB              F
SEVEN               7
SIX                 6
SKIPPRINTEA         1A84
SLASH               3D70
SPACE               3CDD
STACK               3D72
START               1000
STARTINGMESSAGE     3C78
SUBLOOP             3B2A
SUBMATCH            3D3E
SUBQMATCH           3D1D
THIRTEEN            D
THREE               3
TWELVE              C
TWO                 2
ZERO                0
