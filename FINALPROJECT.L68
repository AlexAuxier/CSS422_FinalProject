00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.02
Created On: 11/26/2014 3:49:53 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :  Abdul Hakim, David Trinh, Alexander Auxier
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000  =0000000D                  7  CR          EQU     $0D     
00000000  =0000000A                  8  LF          EQU     $0A
00000000                             9    
00000000  =00002000                 10  test_start  EQU     $00002000   ; defined starting address
00000000  =00002005                 11  test_end    EQU     $00002005   ; defined ending address
00000000                            12       
00000000  =00000000                 13  zero        EQU     $00         ; defined hex value 0
00000000  =00000001                 14  one         EQU     $01         ; defined hex value 1 
00000000  =00000002                 15  two         EQU     $02         ; defined hex value 2
00000000  =00000003                 16  three       EQU     $03         ; defined hex value 3
00000000  =00000004                 17  four        EQU     $04         ; defined hex value 4
00000000  =00000005                 18  five        EQU     $05         ; defined hex value 5
00000000  =00000006                 19  six         EQU     $06         ; defined hex value 6
00000000  =00000007                 20  seven       EQU     $07
00000000  =00000008                 21  eight       EQU     $08         ; defined hex value 8
00000000  =00000009                 22  nine        EQU     $09         ; defined hex value 9
00000000  =0000000B                 23  eleven      EQU     $0B         ; defined hex value 11
00000000  =0000000C                 24  twelve      EQU     $0C         ; defined hex value 12
00000000  =0000000D                 25  thirteen    EQU     $0D         ; defined hex value 13
00000000  =0000000E                 26  fourteen    EQU     $0E         ; defined hex value 14
00000000                            27  
00000000  =00000000                 28  s1B         EQU     %0000       ; byte size 1 
00000000  =00000001                 29  s1W         EQU     %0001       ; word size 1
00000000  =00000002                 30  s1L         EQU     %0010       ; long size 1
00000000                            31  
00000000  =00000000                 32  s2W         EQU     %0000       ; word size 2
00000000  =00000001                 33  s2L         EQU     %0001       ; long size 2
00000000                            34  
00000000  =00000001                 35  s3B         EQU     %0001       ; byte size 3
00000000  =00000003                 36  s3W         EQU     %0011       ; word size 3
00000000  =00000002                 37  s3L         EQU     %0010       ; long size 3
00000000                            38  
00000000  =00000000                 39  addMatchDn  EQU     %0000       ; Address Mode Data Register
00000000  =00000001                 40  addMatchAn  EQU     %0001       ; Address Mode Address Register
00000000  =00000002                 41  addMatchAd  EQU     %0010       ; Address Mode Address
00000000  =00000003                 42  addMatchPi  EQU     %0011       ; Address Mode with PostIncrement
00000000  =00000004                 43  addMatchPd  EQU     %0100       ; Address Mode with PreDecrement
00000000  =00000007                 44  addMatchDi  EQU     %0111       ; Address Mode for Word, Long, or Immediate 
00000000                            45  
00000000  =00000000                 46  reg0        EQU     %0000       ; register 0
00000000  =00000001                 47  reg1        EQU     %0001       ; register 1
00000000  =00000002                 48  reg2        EQU     %0010       ; register 2
00000000  =00000003                 49  reg3        EQU     %0011       ; register 3
00000000  =00000004                 50  reg4        EQU     %0100       ; register 4
00000000  =00000005                 51  reg5        EQU     %0101       ; register 5
00000000  =00000006                 52  reg6        EQU     %0110       ; register 6
00000000  =00000007                 53  reg7        EQU     %0111       ; register 7
00000000                            54  
00000000  =000000F0                 55  firstNib    EQU     $F0
00000000  =0000000F                 56  secNib      EQU     $0F
00000000                            57               
00001000                            58              ORG    $1000
00001000                            59  START:                                  ; first instruction of program
00001000                            60        
00001000  207C 00002000             61          MOVEA.L     #test_start, A0     ; load starting address
00001006  247C 00002005             62          MOVEA.L     #test_end, A2       ; load ending address
0000100C                            63            
0000100C  4241                      64  LOOP    CLR         D1                  ; clear out D1
0000100E  4242                      65          CLR         D2                  ; clear out D2
00001010  B1CA                      66          CMPA.L      A2, A0              ; compare starting and ending addresses
00001012  6E00 0600                 67          BGT         endProg             ; if A0 > A1, we've finished, end program
00001016  1218                      68          MOVE.B      (A0)+, D1           ; load byte to D1 and increment A0 to next byte
00001018  1401                      69          MOVE.B      D1, D2              ; copy byte to D2 for manipulation
0000101A  E882                      70          ASR.L       #four, D2           ; get first nibble in D2
0000101C                            71          
0000101C  B43C 0000                 72          CMP.B       #zero, D2           ; compare with 0
00001020  6700 0064                 73          BEQ         braZero             ; branch out to zero method
00001024  B43C 0001                 74          CMP.B       #one, D2            ; compare with 1
00001028  6700 0088                 75          BEQ         braOne              ; branch out to one method
0000102C  B43C 0002                 76          CMP.B       #two, D2            ; compare with 2    
00001030  6700 0084                 77          BEQ         braTwo              ; branch out to two method
00001034  B43C 0003                 78          CMP.B       #three, D2          ; compare with 3
00001038  6700 007C                 79          BEQ         braThree            ; branch out to three method
0000103C  B43C 0004                 80          CMP.B       #four, D2           ; compare with 4
00001040  6700 0074                 81          BEQ         braFour             ; branch out to four method
00001044  B43C 0005                 82          CMP.B       #five, D2           ; compare with 5
00001048  6700 0088                 83          BEQ         braFive             ; branch out to five method
0000104C  B43C 0006                 84          CMP.B       #six, D2            ; compare with 6
00001050  6700 0084                 85          BEQ         braSix              ; branch out to six method
00001054  B43C 0008                 86          CMP.B       #eight, D2          ; compare with 8
00001058  6700 00A8                 87          BEQ         braEight            ; branch out to eight method
0000105C  B43C 0009                 88          CMP.B       #nine, D2           ; compare with 9
00001060  6700 00A0                 89          BEQ         braNine             ; branch out to nine method
00001064  B43C 000B                 90          CMP.B       #eleven, D2         ; compare with 11
00001068  6700 009C                 91          BEQ         braEleven           ; branch out to eleven method
0000106C  B43C 000C                 92          CMP.B       #twelve, D2         ; compare with 12
00001070  6700 0094                 93          BEQ         braTwelve           ; branch out to twelve method
00001074  B43C 000D                 94          CMP.B       #thirteen, D2       ; compare with 13
00001078  6700 0090                 95          BEQ         braThirteen         ; branch out to thirteen method
0000107C  B43C 000E                 96          CMP.B       #fourteen, D2       ; compare with 14
00001080  6700 0088                 97          BEQ         braFourteen         ; branch out to fourteen method
00001084  6086                      98          BRA         loop
00001086                            99  
00001086  4242                     100  braZero CLR         D2                  ; first nibble is 0, 3 opcodes are possible 
00001088  1401                     101          MOVE.B      D1, D2              ; clear out D2 and copy D1 back in
0000108A  C438 000F                102          AND.B       $0F, D2             ; set first nibble to 0
0000108E                           103   
0000108E  B43C 0000                104          CMP.B       #zero, D2           ; compare second nibble to 0
00001092  6700 00AA                105          BEQ         opORI               ; branch to ORI method
00001096  B43C 000C                106          CMP.B       #twelve, D2         ; compare second nibble to 12
0000109A  6700 017C                107          BEQ         opCMPI              ; branch to CMPI method
0000109E  B43C 0001                108          CMP.B       #one,D2             ; Test for static BCLR
000010A2  6700 01DC                109          BEQ         opStatBCLR          ; branch to BCLR
000010A6  B43C 0008                110          CMP.B       #eight,D2           ; Test for static BCLR
000010AA  6700 01A4                111          BEQ         opBCLR
000010AE  6000 0564                112          BRA         printInvalid
000010B2                           113          
000010B2                           114          
000010B2  6000 01FA                115  braOne  BRA         opMOVEB             ; we know that there is only one opcode that is MOVE.B
000010B6                           116  
000010B6                           117  braTwo  ; there are two opCodes available, MOVE.L, or MOVEA.L
000010B6                           118  
000010B6                           119  braThree ; there are two opCodes available, MOVE.W, or MOVEA.W
000010B6                           120  
000010B6  4242                     121  braFour CLR         D2                  ; first nibble is 4, 5 opcodes are possible 
000010B8  1401                     122          MOVE.B      D1, D2              ; clear out D2 and copy D1 back in
000010BA  C438 000F                123          AND.B       $0F, D2             ; set first nibble to 0
000010BE                           124   
000010BE  B43C 0004                125          CMP.B       #four, D2           ; compare second nibble to 4
000010C2  6700 020E                126          BEQ         opNEG               ; branch to NEG method
000010C6  B43C 000E                127          CMP.B       #fourteen, D2       ; compare second nibble to E
000010CA  6700 0212                128          BEQ         opRTSJSR            ; branch to JSR or RTS method
000010CE  6000 020E                129          BRA         opMOVEMLEA          ; otherwise, branch to MOVEM or LEA method
000010D2                           130  
000010D2  6000 020A                131  braFive BRA         opSUBQ              ; we know that there is only one opcode that is SUBQ
000010D6                           132  
000010D6  4242                     133  braSix  CLR         D2                  ; first nibble is 6, 5 opcodes are possible 
000010D8  1401                     134          MOVE.B      D1, D2              ; clear out D2 and copy D1 back in
000010DA  C438 000F                135          AND.B       $0F, D2             ; set first nibble to 0
000010DE                           136   
000010DE  B43C 0000                137          CMP.B       #zero, D2           ; compare second nibble to 0
000010E2  6700 0206                138          BEQ         opBRA               ; branch to BRA method
000010E6  B43C 0005                139          CMP.B       #five, D2           ; compare second nibble to 5
000010EA  6700 0216                140          BEQ         opBCS               ; branch to BCS method
000010EE  B43C 0008                141          CMP.B       #eight, D2          ; compare second nibble to 8
000010F2  6700 021A                142          BEQ         opBVC               ; branch to BCS method
000010F6  B43C 000C                143          CMP.B       #twelve, D2         ; compare second nibble to 12
000010FA  6700 021E                144          BEQ         opBGE               ; branch to BGE method
000010FE  6000 0226                145          BRA         opBLT               ; otherwise, branch to BLT method
00001102                           146  
00001102                           147  braEight    ; there are two opCodes available DIVS, or OR
00001102                           148  
00001102  6000 022E                149  braNine BRA         opSUB               ; we know that there is only one opcode that is SUB
00001106                           150  
00001106                           151  braEleven   ; there are two opCodes available EOR, or CMP
00001106                           152  
00001106  6000 0236                153  braTwelve   BRA     opMULS              ; we know that there is only one opcode that is MULS    
0000110A                           154    
0000110A                           155  braThirteen ; there are two opCodes available ADD, or ADDA
0000110A                           156  
0000110A  4242                     157  braFourteen CLR         D2                  ; first nibble is E, 5 opcodes are possible 
0000110C  1401                     158              MOVE.B      D1, D2              ; clear out D2 and copy D1 back in
0000110E  C438 000F                159              AND.B       $0F, D2             ; set first nibble to 0
00001112                           160   
00001112  B43C 0000                161              CMP.B       #zero, D2           ; compare second nibble to 0
00001116  6700 023E                162              BEQ         opASR               ; branch to ASR method
0000111A  B43C 0001                163              CMP.B       #one, D2            ; compare second nibble to 1
0000111E  6700 022A                164              BEQ         opASL               ; branch to ASL method
00001122  B43C 0002                165              CMP.B       #two, D2            ; compare second nibble to 2
00001126  6700 0246                166              BEQ         opLSR               ; branch to LSR method
0000112A  B43C 0003                167              CMP.B       #three, D2          ; compare second nibble to 3
0000112E  6700 0232                168              BEQ         opLSL               ; branch to LSL method
00001132  B43C 0006                169              CMP.B       #six, D2            ; compare second nibble to 6
00001136  6700 024E                170              BEQ         opROR               ; branch to ROR method
0000113A  6000 023E                171              BRA         opROL               ; otherwise, branch to ROL method
0000113E                           172  
0000113E  43F9 0000162D            173  opORI   LEA         ORImatch, A1        ; we know that the opcode will be ORI, so load A1 to print message
00001144  103C 000E                174          MOVE.B      #14, D0             ; command for trap call to display message
00001148  4E4F                     175          TRAP        #15                 ; trap call
0000114A                           176          
0000114A  1218                     177          MOVE.B      (A0)+, D1
0000114C  1401                     178          MOVE.B      D1,D2               ; copy data over
0000114E  EC42                     179          ASR         #6,D2               ; shifts 6 bits over to read just the size        
00001150  B43C 0000                180          CMP.B       #zero,D2
00001154  6700 0016                181          BEQ         opORIB
00001158  B43C 0001                182          CMP.B       #one,D2
0000115C  6700 0064                183          BEQ         opORIW
00001160  B43C 0002                184          CMP.B       #two,D2
00001164  6700 00B2                185          BEQ         opORIL
00001168                           186          
00001168  6000 04AA                187          BRA         printInvalid
0000116C                           188          
0000116C  43F9 000016AF            189  opORIB  LEA         dispByte, A1        ; Display byte
00001172  103C 000E                190          MOVE.B      #14, D0             ; command for trap call to display message
00001176  4E4F                     191          TRAP        #15                 ; trap call
00001178                           192          
00001178  43F9 0000161C            193          LEA         space, A1           ; Display space
0000117E  103C 000E                194          MOVE.B      #14, D0             ; command for trap call to display message
00001182  4E4F                     195          TRAP        #15                 ; trap call
00001184                           196          
00001184  4242                     197          CLR         D2
00001186  1401                     198          MOVE.B      D1,D2
00001188  E642                     199          ASR         #three,D2
0000118A  C47C 0007                200          AND         #seven,D2
0000118E  4243                     201          CLR         D3        
00001190  1601                     202          MOVE.B      D1,D3
00001192  C67C 0007                203          AND         #seven,D3
00001196                           204          
00001196  4241                     205          CLR         D1
00001198  3218                     206          MOVE.W      (A0)+, D1
0000119A                           207          
0000119A  43F9 0000161F            208          LEA         hashTag, A1           ; Display space
000011A0  103C 000E                209          MOVE.B      #14, D0             ; command for trap call to display message
000011A4  4E4F                     210          TRAP        #15                 ; trap call
000011A6                           211          
000011A6  103C 0003                212          MOVE.B      #3, D0
000011AA  4E4F                     213          TRAP        #15
000011AC                           214          
000011AC  43F9 00001623            215          LEA         comma, A1           ; Display space
000011B2  103C 000E                216          MOVE.B      #14, D0             ; command for trap call to display message
000011B6  4E4F                     217          TRAP        #15                 ; trap call
000011B8                           218          
000011B8  4EB9 00001392            219          JSR         printEA
000011BE                           220          
000011BE  6000 FE4C                221          BRA         LOOP
000011C2                           222          
000011C2                           223          
000011C2  43F9 000016AF            224  opORIW  LEA         dispByte, A1        ; Display byte
000011C8  103C 000E                225          MOVE.B      #14, D0             ; command for trap call to display message
000011CC  4E4F                     226          TRAP        #15                 ; trap call
000011CE                           227          
000011CE  43F9 0000161C            228          LEA         space, A1           ; Display space
000011D4  103C 000E                229          MOVE.B      #14, D0             ; command for trap call to display message
000011D8  4E4F                     230          TRAP        #15                 ; trap call
000011DA                           231          
000011DA  4242                     232          CLR         D2
000011DC  1401                     233          MOVE.B      D1,D2
000011DE  E642                     234          ASR         #three,D2
000011E0  C47C 0007                235          AND         #seven,D2
000011E4  4243                     236          CLR         D3        
000011E6  1601                     237          MOVE.B      D1,D3
000011E8  C67C 0007                238          AND         #seven,D3
000011EC                           239          
000011EC  4241                     240          CLR         D1
000011EE  3218                     241          MOVE.W      (A0)+, D1
000011F0                           242          
000011F0  43F9 0000161F            243          LEA         hashTag, A1           ; Display space
000011F6  103C 000E                244          MOVE.B      #14, D0             ; command for trap call to display message
000011FA  4E4F                     245          TRAP        #15                 ; trap call
000011FC                           246          
000011FC  103C 0003                247          MOVE.B      #3, D0
00001200  4E4F                     248          TRAP        #15
00001202                           249          
00001202  43F9 00001623            250          LEA         comma, A1           ; Display space
00001208  103C 000E                251          MOVE.B      #14, D0             ; command for trap call to display message
0000120C  4E4F                     252          TRAP        #15                 ; trap call
0000120E                           253          
0000120E  4EB9 00001392            254          JSR         printEA
00001214                           255          
00001214  6000 FDF6                256          BRA         LOOP
00001218                           257       
00001218                           258  opORIL  
00001218                           259           
00001218  43F9 00001631            260  opCMPI  LEA         CMPImatch, A1       ; we know that the opcode will be CMPI, so load A1 to print message
0000121E  103C 000E                261          MOVE.B      #14, D0             ; command for trap call to display message
00001222  4E4F                     262          TRAP        #15                 ; trap call
00001224                           263                  
00001224  1218                     264          MOVE.B      (A0)+, D1
00001226  1401                     265          MOVE.B      D1,D2               ; copy data over
00001228  EC42                     266          ASR         #6,D2               ; shifts 6 bits over to read just the size        
0000122A  3602                     267          MOVE        D2,D3               ; store size into D3
0000122C  4242                     268          CLR         D2
0000122E                           269          
0000122E  1401                     270          MOVE.B      D1,D2               ; Reload D2 with the same byte to get mode
00001230  E542                     271          ASL         #two,D2             ; Moving two bits over to isolate and remove the size
00001232  1802                     272          MOVE.B      D2,D4               ; Move the mode and register to D4 and leave the size
00001234  4242                     273          CLR         D2                  ; Clear out data register
00001236  1404                     274          MOVE.B      D4,D2               ; Put data back into D2 with just the mode and register
00001238  EA42                     275          ASR         #five,D2            ; Shift the register out to get just the mode
0000123A  1802                     276          MOVE.B      D2,D4               ; Store mode into D4
0000123C  4242                     277          CLR         D2
0000123E                           278          
0000123E  1401                     279          MOVE.B      D1,D2               ; Getting the EA register
00001240  EB42                     280          ASL         #five,D2
00001242  1A02                     281          MOVE.B      D2,D5               ; Move just the register into D5
00001244  4242                     282          CLR         D2                  ; Clearing D2 to put data back
00001246  1405                     283          MOVE.B      D5,D2               ; Putting back the register
00001248  EA42                     284          ASR         #five,D2            ; Shifting bits in order to read the register
0000124A  1A02                     285          MOVE.B      D2,D5               ; Store register into D5
0000124C                           286          
0000124C  6000 FDBE                287          BRA         LOOP                ; go back to the loop
00001250                           288  
00001250                           289  
00001250                           290  
00001250  43F9 00001636            291  opBCLR          LEA         BCLRmatch, A1       ; we know that the opcode will be CMPI, so load A1 to print message
00001256  103C 000E                292                  MOVE.B      #14, D0             ; command for trap call to display message
0000125A  4E4F                     293                  TRAP        #15                 ; trap call
0000125C                           294                  
0000125C  E242                     295                  ASR         #one,D2             ; Shift to the right to remove the 1
0000125E  1602                     296                  MOVE.B      D2,D3               ; Store register into D3
00001260                           297                  
00001260  4242                     298                  CLR         D2
00001262  1218                     299                  MOVE.B      (A0)+,D1
00001264  1401                     300                  MOVE.B      D1,D2
00001266  E442                     301                  ASR         #two,D2             ; Shift two bits over in order to put mode into the first nibble
00001268  C47C 000F                302                  AND         #secNib,D2          ; Clear first nibble
0000126C  E242                     303                  ASR         #one,D2             ; shift to remove register and have just the mode
0000126E  1802                     304                  MOVE.B      D2,D4               ; Move mode into D4
00001270  4242                     305                  CLR         D2
00001272                           306                  
00001272  1401                     307                  MOVE.B      D1,D2               ; Move data back into D2 to retrieve the register
00001274  E342                     308                  ASL         #one,D2             ; shift one to the left to move node to other nibble
00001276  C47C 000F                309                  AND         #secNib,D2          ; Clear other nibble
0000127A  E242                     310                  ASR         #one,D2             ; Move register back 
0000127C  1A02                     311                  MOVE.B      D2,D5               ; Store EA register
0000127E                           312                  
0000127E                           313  
0000127E  4242                     314                  CLR         D2                
00001280                           315          
00001280  43F9 00001636            316  opStatBCLR      LEA         BCLRmatch, A1       ; we know that the opcode will be BCLR, so load A1 to print message
00001286  103C 000E                317                  MOVE.B      #14, D0             ; command for trap call to display message
0000128A  4E4F                     318                  TRAP        #15                 ; trap call
0000128C                           319                  
0000128C  4242                     320                  CLR         D2
0000128E  1218                     321                  MOVE.B      (A0)+,D1
00001290  1401                     322                  MOVE.B      D1,D2
00001292  E442                     323                  ASR         #two,D2             ; Shift two bits over in order to put mode into the first nibble
00001294  C47C 000F                324                  AND         #secNib,D2          ; Clear first nibble
00001298  E242                     325                  ASR         #one,D2             ; shift to remove register and have just the mode
0000129A  1602                     326                  MOVE.B      D2,D3               ; Move mode into D3
0000129C  4242                     327                  CLR         D2
0000129E                           328                  
0000129E  1401                     329                  MOVE.B      D1,D2               ; Move data back into D2 to retrieve the register
000012A0  E342                     330                  ASL         #one,D2             ; shift one to the left to move node to other nibble
000012A2  C47C 000F                331                  AND         #secNib,D2          ; Clear other nibble
000012A6  E242                     332                  ASR         #one,D2             ; Move register back 
000012A8  1802                     333                  MOVE.B      D2,D4               ; Store register
000012AA                           334  
000012AA  6000 FD60                335                  BRA         LOOP                ; go back to the loop
000012AE                           336   
000012AE  43F9 0000163B            337  opMOVEB LEA         MOVEmatch, A1       ; we know that the opcode will be MOVE.B, so load A1 to print message
000012B4  103C 000E                338          MOVE.B      #14, D0             ; command for trap call to display message
000012B8  4E4F                     339          TRAP        #15                 ; trap call
000012BA  43F9 000016AF            340          LEA         dispByte, A1        ; display byte
000012C0  103C 000E                341          MOVE.B      #14, D0             ; command for trap call to display message
000012C4  4E4F                     342          TRAP        #15                 ; trap call
000012C6  43F9 0000161C            343          LEA         space, A1           ; create spaces
000012CC  103C 000E                344          MOVE.B      #14, D0             ; command for trap call to display message
000012D0  4E4F                     345          TRAP        #15                 ; trap call
000012D2                           346  
000012D2  43F9 00001646            347  opNEG   LEA         NEGmatch, A1        ; we know that the opcode will be NEG, so load A1 to print message
000012D8  103C 000E                348          MOVE.B      #14, D0             ; command for trap call to display message
000012DC  4E4F                     349          TRAP        #15                 ; trap call
000012DE                           350  
000012DE                           351  opRTSJSR
000012DE                           352  
000012DE                           353  opMOVEMLEA
000012DE                           354  
000012DE  43F9 0000165C            355  opSUBQ  LEA         SUBQmatch, A1       ; we know that the opcode will be SUBQ, so load A1 to print message
000012E4  103C 000E                356          MOVE.B      #14, D0             ; command for trap call to display message
000012E8  4E4F                     357          TRAP        #15                 ; trap call
000012EA                           358  
000012EA  43F9 00001661            359  opBRA   LEA         BRAmatch, A1        ; we know that the opcode will be BRA, so load A1 to print message
000012F0  103C 000E                360          MOVE.B      #14, D0             ; command for trap call to display message
000012F4  4E4F                     361          TRAP        #15                 ; trap call
000012F6  43F9 0000161C            362          LEA         space, A1           ; create spaces
000012FC  103C 000E                363          MOVE.B      #14, D0             ; command for trap call to display message
00001300  4E4F                     364          TRAP        #15                 ; trap call
00001302                           365  
00001302  43F9 00001665            366  opBCS   LEA         BCSmatch, A1        ; we know that the opcode will be BCS, so load A1 to print message
00001308  103C 000E                367          MOVE.B      #14, D0             ; command for trap call to display message
0000130C  4E4F                     368          TRAP        #15                 ; trap call
0000130E                           369  
0000130E  43F9 00001669            370  opBVC   LEA         BVCmatch, A1        ; we know that the opcode will be BVC, so load A1 to print message
00001314  103C 000E                371          MOVE.B      #14, D0             ; command for trap call to display message
00001318  4E4F                     372          TRAP        #15                 ; trap call
0000131A                           373  
0000131A  43F9 0000166D            374  opBGE   LEA         BGEmatch, A1        ; we know that the opcode will be BGE, so load A1 to print message
00001320  103C 000E                375          MOVE.B      #14, D0             ; command for trap call to display message
00001324  4E4F                     376          TRAP        #15                 ; trap call
00001326                           377  
00001326  43F9 00001671            378  opBLT   LEA         BLTmatch, A1        ; we know that the opcode will be BLT, so load A1 to print message
0000132C  103C 000E                379          MOVE.B      #14, D0             ; command for trap call to display message
00001330  4E4F                     380          TRAP        #15                 ; trap call
00001332                           381  
00001332  43F9 0000167D            382  opSUB   LEA         SUBmatch, A1        ; we know that the opcode will be SUB, so load A1 to print message
00001338  103C 000E                383          MOVE.B      #14, D0             ; command for trap call to display message
0000133C  4E4F                     384          TRAP        #15                 ; trap call
0000133E                           385  
0000133E  43F9 00001689            386  opMULS  LEA         MULSmatch, A1       ; we know that the opcode will be MULS, so load A1 to print message
00001344  103C 000E                387          MOVE.B      #14, D0             ; command for trap call to display message
00001348  4E4F                     388          TRAP        #15                 ; trap call
0000134A                           389  
0000134A  43F9 000016A3            390  opASL   LEA         ASLmatch, A1        ; we know that the opcode will be ASL, so load A1 to print message
00001350  103C 000E                391          MOVE.B      #14, D0             ; command for trap call to display message
00001354  4E4F                     392          TRAP        #15                 ; trap call
00001356                           393  
00001356  43F9 0000169F            394  opASR   LEA         ASRmatch, A1        ; we know that the opcode will be ASR, so load A1 to print message
0000135C  103C 000E                395          MOVE.B      #14, D0             ; command for trap call to display message
00001360  4E4F                     396          TRAP        #15                 ; trap call
00001362                           397  
00001362  43F9 0000169B            398  opLSL   LEA         LSLmatch, A1        ; we know that the opcode will be LSL, so load A1 to print message
00001368  103C 000E                399          MOVE.B      #14, D0             ; command for trap call to display message
0000136C  4E4F                     400          TRAP        #15                 ; trap call
0000136E                           401  
0000136E  43F9 00001697            402  opLSR   LEA         LSRmatch, A1        ; we know that the opcode will be LSR, so load A1 to print message
00001374  103C 000E                403          MOVE.B      #14, D0             ; command for trap call to display message
00001378  4E4F                     404          TRAP        #15                 ; trap call
0000137A                           405  
0000137A  43F9 000016AB            406  opROL   LEA         ROLmatch, A1        ; we know that the opcode will be ROL, so load A1 to print message
00001380  103C 000E                407          MOVE.B      #14, D0             ; command for trap call to display message
00001384  4E4F                     408          TRAP        #15                 ; trap call
00001386                           409  
00001386  43F9 000016A7            410  opROR   LEA         RORmatch, A1        ; we know that the opcode will be ROR, so load A1 to print message
0000138C  103C 000E                411          MOVE.B      #14, D0             ; command for trap call to display message
00001390  4E4F                     412          TRAP        #15                 ; trap call
00001392                           413  
00001392                           414  
00001392                           415  ***********************************************************************************************************
00001392                           416  * EA Print Check
00001392                           417  ***********************************************************************************************************
00001392  48E7 FFFE                418  printEA MOVEM.L  D0-D7/A0-A6, -(SP)
00001396                           419  
00001396  B43C 0000                420          CMP.B       #zero, D2
0000139A  6700 0026                421          BEQ         pDataReg
0000139E  B43C 0001                422          CMP.B       #one, D2
000013A2  6700 00DE                423          BEQ         pAddrReg
000013A6  B43C 0002                424          CMP.B       #two, D2
000013AA  6700 0196                425          BEQ         pAddrDir
000013AE  B43C 0003                426          CMP.B       #three, D2
000013B2  6700 025A                427          BEQ         pAddrPost
000013B6  B43C 0004                428          CMP.B       #four, D2
000013BA  6700 0252                429          BEQ         pAddrDec
000013BE  6000 024E                430          BRA         invalid
000013C2                           431          
000013C2  B63C 0000                432  pDataReg    CMP.B   #zero,D3
000013C6  6700 003A                433              BEQ     displayD0
000013CA  B63C 0001                434              CMP.B   #one,D3
000013CE  6700 0042                435              BEQ     displayD1
000013D2  B63C 0002                436              CMP.B   #two,D3
000013D6  6700 004A                437              BEQ     displayD2
000013DA  B63C 0003                438              CMP.B   #three,D3
000013DE  6700 0052                439              BEQ     displayD3
000013E2  B63C 0004                440              CMP.B   #four,D3
000013E6  6700 005A                441              BEQ     displayD4
000013EA  B63C 0005                442              CMP.B   #five,D3
000013EE  6700 0062                443              BEQ     displayD5
000013F2  B63C 0006                444              CMP.B   #six,D3
000013F6  6700 006A                445              BEQ     displayD6
000013FA  B63C 0007                446              CMP.B   #seven,D3
000013FE  6700 0072                447              BEQ     displayD7
00001402                           448              
00001402  43F9 000016D0            449  displayD0   LEA         dispD0, A1          ; Display space
00001408  103C 000E                450              MOVE.B      #14, D0             ; command for trap call to display message
0000140C  4E4F                     451              TRAP        #15                 ; trap call
0000140E  6000 01FE                452              BRA         endSUB              ; go to the end of the subroutine
00001412                           453              
00001412  43F9 000016D3            454  displayD1   LEA         dispD1, A1          ; Display space
00001418  103C 000E                455              MOVE.B      #14, D0             ; command for trap call to display message
0000141C  4E4F                     456              TRAP        #15                 ; trap call
0000141E  6000 01EE                457              BRA         endSUB              ; go to the end of the subroutine
00001422                           458  
00001422  43F9 000016D6            459  displayD2   LEA         dispD2, A1          ; Display space
00001428  103C 000E                460              MOVE.B      #14, D0             ; command for trap call to display message
0000142C  4E4F                     461              TRAP        #15                 ; trap call
0000142E  6000 01DE                462              BRA         endSUB              ; go to the end of the subroutine
00001432                           463  
00001432  43F9 000016D9            464  displayD3   LEA         dispD3, A1          ; Display space
00001438  103C 000E                465              MOVE.B      #14, D0             ; command for trap call to display message
0000143C  4E4F                     466              TRAP        #15                 ; trap call
0000143E  6000 01CE                467              BRA         endSUB              ; go to the end of the subroutine
00001442                           468  
00001442  43F9 000016DC            469  displayD4   LEA         dispD4, A1          ; Display space
00001448  103C 000E                470              MOVE.B      #14, D0             ; command for trap call to display message
0000144C  4E4F                     471              TRAP        #15                 ; trap call
0000144E  6000 01BE                472              BRA         endSUB              ; go to the end of the subroutine
00001452                           473  
00001452  43F9 000016DF            474  displayD5   LEA         dispD5, A1          ; Display space
00001458  103C 000E                475              MOVE.B      #14, D0             ; command for trap call to display message
0000145C  4E4F                     476              TRAP        #15                 ; trap call
0000145E  6000 01AE                477              BRA         endSUB              ; go to the end of the subroutine
00001462                           478  
00001462  43F9 000016E2            479  displayD6   LEA         dispD6, A1          ; Display space
00001468  103C 000E                480              MOVE.B      #14, D0             ; command for trap call to display message
0000146C  4E4F                     481              TRAP        #15                 ; trap call
0000146E  6000 019E                482              BRA         endSUB              ; go to the end of the subroutine
00001472                           483  
00001472  43F9 000016E5            484  displayD7   LEA         dispD7, A1          ; Display space
00001478  103C 000E                485              MOVE.B      #14, D0             ; command for trap call to display message
0000147C  4E4F                     486              TRAP        #15                 ; trap call
0000147E  6000 018E                487              BRA         endSUB              ; go to the end of the subroutine
00001482                           488  
00001482  B63C 0000                489  pAddrReg    CMP.B   #zero,D3
00001486  6700 003A                490              BEQ     displayA0
0000148A  B63C 0001                491              CMP.B   #one,D3
0000148E  6700 0042                492              BEQ     displayA1
00001492  B63C 0002                493              CMP.B   #two,D3
00001496  6700 004A                494              BEQ     displayA2
0000149A  B63C 0003                495              CMP.B   #three,D3
0000149E  6700 0052                496              BEQ     displayA3
000014A2  B63C 0004                497              CMP.B   #four,D3
000014A6  6700 005A                498              BEQ     displayA4
000014AA  B63C 0005                499              CMP.B   #five,D3
000014AE  6700 0062                500              BEQ     displayA5
000014B2  B63C 0006                501              CMP.B   #six,D3
000014B6  6700 006A                502              BEQ     displayA6
000014BA  B63C 0007                503              CMP.B   #seven,D3
000014BE  6700 0072                504              BEQ     displayA7
000014C2                           505              
000014C2  43F9 000016B8            506  displayA0   LEA         dispA0, A1          ; Display space
000014C8  103C 000E                507              MOVE.B      #14, D0             ; command for trap call to display message
000014CC  4E4F                     508              TRAP        #15                 ; trap call
000014CE  6000 013E                509              BRA         endSUB              ; go to the end of the subroutine
000014D2                           510              
000014D2  43F9 000016BB            511  displayA1   LEA         dispA1, A1          ; Display space
000014D8  103C 000E                512              MOVE.B      #14, D0             ; command for trap call to display message
000014DC  4E4F                     513              TRAP        #15                 ; trap call
000014DE  6000 012E                514              BRA         endSUB              ; go to the end of the subroutine
000014E2                           515  
000014E2  43F9 000016BE            516  displayA2   LEA         dispA2, A1          ; Display space
000014E8  103C 000E                517              MOVE.B      #14, D0             ; command for trap call to display message
000014EC  4E4F                     518              TRAP        #15                 ; trap call
000014EE  6000 011E                519              BRA         endSUB              ; go to the end of the subroutine
000014F2                           520  
000014F2  43F9 000016C1            521  displayA3   LEA         dispA3, A1          ; Display space
000014F8  103C 000E                522              MOVE.B      #14, D0             ; command for trap call to display message
000014FC  4E4F                     523              TRAP        #15                 ; trap call
000014FE  6000 010E                524              BRA         endSUB              ; go to the end of the subroutine
00001502                           525  
00001502  43F9 000016C4            526  displayA4   LEA         dispA4, A1          ; Display space
00001508  103C 000E                527              MOVE.B      #14, D0             ; command for trap call to display message
0000150C  4E4F                     528              TRAP        #15                 ; trap call
0000150E  6000 00FE                529              BRA         endSUB              ; go to the end of the subroutine
00001512                           530  
00001512  43F9 000016C7            531  displayA5   LEA         dispA5, A1          ; Display space
00001518  103C 000E                532              MOVE.B      #14, D0             ; command for trap call to display message
0000151C  4E4F                     533              TRAP        #15                 ; trap call
0000151E  6000 00EE                534              BRA         endSUB              ; go to the end of the subroutine
00001522                           535  
00001522  43F9 000016CA            536  displayA6   LEA         dispA6, A1          ; Display space
00001528  103C 000E                537              MOVE.B      #14, D0             ; command for trap call to display message
0000152C  4E4F                     538              TRAP        #15                 ; trap call
0000152E  6000 00DE                539              BRA         endSUB              ; go to the end of the subroutine
00001532                           540  
00001532  43F9 000016CD            541  displayA7   LEA         dispA7, A1          ; Display space
00001538  103C 000E                542              MOVE.B      #14, D0             ; command for trap call to display message
0000153C  4E4F                     543              TRAP        #15                 ; trap call
0000153E  6000 00CE                544              BRA         endSUB              ; go to the end of the subroutine
00001542                           545  
00001542  43F9 00001625            546  pAddrDir    LEA         opPer, A1           ; Display space
00001548  103C 000E                547              MOVE.B      #14, D0             ; command for trap call to display message
0000154C  4E4F                     548              TRAP        #15                 ; trap call
0000154E                           549              
0000154E  B63C 0000                550              CMP.B   #zero,D3
00001552  6700 003A                551              BEQ     displayA0A
00001556  B63C 0001                552              CMP.B   #one,D3
0000155A  6700 0042                553              BEQ     displayA1A
0000155E  B63C 0002                554              CMP.B   #two,D3
00001562  6700 004A                555              BEQ     displayA2A
00001566  B63C 0003                556              CMP.B   #three,D3
0000156A  6700 0052                557              BEQ     displayA3A
0000156E  B63C 0004                558              CMP.B   #four,D3
00001572  6700 005A                559              BEQ     displayA4A
00001576  B63C 0005                560              CMP.B   #five,D3
0000157A  6700 0062                561              BEQ     displayA5A
0000157E  B63C 0006                562              CMP.B   #six,D3
00001582  6700 006A                563              BEQ     displayA6A
00001586  B63C 0007                564              CMP.B   #seven,D3
0000158A  6700 0072                565              BEQ     displayA7A
0000158E                           566              
0000158E  43F9 000016B8            567  displayA0A  LEA         dispA0, A1          ; Display space
00001594  103C 000E                568              MOVE.B      #14, D0             ; command for trap call to display message
00001598  4E4F                     569              TRAP        #15                 ; trap call
0000159A  6000 0072                570              BRA         endSUB              ; go to the end of the subroutine
0000159E                           571              
0000159E  43F9 000016BB            572  displayA1A  LEA         dispA1, A1          ; Display space
000015A4  103C 000E                573              MOVE.B      #14, D0             ; command for trap call to display message
000015A8  4E4F                     574              TRAP        #15                 ; trap call
000015AA  6000 0062                575              BRA         endSUB              ; go to the end of the subroutine
000015AE                           576  
000015AE  43F9 000016BE            577  displayA2A  LEA         dispA2, A1          ; Display space
000015B4  103C 000E                578              MOVE.B      #14, D0             ; command for trap call to display message
000015B8  4E4F                     579              TRAP        #15                 ; trap call
000015BA  6000 0052                580              BRA         endSUB              ; go to the end of the subroutine
000015BE                           581  
000015BE  43F9 000016C1            582  displayA3A  LEA         dispA3, A1          ; Display space
000015C4  103C 000E                583              MOVE.B      #14, D0             ; command for trap call to display message
000015C8  4E4F                     584              TRAP        #15                 ; trap call
000015CA  6000 0042                585              BRA         endSUB              ; go to the end of the subroutine
000015CE                           586  
000015CE  43F9 000016C4            587  displayA4A  LEA         dispA4, A1          ; Display space
000015D4  103C 000E                588              MOVE.B      #14, D0             ; command for trap call to display message
000015D8  4E4F                     589              TRAP        #15                 ; trap call
000015DA  6000 0032                590              BRA         endSUB              ; go to the end of the subroutine
000015DE                           591  
000015DE  43F9 000016C7            592  displayA5A  LEA         dispA5, A1          ; Display space
000015E4  103C 000E                593              MOVE.B      #14, D0             ; command for trap call to display message
000015E8  4E4F                     594              TRAP        #15                 ; trap call
000015EA  6000 0022                595              BRA         endSUB              ; go to the end of the subroutine
000015EE                           596  
000015EE  43F9 000016CA            597  displayA6A  LEA         dispA6, A1          ; Display space
000015F4  103C 000E                598              MOVE.B      #14, D0             ; command for trap call to display message
000015F8  4E4F                     599              TRAP        #15                 ; trap call
000015FA  6000 0012                600              BRA         endSUB              ; go to the end of the subroutine
000015FE                           601  
000015FE  43F9 000016CD            602  displayA7A  LEA         dispA7, A1          ; Display space
00001604  103C 000E                603              MOVE.B      #14, D0             ; command for trap call to display message
00001608  4E4F                     604              TRAP        #15                 ; trap call
0000160A  6000 0002                605              BRA         endSUB              ; go to the end of the subroutine
0000160E                           606  
0000160E                           607              
0000160E                           608  pAddrPost
0000160E                           609  
0000160E                           610  pAddrDec
0000160E                           611  
0000160E                           612  invalid
0000160E                           613  
0000160E                           614  endSUB
0000160E                           615          
0000160E  4CDF 7FFF                616          MOVEM.L  (SP)+, D0-D7/A0-A6
00001612  4E75                     617          RTS
00001614                           618  
00001614                           619  ***********************************************************************************************************
00001614                           620  ***********************************************************************************************************
00001614                           621  ***********************************************************************************************************
00001614                           622  
00001614                           623  printInvalid
00001614                           624  endPROG    
00001614                           625  
00001614  FFFF FFFF                626      SIMHALT                             ; halt simulator
00001618                           627  
00001618= 20 0D 0A 00              628  newLine     DC.B    ' ', CR, LF, 0
0000161C= 20 20 00                 629  space       DC.B    '  ', 0
0000161F                           630  
0000161F= 23 00                    631  hashTag     DC.B    '#', 0
00001621= 24 00                    632  dispHex     DC.B    '$', 0
00001623= 2C 00                    633  comma       DC.B    ',', 0
00001625                           634  
00001625= 28 00                    635  opPer       DC.B    '(', 0
00001627= 29 00                    636  clPer       DC.B    ')', 0
00001629= 2D 00                    637  dec         DC.B    '-', 0
0000162B= 2B 00                    638  inc         DC.B    '+', 0
0000162D                           639  
0000162D= 4F 52 49 00              640  ORImatch    DC.B    'ORI', 0
00001631= 43 4D 50 49 00           641  CMPImatch   DC.B    'CMPI', 0
00001636= 42 43 4C 52 00           642  BCLRmatch   DC.B    'BCLR', 0
0000163B= 4D 4F 56 45 00           643  MOVEmatch   DC.B    'MOVE', 0
00001640= 4D 4F 56 45 41 00        644  MOVEAmatch  DC.B    'MOVEA', 0
00001646= 4E 45 47 00              645  NEGmatch    DC.B    'NEG', 0
0000164A= 52 54 53 00              646  RTSmatch    DC.B    'RTS', 0
0000164E= 4A 53 52 00              647  JSRmatch    DC.B    'JSR', 0
00001652= 4D 4F 56 45 4D 00        648  MOVEMmatch  DC.B    'MOVEM', 0
00001658= 4C 45 41 00              649  LEAmatch    DC.B    'LEA', 0
0000165C= 53 55 42 51 00           650  SUBQmatch   DC.B    'SUBQ', 0
00001661= 42 52 41 00              651  BRAmatch    DC.B    'BRA', 0
00001665= 42 43 53 00              652  BCSmatch    DC.B    'BCS', 0
00001669= 42 56 43 00              653  BVCmatch    DC.B    'BVC', 0
0000166D= 42 47 45 00              654  BGEmatch    DC.B    'BGE', 0
00001671= 42 4C 54 00              655  BLTmatch    DC.B    'BLT', 0
00001675= 44 49 56 53 00           656  DIVSmatch   DC.B    'DIVS', 0
0000167A= 4F 52 00                 657  ORmatch     DC.B    'OR', 0
0000167D= 53 55 42 00              658  SUBmatch    DC.B    'SUB', 0
00001681= 45 4F 52 00              659  EORmatch    DC.B    'EOR', 0
00001685= 43 4D 50 00              660  CMPmatch    DC.B    'CMP', 0
00001689= 4D 55 4C 53 00           661  MULSmatch   DC.B    'MULS', 0
0000168E= 41 44 44 00              662  ADDmatch    DC.B    'ADD', 0
00001692= 41 44 44 41 00           663  ADDAmatch   DC.B    'ADDA', 0
00001697= 4C 53 52 00              664  LSRmatch    DC.B    'LSR', 0
0000169B= 4C 53 4C 00              665  LSLmatch    DC.B    'LSL', 0
0000169F= 41 53 52 00              666  ASRmatch    DC.B    'ASR', 0
000016A3= 41 53 4C 00              667  ASLmatch    DC.B    'ASL', 0
000016A7= 52 4F 52 00              668  RORmatch    DC.B    'ROR', 0
000016AB= 52 4F 4C 00              669  ROLmatch    DC.B    'ROL', 0
000016AF                           670   
000016AF= 2E 42 00                 671  dispByte    DC.B    '.B', 0
000016B2= 2E 57 00                 672  dispWord    DC.B    '.W', 0
000016B5= 2E 4C 00                 673  dispLong    DC.B    '.L', 0
000016B8                           674  
000016B8= 41 30 00                 675  dispA0      DC.B    'A0', 0
000016BB= 41 31 00                 676  dispA1      DC.B    'A1', 0
000016BE= 41 32 00                 677  dispA2      DC.B    'A2', 0
000016C1= 41 33 00                 678  dispA3      DC.B    'A3', 0
000016C4= 41 34 00                 679  dispA4      DC.B    'A4', 0
000016C7= 41 35 00                 680  dispA5      DC.B    'A5', 0
000016CA= 41 36 00                 681  dispA6      DC.B    'A6', 0
000016CD= 41 37 00                 682  dispA7      DC.B    'A7', 0
000016D0                           683  
000016D0= 44 30 00                 684  dispD0      DC.B    'D0', 0
000016D3= 44 31 00                 685  dispD1      DC.B    'D1', 0
000016D6= 44 32 00                 686  dispD2      DC.B    'D2', 0
000016D9= 44 33 00                 687  dispD3      DC.B    'D3', 0
000016DC= 44 34 00                 688  dispD4      DC.B    'D4', 0
000016DF= 44 35 00                 689  dispD5      DC.B    'D5', 0
000016E2= 44 36 00                 690  dispD6      DC.B    'D6', 0
000016E5= 44 37 00                 691  dispD7      DC.B    'D7', 0  
000016E8                           692             END    START                ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDAMATCH           1692
ADDMATCH            168E
ADDMATCHAD          2
ADDMATCHAN          1
ADDMATCHDI          7
ADDMATCHDN          0
ADDMATCHPD          4
ADDMATCHPI          3
ASLMATCH            16A3
ASRMATCH            169F
BCLRMATCH           1636
BCSMATCH            1665
BGEMATCH            166D
BLTMATCH            1671
BRAEIGHT            1102
BRAELEVEN           1106
BRAFIVE             10D2
BRAFOUR             10B6
BRAFOURTEEN         110A
BRAMATCH            1661
BRANINE             1102
BRAONE              10B2
BRASIX              10D6
BRATHIRTEEN         110A
BRATHREE            10B6
BRATWELVE           1106
BRATWO              10B6
BRAZERO             1086
BVCMATCH            1669
CLPER               1627
CMPIMATCH           1631
CMPMATCH            1685
COMMA               1623
CR                  D
DEC                 1629
DISPA0              16B8
DISPA1              16BB
DISPA2              16BE
DISPA3              16C1
DISPA4              16C4
DISPA5              16C7
DISPA6              16CA
DISPA7              16CD
DISPBYTE            16AF
DISPD0              16D0
DISPD1              16D3
DISPD2              16D6
DISPD3              16D9
DISPD4              16DC
DISPD5              16DF
DISPD6              16E2
DISPD7              16E5
DISPHEX             1621
DISPLAYA0           14C2
DISPLAYA0A          158E
DISPLAYA1           14D2
DISPLAYA1A          159E
DISPLAYA2           14E2
DISPLAYA2A          15AE
DISPLAYA3           14F2
DISPLAYA3A          15BE
DISPLAYA4           1502
DISPLAYA4A          15CE
DISPLAYA5           1512
DISPLAYA5A          15DE
DISPLAYA6           1522
DISPLAYA6A          15EE
DISPLAYA7           1532
DISPLAYA7A          15FE
DISPLAYD0           1402
DISPLAYD1           1412
DISPLAYD2           1422
DISPLAYD3           1432
DISPLAYD4           1442
DISPLAYD5           1452
DISPLAYD6           1462
DISPLAYD7           1472
DISPLONG            16B5
DISPWORD            16B2
DIVSMATCH           1675
EIGHT               8
ELEVEN              B
ENDPROG             1614
ENDSUB              160E
EORMATCH            1681
FIRSTNIB            F0
FIVE                5
FOUR                4
FOURTEEN            E
HASHTAG             161F
INC                 162B
INVALID             160E
JSRMATCH            164E
LEAMATCH            1658
LF                  A
LOOP                100C
LSLMATCH            169B
LSRMATCH            1697
MOVEAMATCH          1640
MOVEMATCH           163B
MOVEMMATCH          1652
MULSMATCH           1689
NEGMATCH            1646
NEWLINE             1618
NINE                9
ONE                 1
OPASL               134A
OPASR               1356
OPBCLR              1250
OPBCS               1302
OPBGE               131A
OPBLT               1326
OPBRA               12EA
OPBVC               130E
OPCMPI              1218
OPLSL               1362
OPLSR               136E
OPMOVEB             12AE
OPMOVEMLEA          12DE
OPMULS              133E
OPNEG               12D2
OPORI               113E
OPORIB              116C
OPORIL              1218
OPORIW              11C2
OPPER               1625
OPROL               137A
OPROR               1386
OPRTSJSR            12DE
OPSTATBCLR          1280
OPSUB               1332
OPSUBQ              12DE
ORIMATCH            162D
ORMATCH             167A
PADDRDEC            160E
PADDRDIR            1542
PADDRPOST           160E
PADDRREG            1482
PDATAREG            13C2
PRINTEA             1392
PRINTINVALID        1614
REG0                0
REG1                1
REG2                2
REG3                3
REG4                4
REG5                5
REG6                6
REG7                7
ROLMATCH            16AB
RORMATCH            16A7
RTSMATCH            164A
S1B                 0
S1L                 2
S1W                 1
S2L                 1
S2W                 0
S3B                 1
S3L                 2
S3W                 3
SECNIB              F
SEVEN               7
SIX                 6
SPACE               161C
START               1000
SUBMATCH            167D
SUBQMATCH           165C
TEST_END            2005
TEST_START          2000
THIRTEEN            D
THREE               3
TWELVE              C
TWO                 2
ZERO                0
